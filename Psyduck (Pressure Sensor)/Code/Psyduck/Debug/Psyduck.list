
Psyduck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080040d0  080040d0  000140d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004100  08004100  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004100  08004100  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004100  08004100  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000010  08004118  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  08004118  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb99  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f91  00000000  00000000  0002ebd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00030b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c10  00000000  00000000  00031868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baf0  00000000  00000000  00032478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6fb  00000000  00000000  0004df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a937a  00000000  00000000  0005d663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001069dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003688  00000000  00000000  00106a30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080040b8 	.word	0x080040b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080040b8 	.word	0x080040b8

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fc2e 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f85c 	bl	800028c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fa10 	bl	80005f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f9f0 	bl	80005bc <MX_DMA_Init>
  MX_ADC2_Init();
 80001dc:	f000 f8ae 	bl	800033c <MX_ADC2_Init>
  MX_CAN_Init();
 80001e0:	f000 f936 	bl	8000450 <MX_CAN_Init>
  MX_TIM2_Init();
 80001e4:	f000 f99c 	bl	8000520 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  hcan.Instance->MCR = 0x60; // important for debugging canbus, allows for normal operation during debugging
 80001e8:	4b24      	ldr	r3, [pc, #144]	; (800027c <main+0xb4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	2260      	movs	r2, #96	; 0x60
 80001ee:	601a      	str	r2, [r3, #0]
  HAL_CAN_Start(&hcan);
 80001f0:	4822      	ldr	r0, [pc, #136]	; (800027c <main+0xb4>)
 80001f2:	f001 faf9 	bl	80017e8 <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (HAL_CAN_GetRxFifoFillLevel(&hcan, fifo ) !=0) { // check if mail box is not empty
 80001f6:	4b22      	ldr	r3, [pc, #136]	; (8000280 <main+0xb8>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4619      	mov	r1, r3
 80001fc:	481f      	ldr	r0, [pc, #124]	; (800027c <main+0xb4>)
 80001fe:	f001 fd48 	bl	8001c92 <HAL_CAN_GetRxFifoFillLevel>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d033      	beq.n	8000270 <main+0xa8>
	  	HAL_CAN_GetRxMessage(&hcan, fifo, &RxHeader, Data); // copy frame data to RX header
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <main+0xb8>)
 800020a:	6819      	ldr	r1, [r3, #0]
 800020c:	4b1d      	ldr	r3, [pc, #116]	; (8000284 <main+0xbc>)
 800020e:	4a1e      	ldr	r2, [pc, #120]	; (8000288 <main+0xc0>)
 8000210:	481a      	ldr	r0, [pc, #104]	; (800027c <main+0xb4>)
 8000212:	f001 fc2c 	bl	8001a6e <HAL_CAN_GetRxMessage>
	  	switch (RxHeader.ExtId) {
 8000216:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <main+0xc0>)
 8000218:	685b      	ldr	r3, [r3, #4]
 800021a:	2b00      	cmp	r3, #0
 800021c:	d12a      	bne.n	8000274 <main+0xac>
	  		case 0:
	  			if  ((Data[0] == 0x02) || (Data[0] == 0x03) || (Data[0] == 0x08)) {
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <main+0xbc>)
 8000220:	781b      	ldrb	r3, [r3, #0]
 8000222:	2b02      	cmp	r3, #2
 8000224:	d007      	beq.n	8000236 <main+0x6e>
 8000226:	4b17      	ldr	r3, [pc, #92]	; (8000284 <main+0xbc>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b03      	cmp	r3, #3
 800022c:	d003      	beq.n	8000236 <main+0x6e>
 800022e:	4b15      	ldr	r3, [pc, #84]	; (8000284 <main+0xbc>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b08      	cmp	r3, #8
 8000234:	d105      	bne.n	8000242 <main+0x7a>
	  				HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2101      	movs	r1, #1
 800023a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023e:	f002 f8df 	bl	8002400 <HAL_GPIO_WritePin>
	  			}

	  			if ((Data[0] == 0x04) || (Data[0] == 0x05) || (Data[0] == 0x06) || (Data[0] == 0x07)) {
 8000242:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0xbc>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b04      	cmp	r3, #4
 8000248:	d00b      	beq.n	8000262 <main+0x9a>
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <main+0xbc>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b05      	cmp	r3, #5
 8000250:	d007      	beq.n	8000262 <main+0x9a>
 8000252:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <main+0xbc>)
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b06      	cmp	r3, #6
 8000258:	d003      	beq.n	8000262 <main+0x9a>
 800025a:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <main+0xbc>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b07      	cmp	r3, #7
 8000260:	d10a      	bne.n	8000278 <main+0xb0>
	  				HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_SET);
 8000262:	2201      	movs	r2, #1
 8000264:	2101      	movs	r1, #1
 8000266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800026a:	f002 f8c9 	bl	8002400 <HAL_GPIO_WritePin>
	  			}
	  			break;
 800026e:	e003      	b.n	8000278 <main+0xb0>
	  		default:
	  			break;

	  	}

	 }
 8000270:	bf00      	nop
 8000272:	e7c0      	b.n	80001f6 <main+0x2e>
	  			break;
 8000274:	bf00      	nop
 8000276:	e7be      	b.n	80001f6 <main+0x2e>
	  			break;
 8000278:	bf00      	nop
	 if (HAL_CAN_GetRxFifoFillLevel(&hcan, fifo ) !=0) { // check if mail box is not empty
 800027a:	e7bc      	b.n	80001f6 <main+0x2e>
 800027c:	20000084 	.word	0x20000084
 8000280:	20000030 	.word	0x20000030
 8000284:	200000e4 	.word	0x200000e4
 8000288:	20000194 	.word	0x20000194

0800028c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b096      	sub	sp, #88	; 0x58
 8000290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000292:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000296:	2228      	movs	r2, #40	; 0x28
 8000298:	2100      	movs	r1, #0
 800029a:	4618      	mov	r0, r3
 800029c:	f003 ff04 	bl	80040a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a0:	f107 031c 	add.w	r3, r7, #28
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b0:	1d3b      	adds	r3, r7, #4
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	605a      	str	r2, [r3, #4]
 80002b8:	609a      	str	r2, [r3, #8]
 80002ba:	60da      	str	r2, [r3, #12]
 80002bc:	611a      	str	r2, [r3, #16]
 80002be:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c0:	2302      	movs	r3, #2
 80002c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c8:	2310      	movs	r3, #16
 80002ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d0:	2300      	movs	r3, #0
 80002d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002d4:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 f8a6 	bl	8002430 <HAL_RCC_OscConfig>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ea:	f000 fa29 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	230f      	movs	r3, #15
 80002f0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f2:	2300      	movs	r3, #0
 80002f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000302:	f107 031c 	add.w	r3, r7, #28
 8000306:	2100      	movs	r1, #0
 8000308:	4618      	mov	r0, r3
 800030a:	f002 ff99 	bl	8003240 <HAL_RCC_ClockConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000314:	f000 fa14 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000318:	2380      	movs	r3, #128	; 0x80
 800031a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800031c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000320:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f003 f973 	bl	8003610 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000330:	f000 fa06 	bl	8000740 <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3758      	adds	r7, #88	; 0x58
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000342:	463b      	mov	r3, r7
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
 8000350:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000352:	4b3d      	ldr	r3, [pc, #244]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000354:	4a3d      	ldr	r2, [pc, #244]	; (800044c <MX_ADC2_Init+0x110>)
 8000356:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000358:	4b3b      	ldr	r3, [pc, #236]	; (8000448 <MX_ADC2_Init+0x10c>)
 800035a:	2200      	movs	r2, #0
 800035c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800035e:	4b3a      	ldr	r3, [pc, #232]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000360:	2200      	movs	r2, #0
 8000362:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000364:	4b38      	ldr	r3, [pc, #224]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000366:	2201      	movs	r2, #1
 8000368:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800036a:	4b37      	ldr	r3, [pc, #220]	; (8000448 <MX_ADC2_Init+0x10c>)
 800036c:	2201      	movs	r2, #1
 800036e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000370:	4b35      	ldr	r3, [pc, #212]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000372:	2200      	movs	r2, #0
 8000374:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000378:	4b33      	ldr	r3, [pc, #204]	; (8000448 <MX_ADC2_Init+0x10c>)
 800037a:	2200      	movs	r2, #0
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800037e:	4b32      	ldr	r3, [pc, #200]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000380:	2201      	movs	r2, #1
 8000382:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000384:	4b30      	ldr	r3, [pc, #192]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000386:	2200      	movs	r2, #0
 8000388:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800038a:	4b2f      	ldr	r3, [pc, #188]	; (8000448 <MX_ADC2_Init+0x10c>)
 800038c:	2204      	movs	r2, #4
 800038e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000390:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000392:	2201      	movs	r2, #1
 8000394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000398:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <MX_ADC2_Init+0x10c>)
 800039a:	2204      	movs	r2, #4
 800039c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800039e:	4b2a      	ldr	r3, [pc, #168]	; (8000448 <MX_ADC2_Init+0x10c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003a4:	4b28      	ldr	r3, [pc, #160]	; (8000448 <MX_ADC2_Init+0x10c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80003aa:	4827      	ldr	r0, [pc, #156]	; (8000448 <MX_ADC2_Init+0x10c>)
 80003ac:	f000 fba4 	bl	8000af8 <HAL_ADC_Init>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 80003b6:	f000 f9c3 	bl	8000740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80003ba:	2301      	movs	r3, #1
 80003bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003be:	2301      	movs	r3, #1
 80003c0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80003c6:	2305      	movs	r3, #5
 80003c8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003d2:	463b      	mov	r3, r7
 80003d4:	4619      	mov	r1, r3
 80003d6:	481c      	ldr	r0, [pc, #112]	; (8000448 <MX_ADC2_Init+0x10c>)
 80003d8:	f000 fd20 	bl	8000e1c <HAL_ADC_ConfigChannel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80003e2:	f000 f9ad 	bl	8000740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80003ea:	2302      	movs	r3, #2
 80003ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003ee:	463b      	mov	r3, r7
 80003f0:	4619      	mov	r1, r3
 80003f2:	4815      	ldr	r0, [pc, #84]	; (8000448 <MX_ADC2_Init+0x10c>)
 80003f4:	f000 fd12 	bl	8000e1c <HAL_ADC_ConfigChannel>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80003fe:	f000 f99f 	bl	8000740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000402:	2303      	movs	r3, #3
 8000404:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000406:	2303      	movs	r3, #3
 8000408:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800040a:	463b      	mov	r3, r7
 800040c:	4619      	mov	r1, r3
 800040e:	480e      	ldr	r0, [pc, #56]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000410:	f000 fd04 	bl	8000e1c <HAL_ADC_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 800041a:	f000 f991 	bl	8000740 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800041e:	2304      	movs	r3, #4
 8000420:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000422:	2304      	movs	r3, #4
 8000424:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000426:	2300      	movs	r3, #0
 8000428:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800042a:	463b      	mov	r3, r7
 800042c:	4619      	mov	r1, r3
 800042e:	4806      	ldr	r0, [pc, #24]	; (8000448 <MX_ADC2_Init+0x10c>)
 8000430:	f000 fcf4 	bl	8000e1c <HAL_ADC_ConfigChannel>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d001      	beq.n	800043e <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 800043a:	f000 f981 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000034 	.word	0x20000034
 800044c:	50000100 	.word	0x50000100

08000450 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000454:	4b2e      	ldr	r3, [pc, #184]	; (8000510 <MX_CAN_Init+0xc0>)
 8000456:	4a2f      	ldr	r2, [pc, #188]	; (8000514 <MX_CAN_Init+0xc4>)
 8000458:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 800045a:	4b2d      	ldr	r3, [pc, #180]	; (8000510 <MX_CAN_Init+0xc0>)
 800045c:	2201      	movs	r2, #1
 800045e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000460:	4b2b      	ldr	r3, [pc, #172]	; (8000510 <MX_CAN_Init+0xc0>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000466:	4b2a      	ldr	r3, [pc, #168]	; (8000510 <MX_CAN_Init+0xc0>)
 8000468:	2200      	movs	r2, #0
 800046a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 800046c:	4b28      	ldr	r3, [pc, #160]	; (8000510 <MX_CAN_Init+0xc0>)
 800046e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000472:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000474:	4b26      	ldr	r3, [pc, #152]	; (8000510 <MX_CAN_Init+0xc0>)
 8000476:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800047a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800047c:	4b24      	ldr	r3, [pc, #144]	; (8000510 <MX_CAN_Init+0xc0>)
 800047e:	2200      	movs	r2, #0
 8000480:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000482:	4b23      	ldr	r3, [pc, #140]	; (8000510 <MX_CAN_Init+0xc0>)
 8000484:	2200      	movs	r2, #0
 8000486:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <MX_CAN_Init+0xc0>)
 800048a:	2200      	movs	r2, #0
 800048c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_CAN_Init+0xc0>)
 8000490:	2200      	movs	r2, #0
 8000492:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_CAN_Init+0xc0>)
 8000496:	2200      	movs	r2, #0
 8000498:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_CAN_Init+0xc0>)
 800049c:	2200      	movs	r2, #0
 800049e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004a0:	481b      	ldr	r0, [pc, #108]	; (8000510 <MX_CAN_Init+0xc0>)
 80004a2:	f000 ffdc 	bl	800145e <HAL_CAN_Init>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80004ac:	f000 f948 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  FilterConfig.FilterIdHigh = 0x0000;
 80004b0:	4b19      	ldr	r3, [pc, #100]	; (8000518 <MX_CAN_Init+0xc8>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0x0000;
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <MX_CAN_Init+0xc8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0x0000;
 80004bc:	4b16      	ldr	r3, [pc, #88]	; (8000518 <MX_CAN_Init+0xc8>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <MX_CAN_Init+0xc8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80004c8:	4b13      	ldr	r3, [pc, #76]	; (8000518 <MX_CAN_Init+0xc8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterBank = 13;
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <MX_CAN_Init+0xc8>)
 80004d0:	220d      	movs	r2, #13
 80004d2:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80004d4:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_CAN_Init+0xc8>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <MX_CAN_Init+0xc8>)
 80004dc:	2200      	movs	r2, #0
 80004de:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80004e0:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <MX_CAN_Init+0xc8>)
 80004e2:	2201      	movs	r2, #1
 80004e4:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &FilterConfig);
 80004e6:	490c      	ldr	r1, [pc, #48]	; (8000518 <MX_CAN_Init+0xc8>)
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <MX_CAN_Init+0xc0>)
 80004ea:	f001 f8b3 	bl	8001654 <HAL_CAN_ConfigFilter>

  //Configuring TX:
  TxHeader.StdId = 0x00;
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <MX_CAN_Init+0xcc>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x01;
  TxHeader.RTR = CAN_RTR_DATA; 	 			// want data frame
 80004f4:	4b09      	ldr	r3, [pc, #36]	; (800051c <MX_CAN_Init+0xcc>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_EXT;	 			// want extended frame
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <MX_CAN_Init+0xcc>)
 80004fc:	2204      	movs	r2, #4
 80004fe:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;			 	 			// amounts of bytes u sending
 8000500:	4b06      	ldr	r3, [pc, #24]	; (800051c <MX_CAN_Init+0xcc>)
 8000502:	2204      	movs	r2, #4
 8000504:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <MX_CAN_Init+0xcc>)
 8000508:	2200      	movs	r2, #0
 800050a:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN_Init 2 */

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	20000084 	.word	0x20000084
 8000514:	40006400 	.word	0x40006400
 8000518:	200000b8 	.word	0x200000b8
 800051c:	2000017c 	.word	0x2000017c

08000520 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b088      	sub	sp, #32
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800053e:	4b1e      	ldr	r3, [pc, #120]	; (80005b8 <MX_TIM2_Init+0x98>)
 8000540:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000544:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_TIM2_Init+0x98>)
 8000548:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800054c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054e:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <MX_TIM2_Init+0x98>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <MX_TIM2_Init+0x98>)
 8000556:	f240 128f 	movw	r2, #399	; 0x18f
 800055a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <MX_TIM2_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000562:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_TIM2_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <MX_TIM2_Init+0x98>)
 800056a:	f003 f977 	bl	800385c <HAL_TIM_Base_Init>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000574:	f000 f8e4 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800057c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800057e:	f107 0310 	add.w	r3, r7, #16
 8000582:	4619      	mov	r1, r3
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <MX_TIM2_Init+0x98>)
 8000586:	f003 fadf 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000590:	f000 f8d6 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_TIM2_Init+0x98>)
 80005a2:	f003 fcd1 	bl	8003f48 <HAL_TIMEx_MasterConfigSynchronization>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80005ac:	f000 f8c8 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005b0:	bf00      	nop
 80005b2:	3720      	adds	r7, #32
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	200000ec 	.word	0x200000ec

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_DMA_Init+0x38>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <MX_DMA_Init+0x38>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_DMA_Init+0x38>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	200c      	movs	r0, #12
 80005e0:	f001 fc5b 	bl	8001e9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80005e4:	200c      	movs	r0, #12
 80005e6:	f001 fc74 	bl	8001ed2 <HAL_NVIC_EnableIRQ>

}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800060e:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_GPIO_Init+0x78>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a17      	ldr	r2, [pc, #92]	; (8000670 <MX_GPIO_Init+0x78>)
 8000614:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000618:	6153      	str	r3, [r2, #20]
 800061a:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_GPIO_Init+0x78>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_GPIO_Init+0x78>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a11      	ldr	r2, [pc, #68]	; (8000670 <MX_GPIO_Init+0x78>)
 800062c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_GPIO_Init+0x78>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000646:	f001 fedb 	bl	8002400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CONTROL_Pin */
  GPIO_InitStruct.Pin = CONTROL_Pin;
 800064a:	2301      	movs	r3, #1
 800064c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CONTROL_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 fd5a 	bl	800211c <HAL_GPIO_Init>

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <float2Bytes>:

/* USER CODE BEGIN 4 */
void float2Bytes(float val, uint8_t *bytes_array){
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	ed87 0a01 	vstr	s0, [r7, #4]
 800067e:	6038      	str	r0, [r7, #0]
  union {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  // Overite bytes of union with float variable
  u.float_variable = val;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fa      	ldr	r2, [r7, #12]
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	601a      	str	r2, [r3, #0]
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <HAL_TIM_PeriodElapsedCallback>:
			break;
				}
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < 3; ++i) { 										//looping through CAN messages and sending data acquired
 80006a0:	2300      	movs	r3, #0
 80006a2:	73fb      	strb	r3, [r7, #15]
 80006a4:	e036      	b.n	8000714 <HAL_TIM_PeriodElapsedCallback+0x7c>

				TxHeader.StdId = IDs[i];
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006b0:	601a      	str	r2, [r3, #0]
				float2Bytes(pressure[2-i], &bytes[0]); 						//converting the floats to packets of bytes
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	f1c3 0302 	rsb	r3, r3, #2
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	edd3 7a00 	vldr	s15, [r3]
 80006c2:	481b      	ldr	r0, [pc, #108]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006c4:	eeb0 0a67 	vmov.f32	s0, s15
 80006c8:	f7ff ffd4 	bl	8000674 <float2Bytes>

				for (uint8_t j=0 ; j < 4; j++) {
 80006cc:	2300      	movs	r3, #0
 80006ce:	73bb      	strb	r3, [r7, #14]
 80006d0:	e00a      	b.n	80006e8 <HAL_TIM_PeriodElapsedCallback+0x50>
					Data[3-j] = bytes[j]; 									//writing down for the data buffer
 80006d2:	7bba      	ldrb	r2, [r7, #14]
 80006d4:	7bbb      	ldrb	r3, [r7, #14]
 80006d6:	f1c3 0303 	rsb	r3, r3, #3
 80006da:	4915      	ldr	r1, [pc, #84]	; (8000730 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80006dc:	5c89      	ldrb	r1, [r1, r2]
 80006de:	4a15      	ldr	r2, [pc, #84]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006e0:	54d1      	strb	r1, [r2, r3]
				for (uint8_t j=0 ; j < 4; j++) {
 80006e2:	7bbb      	ldrb	r3, [r7, #14]
 80006e4:	3301      	adds	r3, #1
 80006e6:	73bb      	strb	r3, [r7, #14]
 80006e8:	7bbb      	ldrb	r3, [r7, #14]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d9f1      	bls.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x3a>
				}

				HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data, &TxMailBox ); 	// load message to mailbox
 80006ee:	4b12      	ldr	r3, [pc, #72]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006f0:	4a10      	ldr	r2, [pc, #64]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80006f2:	490d      	ldr	r1, [pc, #52]	; (8000728 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80006f4:	4811      	ldr	r0, [pc, #68]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80006f6:	f001 f8bb 	bl	8001870 <HAL_CAN_AddTxMessage>
				while (HAL_CAN_IsTxMessagePending( &hcan, TxMailBox));		//waiting till message gets through
 80006fa:	bf00      	nop
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000704:	f001 f98f 	bl	8001a26 <HAL_CAN_IsTxMessagePending>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f6      	bne.n	80006fc <HAL_TIM_PeriodElapsedCallback+0x64>
	for (uint8_t i=0; i < 3; ++i) { 										//looping through CAN messages and sending data acquired
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	3301      	adds	r3, #1
 8000712:	73fb      	strb	r3, [r7, #15]
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d9c5      	bls.n	80006a6 <HAL_TIM_PeriodElapsedCallback+0xe>
			}
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	2000017c 	.word	0x2000017c
 800072c:	200000ac 	.word	0x200000ac
 8000730:	200000e0 	.word	0x200000e0
 8000734:	200000e4 	.word	0x200000e4
 8000738:	2000002c 	.word	0x2000002c
 800073c:	20000084 	.word	0x20000084

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x44>)
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_MspInit+0x44>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6193      	str	r3, [r2, #24]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x44>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_MspInit+0x44>)
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	61d3      	str	r3, [r2, #28]
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <HAL_MspInit+0x44>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08a      	sub	sp, #40	; 0x28
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a29      	ldr	r2, [pc, #164]	; (8000858 <HAL_ADC_MspInit+0xc4>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d14c      	bne.n	8000850 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80007b6:	4b29      	ldr	r3, [pc, #164]	; (800085c <HAL_ADC_MspInit+0xc8>)
 80007b8:	695b      	ldr	r3, [r3, #20]
 80007ba:	4a28      	ldr	r2, [pc, #160]	; (800085c <HAL_ADC_MspInit+0xc8>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c0:	6153      	str	r3, [r2, #20]
 80007c2:	4b26      	ldr	r3, [pc, #152]	; (800085c <HAL_ADC_MspInit+0xc8>)
 80007c4:	695b      	ldr	r3, [r3, #20]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	613b      	str	r3, [r7, #16]
 80007cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <HAL_ADC_MspInit+0xc8>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a22      	ldr	r2, [pc, #136]	; (800085c <HAL_ADC_MspInit+0xc8>)
 80007d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b20      	ldr	r3, [pc, #128]	; (800085c <HAL_ADC_MspInit+0xc8>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e6:	23f0      	movs	r3, #240	; 0xf0
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fc:	f001 fc8e 	bl	800211c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <HAL_ADC_MspInit+0xd0>)
 8000804:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 800081a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800081e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000826:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000828:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 800082a:	2220      	movs	r2, #32
 800082c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000836:	f001 fb66 	bl	8001f06 <HAL_DMA_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000840:	f7ff ff7e 	bl	8000740 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4a06      	ldr	r2, [pc, #24]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 8000848:	639a      	str	r2, [r3, #56]	; 0x38
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <HAL_ADC_MspInit+0xcc>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000850:	bf00      	nop
 8000852:	3728      	adds	r7, #40	; 0x28
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	50000100 	.word	0x50000100
 800085c:	40021000 	.word	0x40021000
 8000860:	20000138 	.word	0x20000138
 8000864:	4002001c 	.word	0x4002001c

08000868 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <HAL_CAN_MspInit+0x80>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d129      	bne.n	80008de <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_CAN_MspInit+0x84>)
 800088c:	69db      	ldr	r3, [r3, #28]
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_CAN_MspInit+0x84>)
 8000890:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000894:	61d3      	str	r3, [r2, #28]
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_CAN_MspInit+0x84>)
 8000898:	69db      	ldr	r3, [r3, #28]
 800089a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_CAN_MspInit+0x84>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a11      	ldr	r2, [pc, #68]	; (80008ec <HAL_CAN_MspInit+0x84>)
 80008a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_CAN_MspInit+0x84>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80008cc:	2309      	movs	r3, #9
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008da:	f001 fc1f 	bl	800211c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40006400 	.word	0x40006400
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000900:	d113      	bne.n	800092a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_TIM_Base_MspInit+0x44>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <HAL_TIM_Base_MspInit+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_TIM_Base_MspInit+0x44>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	201c      	movs	r0, #28
 8000920:	f001 fabb 	bl	8001e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000924:	201c      	movs	r0, #28
 8000926:	f001 fad4 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800092a:	bf00      	nop
 800092c:	3710      	adds	r7, #16
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40021000 	.word	0x40021000

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800093c:	e7fe      	b.n	800093c <NMI_Handler+0x4>

0800093e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <HardFault_Handler+0x4>

08000944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <MemManage_Handler+0x4>

0800094a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <BusFault_Handler+0x4>

08000950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <UsageFault_Handler+0x4>

08000956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000976:	bf00      	nop
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f898 	bl	8000ab8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <DMA1_Channel2_IRQHandler+0x10>)
 8000992:	f001 faff 	bl	8001f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000138 	.word	0x20000138

080009a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <TIM2_IRQHandler+0x10>)
 80009a6:	f002 ffb0 	bl	800390a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	200000ec 	.word	0x200000ec

080009b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a02:	f7ff ffd7 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f003 fb2b 	bl	8004060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a0a:	f7ff fbdd 	bl	80001c8 <main>

08000a0e <LoopForever>:

LoopForever:
    b LoopForever
 8000a0e:	e7fe      	b.n	8000a0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a10:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a1c:	08004108 	.word	0x08004108
  ldr r2, =_sbss
 8000a20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a24:	20000234 	.word	0x20000234

08000a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC1_2_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_Init+0x28>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_Init+0x28>)
 8000a36:	f043 0310 	orr.w	r3, r3, #16
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a3c:	2003      	movs	r0, #3
 8000a3e:	f001 fa21 	bl	8001e84 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a42:	2000      	movs	r0, #0
 8000a44:	f000 f808 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a48:	f7ff fe80 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4c:	2300      	movs	r3, #0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x54>)
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_InitTick+0x58>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a76:	4618      	mov	r0, r3
 8000a78:	f001 fa39 	bl	8001eee <HAL_SYSTICK_Config>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e00e      	b.n	8000aa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	d80a      	bhi.n	8000aa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	f001 fa01 	bl	8001e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <HAL_InitTick+0x5c>)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	e000      	b.n	8000aa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	2000000c 	.word	0x2000000c
 8000ab4:	20000008 	.word	0x20000008

08000ab8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	; (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	2000000c 	.word	0x2000000c
 8000adc:	20000230 	.word	0x20000230

08000ae0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000230 	.word	0x20000230

08000af8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b09a      	sub	sp, #104	; 0x68
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000b06:	2300      	movs	r3, #0
 8000b08:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d101      	bne.n	8000b18 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e172      	b.n	8000dfe <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	691b      	ldr	r3, [r3, #16]
 8000b1c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d176      	bne.n	8000c18 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d152      	bne.n	8000bd8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff fe21 	bl	8000794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d13b      	bne.n	8000bd8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f000 fc1d 	bl	80013a0 <ADC_Disable>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	f003 0310 	and.w	r3, r3, #16
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d12f      	bne.n	8000bd8 <HAL_ADC_Init+0xe0>
 8000b78:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d12b      	bne.n	8000bd8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b88:	f023 0302 	bic.w	r3, r3, #2
 8000b8c:	f043 0202 	orr.w	r2, r3, #2
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	689a      	ldr	r2, [r3, #8]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ba2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000bb2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb4:	4b94      	ldr	r3, [pc, #592]	; (8000e08 <HAL_ADC_Init+0x310>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a94      	ldr	r2, [pc, #592]	; (8000e0c <HAL_ADC_Init+0x314>)
 8000bba:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbe:	0c9a      	lsrs	r2, r3, #18
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	4413      	add	r3, r2
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bca:	e002      	b.n	8000bd2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1f9      	bne.n	8000bcc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bf4:	d110      	bne.n	8000c18 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f023 0312 	bic.w	r3, r3, #18
 8000bfe:	f043 0210 	orr.w	r2, r3, #16
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	f043 0201 	orr.w	r2, r3, #1
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 0310 	and.w	r3, r3, #16
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f040 80df 	bne.w	8000de4 <HAL_ADC_Init+0x2ec>
 8000c26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 80da 	bne.w	8000de4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 80d2 	bne.w	8000de4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c48:	f043 0202 	orr.w	r2, r3, #2
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c50:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <HAL_ADC_Init+0x318>)
 8000c52:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c5c:	d102      	bne.n	8000c64 <HAL_ADC_Init+0x16c>
 8000c5e:	4b6d      	ldr	r3, [pc, #436]	; (8000e14 <HAL_ADC_Init+0x31c>)
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e002      	b.n	8000c6a <HAL_ADC_Init+0x172>
 8000c64:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000c68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d108      	bne.n	8000c8a <HAL_ADC_Init+0x192>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d101      	bne.n	8000c8a <HAL_ADC_Init+0x192>
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <HAL_ADC_Init+0x194>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d11c      	bne.n	8000cca <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d010      	beq.n	8000cb8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d107      	bne.n	8000cb2 <HAL_ADC_Init+0x1ba>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d101      	bne.n	8000cb2 <HAL_ADC_Init+0x1ba>
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e000      	b.n	8000cb4 <HAL_ADC_Init+0x1bc>
 8000cb2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d108      	bne.n	8000cca <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	431a      	orrs	r2, r3
 8000cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7e5b      	ldrb	r3, [r3, #25]
 8000cce:	035b      	lsls	r3, r3, #13
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000cd4:	2a01      	cmp	r2, #1
 8000cd6:	d002      	beq.n	8000cde <HAL_ADC_Init+0x1e6>
 8000cd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cdc:	e000      	b.n	8000ce0 <HAL_ADC_Init+0x1e8>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	68db      	ldr	r3, [r3, #12]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d11b      	bne.n	8000d36 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	7e5b      	ldrb	r3, [r3, #25]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d109      	bne.n	8000d1a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	045a      	lsls	r2, r3, #17
 8000d0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000d10:	4313      	orrs	r3, r2
 8000d12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d16:	663b      	str	r3, [r7, #96]	; 0x60
 8000d18:	e00d      	b.n	8000d36 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000d22:	f043 0220 	orr.w	r2, r3, #32
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	f043 0201 	orr.w	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d007      	beq.n	8000d4e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	4313      	orrs	r3, r2
 8000d48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	f003 030c 	and.w	r3, r3, #12
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d114      	bne.n	8000d86 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	6812      	ldr	r2, [r2, #0]
 8000d66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d6a:	f023 0302 	bic.w	r3, r3, #2
 8000d6e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e1b      	ldrb	r3, [r3, #24]
 8000d74:	039a      	lsls	r2, r3, #14
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d82:	4313      	orrs	r3, r2
 8000d84:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_ADC_Init+0x320>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d96:	430b      	orrs	r3, r1
 8000d98:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	691b      	ldr	r3, [r3, #16]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d10c      	bne.n	8000dbc <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	f023 010f 	bic.w	r1, r3, #15
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	1e5a      	subs	r2, r3, #1
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	430a      	orrs	r2, r1
 8000db8:	631a      	str	r2, [r3, #48]	; 0x30
 8000dba:	e007      	b.n	8000dcc <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 020f 	bic.w	r2, r2, #15
 8000dca:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f023 0303 	bic.w	r3, r3, #3
 8000dda:	f043 0201 	orr.w	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	641a      	str	r2, [r3, #64]	; 0x40
 8000de2:	e00a      	b.n	8000dfa <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f023 0312 	bic.w	r3, r3, #18
 8000dec:	f043 0210 	orr.w	r2, r3, #16
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000df4:	2301      	movs	r3, #1
 8000df6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3768      	adds	r7, #104	; 0x68
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000004 	.word	0x20000004
 8000e0c:	431bde83 	.word	0x431bde83
 8000e10:	50000300 	.word	0x50000300
 8000e14:	50000100 	.word	0x50000100
 8000e18:	fff0c007 	.word	0xfff0c007

08000e1c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b09b      	sub	sp, #108	; 0x6c
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_ADC_ConfigChannel+0x22>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e2a5      	b.n	800138a <HAL_ADC_ConfigChannel+0x56e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f040 8289 	bne.w	8001368 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d81c      	bhi.n	8000e98 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	461a      	mov	r2, r3
 8000e72:	231f      	movs	r3, #31
 8000e74:	4093      	lsls	r3, r2
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4019      	ands	r1, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
 8000e96:	e063      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b09      	cmp	r3, #9
 8000e9e:	d81e      	bhi.n	8000ede <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	3b1e      	subs	r3, #30
 8000eb4:	221f      	movs	r2, #31
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	4019      	ands	r1, r3
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	3b1e      	subs	r3, #30
 8000ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
 8000edc:	e040      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2b0e      	cmp	r3, #14
 8000ee4:	d81e      	bhi.n	8000f24 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685a      	ldr	r2, [r3, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	3b3c      	subs	r3, #60	; 0x3c
 8000efa:	221f      	movs	r2, #31
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	4019      	ands	r1, r3
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	6818      	ldr	r0, [r3, #0]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	3b3c      	subs	r3, #60	; 0x3c
 8000f16:	fa00 f203 	lsl.w	r2, r0, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	430a      	orrs	r2, r1
 8000f20:	639a      	str	r2, [r3, #56]	; 0x38
 8000f22:	e01d      	b.n	8000f60 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685a      	ldr	r2, [r3, #4]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	3b5a      	subs	r3, #90	; 0x5a
 8000f38:	221f      	movs	r2, #31
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	4019      	ands	r1, r3
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	3b5a      	subs	r3, #90	; 0x5a
 8000f54:	fa00 f203 	lsl.w	r2, r0, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f040 80e5 	bne.w	800113a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b09      	cmp	r3, #9
 8000f76:	d91c      	bls.n	8000fb2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6999      	ldr	r1, [r3, #24]
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	3b1e      	subs	r3, #30
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4019      	ands	r1, r3
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	6898      	ldr	r0, [r3, #8]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	3b1e      	subs	r3, #30
 8000fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	e019      	b.n	8000fe6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6959      	ldr	r1, [r3, #20]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	2207      	movs	r2, #7
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	4019      	ands	r1, r3
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6898      	ldr	r0, [r3, #8]
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	fa00 f203 	lsl.w	r2, r0, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	695a      	ldr	r2, [r3, #20]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	08db      	lsrs	r3, r3, #3
 8000ff2:	f003 0303 	and.w	r3, r3, #3
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	3b01      	subs	r3, #1
 8001004:	2b03      	cmp	r3, #3
 8001006:	d84f      	bhi.n	80010a8 <HAL_ADC_ConfigChannel+0x28c>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <HAL_ADC_ConfigChannel+0x1f4>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001021 	.word	0x08001021
 8001014:	08001043 	.word	0x08001043
 8001018:	08001065 	.word	0x08001065
 800101c:	08001087 	.word	0x08001087
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001026:	4b9e      	ldr	r3, [pc, #632]	; (80012a0 <HAL_ADC_ConfigChannel+0x484>)
 8001028:	4013      	ands	r3, r2
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	0691      	lsls	r1, r2, #26
 8001030:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001032:	430a      	orrs	r2, r1
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800103e:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001040:	e07e      	b.n	8001140 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001048:	4b95      	ldr	r3, [pc, #596]	; (80012a0 <HAL_ADC_ConfigChannel+0x484>)
 800104a:	4013      	ands	r3, r2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	0691      	lsls	r1, r2, #26
 8001052:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001054:	430a      	orrs	r2, r1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001060:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001062:	e06d      	b.n	8001140 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800106a:	4b8d      	ldr	r3, [pc, #564]	; (80012a0 <HAL_ADC_ConfigChannel+0x484>)
 800106c:	4013      	ands	r3, r2
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	0691      	lsls	r1, r2, #26
 8001074:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001076:	430a      	orrs	r2, r1
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001082:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001084:	e05c      	b.n	8001140 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800108c:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <HAL_ADC_ConfigChannel+0x484>)
 800108e:	4013      	ands	r3, r2
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	0691      	lsls	r1, r2, #26
 8001096:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001098:	430a      	orrs	r2, r1
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80010a4:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80010a6:	e04b      	b.n	8001140 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	069b      	lsls	r3, r3, #26
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d107      	bne.n	80010cc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ca:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80010d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	069b      	lsls	r3, r3, #26
 80010dc:	429a      	cmp	r2, r3
 80010de:	d107      	bne.n	80010f0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ee:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	069b      	lsls	r3, r3, #26
 8001100:	429a      	cmp	r2, r3
 8001102:	d107      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001112:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800111a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	069b      	lsls	r3, r3, #26
 8001124:	429a      	cmp	r2, r3
 8001126:	d10a      	bne.n	800113e <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001136:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001138:	e001      	b.n	800113e <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800113a:	bf00      	nop
 800113c:	e000      	b.n	8001140 <HAL_ADC_ConfigChannel+0x324>
      break;
 800113e:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 0303 	and.w	r3, r3, #3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x344>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b01      	cmp	r3, #1
 800115a:	d101      	bne.n	8001160 <HAL_ADC_ConfigChannel+0x344>
 800115c:	2301      	movs	r3, #1
 800115e:	e000      	b.n	8001162 <HAL_ADC_ConfigChannel+0x346>
 8001160:	2300      	movs	r3, #0
 8001162:	2b00      	cmp	r3, #0
 8001164:	f040 810b 	bne.w	800137e <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d00f      	beq.n	8001190 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2201      	movs	r2, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	400a      	ands	r2, r1
 800118a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800118e:	e049      	b.n	8001224 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2201      	movs	r2, #1
 800119e:	409a      	lsls	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d91c      	bls.n	80011ec <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6999      	ldr	r1, [r3, #24]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	3b1b      	subs	r3, #27
 80011c4:	2207      	movs	r2, #7
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	4019      	ands	r1, r3
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	6898      	ldr	r0, [r3, #8]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	3b1b      	subs	r3, #27
 80011de:	fa00 f203 	lsl.w	r2, r0, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	619a      	str	r2, [r3, #24]
 80011ea:	e01b      	b.n	8001224 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6959      	ldr	r1, [r3, #20]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	4613      	mov	r3, r2
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4413      	add	r3, r2
 80011fe:	2207      	movs	r2, #7
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	4019      	ands	r1, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	6898      	ldr	r0, [r3, #8]
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	4613      	mov	r3, r2
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4413      	add	r3, r2
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <HAL_ADC_ConfigChannel+0x488>)
 8001226:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b10      	cmp	r3, #16
 800122e:	d105      	bne.n	800123c <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001238:	2b00      	cmp	r3, #0
 800123a:	d015      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001240:	2b11      	cmp	r3, #17
 8001242:	d105      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001244:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800124c:	2b00      	cmp	r3, #0
 800124e:	d00b      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001254:	2b12      	cmp	r3, #18
 8001256:	f040 8092 	bne.w	800137e <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800125a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 808b 	bne.w	800137e <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001270:	d102      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x45c>
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <HAL_ADC_ConfigChannel+0x48c>)
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e002      	b.n	800127e <HAL_ADC_ConfigChannel+0x462>
 8001278:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800127c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 0303 	and.w	r3, r3, #3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d10f      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x490>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b01      	cmp	r3, #1
 8001298:	d108      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x490>
 800129a:	2301      	movs	r3, #1
 800129c:	e007      	b.n	80012ae <HAL_ADC_ConfigChannel+0x492>
 800129e:	bf00      	nop
 80012a0:	83fff000 	.word	0x83fff000
 80012a4:	50000300 	.word	0x50000300
 80012a8:	50000100 	.word	0x50000100
 80012ac:	2300      	movs	r3, #0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d150      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012b2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d010      	beq.n	80012da <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x4b8>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x4b8>
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <HAL_ADC_ConfigChannel+0x4ba>
 80012d4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d13c      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d11d      	bne.n	800131e <HAL_ADC_ConfigChannel+0x502>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012ea:	d118      	bne.n	800131e <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80012ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f8:	4b27      	ldr	r3, [pc, #156]	; (8001398 <HAL_ADC_ConfigChannel+0x57c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <HAL_ADC_ConfigChannel+0x580>)
 80012fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001302:	0c9a      	lsrs	r2, r3, #18
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800130e:	e002      	b.n	8001316 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3b01      	subs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800131c:	e02e      	b.n	800137c <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b11      	cmp	r3, #17
 8001324:	d10b      	bne.n	800133e <HAL_ADC_ConfigChannel+0x522>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132e:	d106      	bne.n	800133e <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800133c:	e01e      	b.n	800137c <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b12      	cmp	r3, #18
 8001344:	d11a      	bne.n	800137c <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800134e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001350:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001352:	e013      	b.n	800137c <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001358:	f043 0220 	orr.w	r2, r3, #32
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001366:	e00a      	b.n	800137e <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f043 0220 	orr.w	r2, r3, #32
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800137a:	e000      	b.n	800137e <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800137c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001386:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800138a:	4618      	mov	r0, r3
 800138c:	376c      	adds	r7, #108	; 0x6c
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000004 	.word	0x20000004
 800139c:	431bde83 	.word	0x431bde83

080013a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <ADC_Disable+0x2c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d101      	bne.n	80013cc <ADC_Disable+0x2c>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <ADC_Disable+0x2e>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d040      	beq.n	8001454 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030d 	and.w	r3, r3, #13
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d10f      	bne.n	8001400 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0202 	orr.w	r2, r2, #2
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2203      	movs	r2, #3
 80013f6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80013f8:	f7ff fb72 	bl	8000ae0 <HAL_GetTick>
 80013fc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013fe:	e022      	b.n	8001446 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f043 0210 	orr.w	r2, r3, #16
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e01c      	b.n	8001456 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800141c:	f7ff fb60 	bl	8000ae0 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d90d      	bls.n	8001446 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	f043 0210 	orr.w	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f043 0201 	orr.w	r2, r3, #1
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e007      	b.n	8001456 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b01      	cmp	r3, #1
 8001452:	d0e3      	beq.n	800141c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d101      	bne.n	8001470 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e0ed      	b.n	800164c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	2b00      	cmp	r3, #0
 800147a:	d102      	bne.n	8001482 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff f9f3 	bl	8000868 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0202 	bic.w	r2, r2, #2
 8001490:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001492:	f7ff fb25 	bl	8000ae0 <HAL_GetTick>
 8001496:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001498:	e012      	b.n	80014c0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800149a:	f7ff fb21 	bl	8000ae0 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b0a      	cmp	r3, #10
 80014a6:	d90b      	bls.n	80014c0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2205      	movs	r2, #5
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0c5      	b.n	800164c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e5      	bne.n	800149a <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f042 0201 	orr.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014de:	f7ff faff 	bl	8000ae0 <HAL_GetTick>
 80014e2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e4:	e012      	b.n	800150c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014e6:	f7ff fafb 	bl	8000ae0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d90b      	bls.n	800150c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2205      	movs	r2, #5
 8001504:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e09f      	b.n	800164c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0e5      	beq.n	80014e6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7e1b      	ldrb	r3, [r3, #24]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e007      	b.n	8001544 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001542:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e5b      	ldrb	r3, [r3, #25]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d108      	bne.n	800155e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e007      	b.n	800156e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	7e9b      	ldrb	r3, [r3, #26]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d108      	bne.n	8001588 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0220 	orr.w	r2, r2, #32
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e007      	b.n	8001598 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0220 	bic.w	r2, r2, #32
 8001596:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7edb      	ldrb	r3, [r3, #27]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d108      	bne.n	80015b2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0210 	bic.w	r2, r2, #16
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e007      	b.n	80015c2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f042 0210 	orr.w	r2, r2, #16
 80015c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7f1b      	ldrb	r3, [r3, #28]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0208 	orr.w	r2, r2, #8
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e007      	b.n	80015ec <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0208 	bic.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7f5b      	ldrb	r3, [r3, #29]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d108      	bne.n	8001606 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0204 	orr.w	r2, r2, #4
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e007      	b.n	8001616 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f022 0204 	bic.w	r2, r2, #4
 8001614:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689a      	ldr	r2, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	ea42 0103 	orr.w	r1, r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	1e5a      	subs	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2201      	movs	r2, #1
 8001646:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001654:	b480      	push	{r7}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800166c:	7cfb      	ldrb	r3, [r7, #19]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d003      	beq.n	800167a <HAL_CAN_ConfigFilter+0x26>
 8001672:	7cfb      	ldrb	r3, [r7, #19]
 8001674:	2b02      	cmp	r3, #2
 8001676:	f040 80aa 	bne.w	80017ce <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001680:	f043 0201 	orr.w	r2, r3, #1
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f003 031f 	and.w	r3, r3, #31
 8001692:	2201      	movs	r2, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	401a      	ands	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d123      	bne.n	80016fc <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	3248      	adds	r2, #72	; 0x48
 80016dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016f2:	6979      	ldr	r1, [r7, #20]
 80016f4:	3348      	adds	r3, #72	; 0x48
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d122      	bne.n	800174a <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	431a      	orrs	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001724:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3248      	adds	r2, #72	; 0x48
 800172a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800173e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001740:	6979      	ldr	r1, [r7, #20]
 8001742:	3348      	adds	r3, #72	; 0x48
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d109      	bne.n	8001766 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43db      	mvns	r3, r3
 800175c:	401a      	ands	r2, r3
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001764:	e007      	b.n	8001776 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	431a      	orrs	r2, r3
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001790:	e007      	b.n	80017a2 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	431a      	orrs	r2, r3
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	431a      	orrs	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017c0:	f023 0201 	bic.w	r2, r3, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e006      	b.n	80017dc <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
  }
}
 80017dc:	4618      	mov	r0, r3
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d12e      	bne.n	800185a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2202      	movs	r2, #2
 8001800:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff f964 	bl	8000ae0 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800181a:	e012      	b.n	8001842 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800181c:	f7ff f960 	bl	8000ae0 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b0a      	cmp	r3, #10
 8001828:	d90b      	bls.n	8001842 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2205      	movs	r2, #5
 800183a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e012      	b.n	8001868 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1e5      	bne.n	800181c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e006      	b.n	8001868 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001870:	b480      	push	{r7}
 8001872:	b089      	sub	sp, #36	; 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001884:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800188e:	7ffb      	ldrb	r3, [r7, #31]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d003      	beq.n	800189c <HAL_CAN_AddTxMessage+0x2c>
 8001894:	7ffb      	ldrb	r3, [r7, #31]
 8001896:	2b02      	cmp	r3, #2
 8001898:	f040 80b8 	bne.w	8001a0c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 80a0 	beq.w	80019fc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	0e1b      	lsrs	r3, r3, #24
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d907      	bls.n	80018dc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e09e      	b.n	8001a1a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80018dc:	2201      	movs	r2, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	409a      	lsls	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80018f8:	68f9      	ldr	r1, [r7, #12]
 80018fa:	6809      	ldr	r1, [r1, #0]
 80018fc:	431a      	orrs	r2, r3
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	3318      	adds	r3, #24
 8001902:	011b      	lsls	r3, r3, #4
 8001904:	440b      	add	r3, r1
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e00f      	b.n	800192a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001914:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800191a:	68f9      	ldr	r1, [r7, #12]
 800191c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800191e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	3318      	adds	r3, #24
 8001924:	011b      	lsls	r3, r3, #4
 8001926:	440b      	add	r3, r1
 8001928:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6819      	ldr	r1, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	691a      	ldr	r2, [r3, #16]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3318      	adds	r3, #24
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	440b      	add	r3, r1
 800193a:	3304      	adds	r3, #4
 800193c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	7d1b      	ldrb	r3, [r3, #20]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d111      	bne.n	800196a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3318      	adds	r3, #24
 800194e:	011b      	lsls	r3, r3, #4
 8001950:	4413      	add	r3, r2
 8001952:	3304      	adds	r3, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	6811      	ldr	r1, [r2, #0]
 800195a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3318      	adds	r3, #24
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	440b      	add	r3, r1
 8001966:	3304      	adds	r3, #4
 8001968:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3307      	adds	r3, #7
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	061a      	lsls	r2, r3, #24
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3306      	adds	r3, #6
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3305      	adds	r3, #5
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4313      	orrs	r3, r2
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	3204      	adds	r2, #4
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	4610      	mov	r0, r2
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	6811      	ldr	r1, [r2, #0]
 8001992:	ea43 0200 	orr.w	r2, r3, r0
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	440b      	add	r3, r1
 800199c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80019a0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3303      	adds	r3, #3
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	061a      	lsls	r2, r3, #24
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	3302      	adds	r3, #2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	041b      	lsls	r3, r3, #16
 80019b2:	431a      	orrs	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	4313      	orrs	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	7812      	ldrb	r2, [r2, #0]
 80019c2:	4610      	mov	r0, r2
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	6811      	ldr	r1, [r2, #0]
 80019c8:	ea43 0200 	orr.w	r2, r3, r0
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	440b      	add	r3, r1
 80019d2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80019d6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3318      	adds	r3, #24
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	6811      	ldr	r1, [r2, #0]
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3318      	adds	r3, #24
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	440b      	add	r3, r1
 80019f6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80019f8:	2300      	movs	r3, #0
 80019fa:	e00e      	b.n	8001a1a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e006      	b.n	8001a1a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
  }
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b085      	sub	sp, #20
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3c:	7afb      	ldrb	r3, [r7, #11]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d002      	beq.n	8001a48 <HAL_CAN_IsTxMessagePending+0x22>
 8001a42:	7afb      	ldrb	r3, [r7, #11]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d10b      	bne.n	8001a60 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	069b      	lsls	r3, r3, #26
 8001a52:	401a      	ands	r2, r3
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	069b      	lsls	r3, r3, #26
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b087      	sub	sp, #28
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a82:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <HAL_CAN_GetRxMessage+0x24>
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	f040 80f3 	bne.w	8001c78 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10e      	bne.n	8001ab6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d116      	bne.n	8001ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e7      	b.n	8001c86 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d107      	bne.n	8001ad4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d8      	b.n	8001c86 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	331b      	adds	r3, #27
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	4413      	add	r3, r2
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0204 	and.w	r2, r3, #4
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10c      	bne.n	8001b0c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	331b      	adds	r3, #27
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	0d5b      	lsrs	r3, r3, #21
 8001b02:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	331b      	adds	r3, #27
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4413      	add	r3, r2
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	08db      	lsrs	r3, r3, #3
 8001b1c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	331b      	adds	r3, #27
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4413      	add	r3, r2
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0202 	and.w	r2, r3, #2
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	331b      	adds	r3, #27
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 020f 	and.w	r2, r3, #15
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	331b      	adds	r3, #27
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3304      	adds	r3, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0a1b      	lsrs	r3, r3, #8
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	331b      	adds	r3, #27
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	4413      	add	r3, r2
 8001b76:	3304      	adds	r3, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0c1b      	lsrs	r3, r3, #16
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0a1a      	lsrs	r2, r3, #8
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0c1a      	lsrs	r2, r3, #16
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	b2d2      	uxtb	r2, r2
 8001bca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0e1a      	lsrs	r2, r3, #24
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3303      	adds	r3, #3
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	011b      	lsls	r3, r3, #4
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4413      	add	r3, r2
 8001c08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0a1a      	lsrs	r2, r3, #8
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	3305      	adds	r3, #5
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0c1a      	lsrs	r2, r3, #16
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	011b      	lsls	r3, r3, #4
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e1a      	lsrs	r2, r3, #24
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	3307      	adds	r3, #7
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d108      	bne.n	8001c64 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0220 	orr.w	r2, r2, #32
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	e007      	b.n	8001c74 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691a      	ldr	r2, [r3, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0220 	orr.w	r2, r2, #32
 8001c72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e006      	b.n	8001c86 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
  }
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d002      	beq.n	8001cb4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001cae:	7afb      	ldrb	r3, [r7, #11]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d106      	bne.n	8001cc8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e005      	b.n	8001cd4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d16:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	60d3      	str	r3, [r2, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	; (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db0b      	blt.n	8001d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	4907      	ldr	r1, [pc, #28]	; (8001d80 <__NVIC_EnableIRQ+0x38>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	db0a      	blt.n	8001dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	490c      	ldr	r1, [pc, #48]	; (8001dd0 <__NVIC_SetPriority+0x4c>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	0112      	lsls	r2, r2, #4
 8001da4:	b2d2      	uxtb	r2, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dac:	e00a      	b.n	8001dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4908      	ldr	r1, [pc, #32]	; (8001dd4 <__NVIC_SetPriority+0x50>)
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	3b04      	subs	r3, #4
 8001dbc:	0112      	lsls	r2, r2, #4
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	761a      	strb	r2, [r3, #24]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b089      	sub	sp, #36	; 0x24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	f1c3 0307 	rsb	r3, r3, #7
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	bf28      	it	cs
 8001df6:	2304      	movcs	r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2b06      	cmp	r3, #6
 8001e00:	d902      	bls.n	8001e08 <NVIC_EncodePriority+0x30>
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3b03      	subs	r3, #3
 8001e06:	e000      	b.n	8001e0a <NVIC_EncodePriority+0x32>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e20:	f04f 31ff 	mov.w	r1, #4294967295
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa01 f303 	lsl.w	r3, r1, r3
 8001e2a:	43d9      	mvns	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	4313      	orrs	r3, r2
         );
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3724      	adds	r7, #36	; 0x24
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e50:	d301      	bcc.n	8001e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00f      	b.n	8001e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <SysTick_Config+0x40>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e5e:	210f      	movs	r1, #15
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295
 8001e64:	f7ff ff8e 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SysTick_Config+0x40>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <SysTick_Config+0x40>)
 8001e70:	2207      	movs	r2, #7
 8001e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	e000e010 	.word	0xe000e010

08001e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7ff ff29 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b086      	sub	sp, #24
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eac:	f7ff ff3e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	68b9      	ldr	r1, [r7, #8]
 8001eb6:	6978      	ldr	r0, [r7, #20]
 8001eb8:	f7ff ff8e 	bl	8001dd8 <NVIC_EncodePriority>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	bf00      	nop
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	4603      	mov	r3, r0
 8001eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff31 	bl	8001d48 <__NVIC_EnableIRQ>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffa2 	bl	8001e40 <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e037      	b.n	8001f8c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f32:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f36:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f8b4 	bl	80020dc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}  
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2204      	movs	r2, #4
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d024      	beq.n	8002006 <HAL_DMA_IRQHandler+0x72>
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d01f      	beq.n	8002006 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0204 	bic.w	r2, r2, #4
 8001fe2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	2104      	movs	r1, #4
 8001fee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d06a      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002004:	e065      	b.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2202      	movs	r2, #2
 800200c:	409a      	lsls	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d02c      	beq.n	8002070 <HAL_DMA_IRQHandler+0xdc>
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d027      	beq.n	8002070 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10b      	bne.n	8002046 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 020a 	bic.w	r2, r2, #10
 800203c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2102      	movs	r1, #2
 8002050:	fa01 f202 	lsl.w	r2, r1, r2
 8002054:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	2b00      	cmp	r3, #0
 8002064:	d035      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800206e:	e030      	b.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002074:	2208      	movs	r2, #8
 8002076:	409a      	lsls	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d028      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d023      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 020e 	bic.w	r2, r2, #14
 8002098:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a2:	2101      	movs	r1, #1
 80020a4:	fa01 f202 	lsl.w	r2, r1, r2
 80020a8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	4798      	blx	r3
    }
  }
}  
 80020d0:	e7ff      	b.n	80020d2 <HAL_DMA_IRQHandler+0x13e>
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b09      	ldr	r3, [pc, #36]	; (8002110 <DMA_CalcBaseAndBitshift+0x34>)
 80020ec:	4413      	add	r3, r2
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <DMA_CalcBaseAndBitshift+0x38>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	091b      	lsrs	r3, r3, #4
 80020f6:	009a      	lsls	r2, r3, #2
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a06      	ldr	r2, [pc, #24]	; (8002118 <DMA_CalcBaseAndBitshift+0x3c>)
 8002100:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	bffdfff8 	.word	0xbffdfff8
 8002114:	cccccccd 	.word	0xcccccccd
 8002118:	40020000 	.word	0x40020000

0800211c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212a:	e14e      	b.n	80023ca <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	2101      	movs	r1, #1
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	4013      	ands	r3, r2
 800213a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 8140 	beq.w	80023c4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d00b      	beq.n	8002164 <HAL_GPIO_Init+0x48>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d007      	beq.n	8002164 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002158:	2b11      	cmp	r3, #17
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b12      	cmp	r3, #18
 8002162:	d130      	bne.n	80021c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68da      	ldr	r2, [r3, #12]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219a:	2201      	movs	r2, #1
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4013      	ands	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 0201 	and.w	r2, r3, #1
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4313      	orrs	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	2203      	movs	r2, #3
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43db      	mvns	r3, r3
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0xea>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b12      	cmp	r3, #18
 8002204:	d123      	bne.n	800224e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	08da      	lsrs	r2, r3, #3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3208      	adds	r2, #8
 800220e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	220f      	movs	r2, #15
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43db      	mvns	r3, r3
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4013      	ands	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f003 0307 	and.w	r3, r3, #7
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	6939      	ldr	r1, [r7, #16]
 800224a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	2203      	movs	r2, #3
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43db      	mvns	r3, r3
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0203 	and.w	r2, r3, #3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	f000 809a 	beq.w	80023c4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	4b55      	ldr	r3, [pc, #340]	; (80023e8 <HAL_GPIO_Init+0x2cc>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a54      	ldr	r2, [pc, #336]	; (80023e8 <HAL_GPIO_Init+0x2cc>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b52      	ldr	r3, [pc, #328]	; (80023e8 <HAL_GPIO_Init+0x2cc>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022a8:	4a50      	ldr	r2, [pc, #320]	; (80023ec <HAL_GPIO_Init+0x2d0>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	3302      	adds	r3, #2
 80022b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 0303 	and.w	r3, r3, #3
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022d2:	d013      	beq.n	80022fc <HAL_GPIO_Init+0x1e0>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_GPIO_Init+0x2d4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d00d      	beq.n	80022f8 <HAL_GPIO_Init+0x1dc>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <HAL_GPIO_Init+0x2d8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d007      	beq.n	80022f4 <HAL_GPIO_Init+0x1d8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a44      	ldr	r2, [pc, #272]	; (80023f8 <HAL_GPIO_Init+0x2dc>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_GPIO_Init+0x1d4>
 80022ec:	2303      	movs	r3, #3
 80022ee:	e006      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022f0:	2305      	movs	r3, #5
 80022f2:	e004      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022f4:	2302      	movs	r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e000      	b.n	80022fe <HAL_GPIO_Init+0x1e2>
 80022fc:	2300      	movs	r3, #0
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	f002 0203 	and.w	r2, r2, #3
 8002304:	0092      	lsls	r2, r2, #2
 8002306:	4093      	lsls	r3, r2
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800230e:	4937      	ldr	r1, [pc, #220]	; (80023ec <HAL_GPIO_Init+0x2d0>)
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	089b      	lsrs	r3, r3, #2
 8002314:	3302      	adds	r3, #2
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800231c:	4b37      	ldr	r3, [pc, #220]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43db      	mvns	r3, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4013      	ands	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800236a:	4a24      	ldr	r2, [pc, #144]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002370:	4b22      	ldr	r3, [pc, #136]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	43db      	mvns	r3, r3
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002394:	4a19      	ldr	r2, [pc, #100]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800239a:	4b18      	ldr	r3, [pc, #96]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023be:	4a0f      	ldr	r2, [pc, #60]	; (80023fc <HAL_GPIO_Init+0x2e0>)
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	fa22 f303 	lsr.w	r3, r2, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f47f aea9 	bne.w	800212c <HAL_GPIO_Init+0x10>
  }
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	371c      	adds	r7, #28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	48000400 	.word	0x48000400
 80023f4:	48000800 	.word	0x48000800
 80023f8:	48000c00 	.word	0x48000c00
 80023fc:	40010400 	.word	0x40010400

08002400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	807b      	strh	r3, [r7, #2]
 800240c:	4613      	mov	r3, r2
 800240e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002416:	887a      	ldrh	r2, [r7, #2]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241c:	e002      	b.n	8002424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002436:	af00      	add	r7, sp, #0
 8002438:	1d3b      	adds	r3, r7, #4
 800243a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	f000 bef4 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 816a 	beq.w	800272e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800245a:	4bb3      	ldr	r3, [pc, #716]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00c      	beq.n	8002480 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002466:	4bb0      	ldr	r3, [pc, #704]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b08      	cmp	r3, #8
 8002470:	d159      	bne.n	8002526 <HAL_RCC_OscConfig+0xf6>
 8002472:	4bad      	ldr	r3, [pc, #692]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247e:	d152      	bne.n	8002526 <HAL_RCC_OscConfig+0xf6>
 8002480:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002484:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002494:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d102      	bne.n	80024b2 <HAL_RCC_OscConfig+0x82>
 80024ac:	4b9e      	ldr	r3, [pc, #632]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0xae>
 80024b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80024be:	fa93 f3a3 	rbit	r3, r3
 80024c2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80024c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80024ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80024da:	4b93      	ldr	r3, [pc, #588]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80024e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80024ea:	fa92 f2a2 	rbit	r2, r2
 80024ee:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80024f2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80024f6:	fab2 f282 	clz	r2, r2
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	f042 0220 	orr.w	r2, r2, #32
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	f002 021f 	and.w	r2, r2, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f202 	lsl.w	r2, r1, r2
 800250c:	4013      	ands	r3, r2
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 810c 	beq.w	800272c <HAL_RCC_OscConfig+0x2fc>
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f040 8106 	bne.w	800272c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f000 be86 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002530:	d106      	bne.n	8002540 <HAL_RCC_OscConfig+0x110>
 8002532:	4b7d      	ldr	r3, [pc, #500]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7c      	ldr	r2, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e030      	b.n	80025a2 <HAL_RCC_OscConfig+0x172>
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0x134>
 800254a:	4b77      	ldr	r3, [pc, #476]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a76      	ldr	r2, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b74      	ldr	r3, [pc, #464]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a73      	ldr	r2, [pc, #460]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800255c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e01e      	b.n	80025a2 <HAL_RCC_OscConfig+0x172>
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x15a>
 8002570:	4b6d      	ldr	r3, [pc, #436]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6c      	ldr	r2, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257a:	6013      	str	r3, [r2, #0]
 800257c:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a69      	ldr	r2, [pc, #420]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x172>
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a66      	ldr	r2, [pc, #408]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b64      	ldr	r3, [pc, #400]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a63      	ldr	r2, [pc, #396]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800259c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	f023 020f 	bic.w	r2, r3, #15
 80025aa:	1d3b      	adds	r3, r7, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	495d      	ldr	r1, [pc, #372]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b6:	1d3b      	adds	r3, r7, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d059      	beq.n	8002674 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c0:	f7fe fa8e 	bl	8000ae0 <HAL_GetTick>
 80025c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c8:	e00a      	b.n	80025e0 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ca:	f7fe fa89 	bl	8000ae0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d902      	bls.n	80025e0 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	f000 be29 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>
 80025e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025e4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80025ec:	fa93 f3a3 	rbit	r3, r3
 80025f0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80025f4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	b2db      	uxtb	r3, r3
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d102      	bne.n	8002612 <HAL_RCC_OscConfig+0x1e2>
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	e015      	b.n	800263e <HAL_RCC_OscConfig+0x20e>
 8002612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002616:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800262a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800262e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002632:	fa93 f3a3 	rbit	r3, r3
 8002636:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800263a:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002642:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002646:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800264a:	fa92 f2a2 	rbit	r2, r2
 800264e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002652:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002656:	fab2 f282 	clz	r2, r2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	f042 0220 	orr.w	r2, r2, #32
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	f002 021f 	and.w	r2, r2, #31
 8002666:	2101      	movs	r1, #1
 8002668:	fa01 f202 	lsl.w	r2, r1, r2
 800266c:	4013      	ands	r3, r2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0ab      	beq.n	80025ca <HAL_RCC_OscConfig+0x19a>
 8002672:	e05c      	b.n	800272e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fe fa34 	bl	8000ae0 <HAL_GetTick>
 8002678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267c:	e00a      	b.n	8002694 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267e:	f7fe fa2f 	bl	8000ae0 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d902      	bls.n	8002694 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	f000 bdcf 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>
 8002694:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002698:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80026a8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ac:	fab3 f383 	clz	r3, r3
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d102      	bne.n	80026c6 <HAL_RCC_OscConfig+0x296>
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	e015      	b.n	80026f2 <HAL_RCC_OscConfig+0x2c2>
 80026c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80026da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80026e2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <HAL_RCC_OscConfig+0x2f8>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80026fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002706:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ab      	bne.n	800267e <HAL_RCC_OscConfig+0x24e>
 8002726:	e002      	b.n	800272e <HAL_RCC_OscConfig+0x2fe>
 8002728:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 816f 	beq.w	8002a1c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800273e:	4bd0      	ldr	r3, [pc, #832]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00b      	beq.n	8002762 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800274a:	4bcd      	ldr	r3, [pc, #820]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 030c 	and.w	r3, r3, #12
 8002752:	2b08      	cmp	r3, #8
 8002754:	d16c      	bne.n	8002830 <HAL_RCC_OscConfig+0x400>
 8002756:	4bca      	ldr	r3, [pc, #808]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d166      	bne.n	8002830 <HAL_RCC_OscConfig+0x400>
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002774:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002778:	fab3 f383 	clz	r3, r3
 800277c:	b2db      	uxtb	r3, r3
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	b2db      	uxtb	r3, r3
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d102      	bne.n	8002792 <HAL_RCC_OscConfig+0x362>
 800278c:	4bbc      	ldr	r3, [pc, #752]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	e013      	b.n	80027ba <HAL_RCC_OscConfig+0x38a>
 8002792:	2302      	movs	r3, #2
 8002794:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002798:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80027a4:	2302      	movs	r3, #2
 80027a6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80027aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80027b6:	4bb2      	ldr	r3, [pc, #712]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 80027b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ba:	2202      	movs	r2, #2
 80027bc:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80027c0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80027c4:	fa92 f2a2 	rbit	r2, r2
 80027c8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80027cc:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80027d0:	fab2 f282 	clz	r2, r2
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	f042 0220 	orr.w	r2, r2, #32
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	f002 021f 	and.w	r2, r2, #31
 80027e0:	2101      	movs	r1, #1
 80027e2:	fa01 f202 	lsl.w	r2, r1, r2
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_RCC_OscConfig+0x3cc>
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	f000 bd1b 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fc:	4ba0      	ldr	r3, [pc, #640]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	21f8      	movs	r1, #248	; 0xf8
 800280c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002814:	fa91 f1a1 	rbit	r1, r1
 8002818:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800281c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002820:	fab1 f181 	clz	r1, r1
 8002824:	b2c9      	uxtb	r1, r1
 8002826:	408b      	lsls	r3, r1
 8002828:	4995      	ldr	r1, [pc, #596]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	e0f5      	b.n	8002a1c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8085 	beq.w	8002946 <HAL_RCC_OscConfig+0x516>
 800283c:	2301      	movs	r3, #1
 800283e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002846:	fa93 f3a3 	rbit	r3, r3
 800284a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800284e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800285c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	461a      	mov	r2, r3
 8002864:	2301      	movs	r3, #1
 8002866:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002868:	f7fe f93a 	bl	8000ae0 <HAL_GetTick>
 800286c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002870:	e00a      	b.n	8002888 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002872:	f7fe f935 	bl	8000ae0 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	f000 bcd5 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>
 8002888:	2302      	movs	r3, #2
 800288a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800289a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289e:	fab3 f383 	clz	r3, r3
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	095b      	lsrs	r3, r3, #5
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_OscConfig+0x488>
 80028b2:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	e013      	b.n	80028e0 <HAL_RCC_OscConfig+0x4b0>
 80028b8:	2302      	movs	r3, #2
 80028ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80028c2:	fa93 f3a3 	rbit	r3, r3
 80028c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80028d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	2202      	movs	r2, #2
 80028e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80028e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80028ea:	fa92 f2a2 	rbit	r2, r2
 80028ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80028f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80028f6:	fab2 f282 	clz	r2, r2
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f042 0220 	orr.w	r2, r2, #32
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	f002 021f 	and.w	r2, r2, #31
 8002906:	2101      	movs	r1, #1
 8002908:	fa01 f202 	lsl.w	r2, r1, r2
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d0af      	beq.n	8002872 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b5b      	ldr	r3, [pc, #364]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	21f8      	movs	r1, #248	; 0xf8
 8002922:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800292a:	fa91 f1a1 	rbit	r1, r1
 800292e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002932:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002936:	fab1 f181 	clz	r1, r1
 800293a:	b2c9      	uxtb	r1, r1
 800293c:	408b      	lsls	r3, r1
 800293e:	4950      	ldr	r1, [pc, #320]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
 8002944:	e06a      	b.n	8002a1c <HAL_RCC_OscConfig+0x5ec>
 8002946:	2301      	movs	r3, #1
 8002948:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002958:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002966:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	2300      	movs	r3, #0
 8002970:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7fe f8b5 	bl	8000ae0 <HAL_GetTick>
 8002976:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	e00a      	b.n	8002992 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7fe f8b0 	bl	8000ae0 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d902      	bls.n	8002992 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	f000 bc50 	b.w	8003232 <HAL_RCC_OscConfig+0xe02>
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800299c:	fa93 f3a3 	rbit	r3, r3
 80029a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80029a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d102      	bne.n	80029c2 <HAL_RCC_OscConfig+0x592>
 80029bc:	4b30      	ldr	r3, [pc, #192]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	e013      	b.n	80029ea <HAL_RCC_OscConfig+0x5ba>
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80029d4:	2302      	movs	r3, #2
 80029d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80029da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80029de:	fa93 f3a3 	rbit	r3, r3
 80029e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <HAL_RCC_OscConfig+0x650>)
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	2202      	movs	r2, #2
 80029ec:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80029f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80029f4:	fa92 f2a2 	rbit	r2, r2
 80029f8:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80029fc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002a00:	fab2 f282 	clz	r2, r2
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	f042 0220 	orr.w	r2, r2, #32
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	f002 021f 	and.w	r2, r2, #31
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1af      	bne.n	800297c <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 80da 	beq.w	8002be0 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d069      	beq.n	8002b0a <HAL_RCC_OscConfig+0x6da>
 8002a36:	2301      	movs	r3, #1
 8002a38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002a40:	fa93 f3a3 	rbit	r3, r3
 8002a44:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002a48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4c:	fab3 f383 	clz	r3, r3
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_OscConfig+0x654>)
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a60:	f7fe f83e 	bl	8000ae0 <HAL_GetTick>
 8002a64:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a68:	e00e      	b.n	8002a88 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6a:	f7fe f839 	bl	8000ae0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d906      	bls.n	8002a88 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e3d9      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	10908120 	.word	0x10908120
 8002a88:	2302      	movs	r3, #2
 8002a8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a92:	fa93 f3a3 	rbit	r3, r3
 8002a96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a9a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	fa93 f2a3 	rbit	r2, r3
 8002aac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	fa93 f2a3 	rbit	r2, r3
 8002ac4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002ac8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aca:	4ba5      	ldr	r3, [pc, #660]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	fa93 f1a3 	rbit	r1, r3
 8002ae0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002ae4:	6019      	str	r1, [r3, #0]
  return result;
 8002ae6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	fab3 f383 	clz	r3, r3
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0b0      	beq.n	8002a6a <HAL_RCC_OscConfig+0x63a>
 8002b08:	e06a      	b.n	8002be0 <HAL_RCC_OscConfig+0x7b0>
 8002b0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b20:	601a      	str	r2, [r3, #0]
  return result;
 8002b22:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b26:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b8c      	ldr	r3, [pc, #560]	; (8002d64 <HAL_RCC_OscConfig+0x934>)
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	461a      	mov	r2, r3
 8002b38:	2300      	movs	r3, #0
 8002b3a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fd ffd0 	bl	8000ae0 <HAL_GetTick>
 8002b40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b44:	e009      	b.n	8002b5a <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fd ffcb 	bl	8000ae0 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e36b      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8002b5a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b5e:	2202      	movs	r2, #2
 8002b60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b76:	2202      	movs	r2, #2
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	fa93 f2a3 	rbit	r2, r3
 8002b84:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b8e:	2202      	movs	r2, #2
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	fa93 f2a3 	rbit	r2, r3
 8002b9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ba0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba2:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002baa:	2102      	movs	r1, #2
 8002bac:	6019      	str	r1, [r3, #0]
 8002bae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	fa93 f1a3 	rbit	r1, r3
 8002bb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bbc:	6019      	str	r1, [r3, #0]
  return result;
 8002bbe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1b2      	bne.n	8002b46 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 8158 	beq.w	8002ea0 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b5a      	ldr	r3, [pc, #360]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d112      	bne.n	8002c28 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a56      	ldr	r2, [pc, #344]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	61d3      	str	r3, [r2, #28]
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002c16:	f107 0308 	add.w	r3, r7, #8
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f107 0308 	add.w	r3, r7, #8
 8002c20:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b4f      	ldr	r3, [pc, #316]	; (8002d68 <HAL_RCC_OscConfig+0x938>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d11a      	bne.n	8002c6a <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c34:	4b4c      	ldr	r3, [pc, #304]	; (8002d68 <HAL_RCC_OscConfig+0x938>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a4b      	ldr	r2, [pc, #300]	; (8002d68 <HAL_RCC_OscConfig+0x938>)
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c3e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c40:	f7fd ff4e 	bl	8000ae0 <HAL_GetTick>
 8002c44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c48:	e009      	b.n	8002c5e <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c4a:	f7fd ff49 	bl	8000ae0 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e2e9      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_OscConfig+0x938>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0ef      	beq.n	8002c4a <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d106      	bne.n	8002c82 <HAL_RCC_OscConfig+0x852>
 8002c74:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4a39      	ldr	r2, [pc, #228]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6213      	str	r3, [r2, #32]
 8002c80:	e02f      	b.n	8002ce2 <HAL_RCC_OscConfig+0x8b2>
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10c      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x876>
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c8e:	6a1b      	ldr	r3, [r3, #32]
 8002c90:	4a33      	ldr	r2, [pc, #204]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6213      	str	r3, [r2, #32]
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	4a30      	ldr	r2, [pc, #192]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6213      	str	r3, [r2, #32]
 8002ca4:	e01d      	b.n	8002ce2 <HAL_RCC_OscConfig+0x8b2>
 8002ca6:	1d3b      	adds	r3, r7, #4
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d10c      	bne.n	8002cca <HAL_RCC_OscConfig+0x89a>
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	4a2a      	ldr	r2, [pc, #168]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cb6:	f043 0304 	orr.w	r3, r3, #4
 8002cba:	6213      	str	r3, [r2, #32]
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cbe:	6a1b      	ldr	r3, [r3, #32]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6213      	str	r3, [r2, #32]
 8002cc8:	e00b      	b.n	8002ce2 <HAL_RCC_OscConfig+0x8b2>
 8002cca:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	6213      	str	r3, [r2, #32]
 8002cd6:	4b22      	ldr	r3, [pc, #136]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	4a21      	ldr	r2, [pc, #132]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002cdc:	f023 0304 	bic.w	r3, r3, #4
 8002ce0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d06b      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cec:	f7fd fef8 	bl	8000ae0 <HAL_GetTick>
 8002cf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf4:	e00b      	b.n	8002d0e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf6:	f7fd fef3 	bl	8000ae0 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e291      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8002d0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	fa93 f2a3 	rbit	r2, r3
 8002d20:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	fa93 f2a3 	rbit	r2, r3
 8002d38:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d3c:	601a      	str	r2, [r3, #0]
  return result;
 8002d3e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002d42:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	f043 0302 	orr.w	r3, r3, #2
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d109      	bne.n	8002d6c <HAL_RCC_OscConfig+0x93c>
 8002d58:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <HAL_RCC_OscConfig+0x930>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	e014      	b.n	8002d88 <HAL_RCC_OscConfig+0x958>
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	10908120 	.word	0x10908120
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d70:	2202      	movs	r2, #2
 8002d72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	fa93 f2a3 	rbit	r2, r3
 8002d7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4bbb      	ldr	r3, [pc, #748]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d8c:	2102      	movs	r1, #2
 8002d8e:	6011      	str	r1, [r2, #0]
 8002d90:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	fa92 f1a2 	rbit	r1, r2
 8002d9a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002d9e:	6011      	str	r1, [r2, #0]
  return result;
 8002da0:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	fab2 f282 	clz	r2, r2
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002db0:	b2d2      	uxtb	r2, r2
 8002db2:	f002 021f 	and.w	r2, r2, #31
 8002db6:	2101      	movs	r1, #1
 8002db8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d099      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x8c6>
 8002dc2:	e063      	b.n	8002e8c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc4:	f7fd fe8c 	bl	8000ae0 <HAL_GetTick>
 8002dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00b      	b.n	8002de6 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fd fe87 	bl	8000ae0 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e225      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8002de6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002dea:	2202      	movs	r2, #2
 8002dec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	fa93 f2a3 	rbit	r2, r3
 8002df8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e02:	2202      	movs	r2, #2
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	fa93 f2a3 	rbit	r2, r3
 8002e10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e14:	601a      	str	r2, [r3, #0]
  return result;
 8002e16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002e1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e1c:	fab3 f383 	clz	r3, r3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_OscConfig+0xa06>
 8002e30:	4b90      	ldr	r3, [pc, #576]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	e00d      	b.n	8002e52 <HAL_RCC_OscConfig+0xa22>
 8002e36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	fa93 f2a3 	rbit	r2, r3
 8002e48:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	4b89      	ldr	r3, [pc, #548]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e56:	2102      	movs	r1, #2
 8002e58:	6011      	str	r1, [r2, #0]
 8002e5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	fa92 f1a2 	rbit	r1, r2
 8002e64:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e68:	6011      	str	r1, [r2, #0]
  return result;
 8002e6a:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	fab2 f282 	clz	r2, r2
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f002 021f 	and.w	r2, r2, #31
 8002e80:	2101      	movs	r1, #1
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d1a0      	bne.n	8002dce <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e8c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b77      	ldr	r3, [pc, #476]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4a76      	ldr	r2, [pc, #472]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 81c2 	beq.w	8003230 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002eac:	4b71      	ldr	r3, [pc, #452]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	f000 819c 	beq.w	80031f2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	f040 8114 	bne.w	80030ee <HAL_RCC_OscConfig+0xcbe>
 8002ec6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002eca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	fa93 f2a3 	rbit	r2, r3
 8002eda:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ede:	601a      	str	r2, [r3, #0]
  return result;
 8002ee0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002ee4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fd fdf0 	bl	8000ae0 <HAL_GetTick>
 8002f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f04:	e009      	b.n	8002f1a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f06:	f7fd fdeb 	bl	8000ae0 <HAL_GetTick>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e18b      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8002f1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	fa93 f2a3 	rbit	r2, r3
 8002f2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f32:	601a      	str	r2, [r3, #0]
  return result;
 8002f34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002f38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f3a:	fab3 f383 	clz	r3, r3
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	095b      	lsrs	r3, r3, #5
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d102      	bne.n	8002f54 <HAL_RCC_OscConfig+0xb24>
 8002f4e:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	e01b      	b.n	8002f8c <HAL_RCC_OscConfig+0xb5c>
 8002f54:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	fa93 f2a3 	rbit	r2, r3
 8002f82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f94:	6011      	str	r1, [r2, #0]
 8002f96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002f9a:	6812      	ldr	r2, [r2, #0]
 8002f9c:	fa92 f1a2 	rbit	r1, r2
 8002fa0:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002fa4:	6011      	str	r1, [r2, #0]
  return result;
 8002fa6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	fab2 f282 	clz	r2, r2
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	f042 0220 	orr.w	r2, r2, #32
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	f002 021f 	and.w	r2, r2, #31
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d19e      	bne.n	8002f06 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	4925      	ldr	r1, [pc, #148]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	fa93 f2a3 	rbit	r2, r3
 8002ff8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ffc:	601a      	str	r2, [r3, #0]
  return result;
 8002ffe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003002:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	fab3 f383 	clz	r3, r3
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800300e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	461a      	mov	r2, r3
 8003016:	2301      	movs	r3, #1
 8003018:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301a:	f7fd fd61 	bl	8000ae0 <HAL_GetTick>
 800301e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003022:	e009      	b.n	8003038 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003024:	f7fd fd5c 	bl	8000ae0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e0fc      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8003038:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800303c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	fa93 f2a3 	rbit	r2, r3
 800304c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003050:	601a      	str	r2, [r3, #0]
  return result;
 8003052:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003056:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003058:	fab3 f383 	clz	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	b2db      	uxtb	r3, r3
 8003062:	f043 0301 	orr.w	r3, r3, #1
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0xc48>
 800306c:	4b01      	ldr	r3, [pc, #4]	; (8003074 <HAL_RCC_OscConfig+0xc44>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	e01e      	b.n	80030b0 <HAL_RCC_OscConfig+0xc80>
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000
 8003078:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800307c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003080:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	fa93 f2a3 	rbit	r2, r3
 800308c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003096:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	fa93 f2a3 	rbit	r2, r3
 80030a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030aa:	601a      	str	r2, [r3, #0]
 80030ac:	4b63      	ldr	r3, [pc, #396]	; (800323c <HAL_RCC_OscConfig+0xe0c>)
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030b4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	fa92 f1a2 	rbit	r1, r2
 80030c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030c8:	6011      	str	r1, [r2, #0]
  return result;
 80030ca:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	fab2 f282 	clz	r2, r2
 80030d4:	b2d2      	uxtb	r2, r2
 80030d6:	f042 0220 	orr.w	r2, r2, #32
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	f002 021f 	and.w	r2, r2, #31
 80030e0:	2101      	movs	r1, #1
 80030e2:	fa01 f202 	lsl.w	r2, r1, r2
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d09b      	beq.n	8003024 <HAL_RCC_OscConfig+0xbf4>
 80030ec:	e0a0      	b.n	8003230 <HAL_RCC_OscConfig+0xe00>
 80030ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	fa93 f2a3 	rbit	r2, r3
 8003102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003106:	601a      	str	r2, [r3, #0]
  return result;
 8003108:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800310c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003118:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	461a      	mov	r2, r3
 8003120:	2300      	movs	r3, #0
 8003122:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003124:	f7fd fcdc 	bl	8000ae0 <HAL_GetTick>
 8003128:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800312c:	e009      	b.n	8003142 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800312e:	f7fd fcd7 	bl	8000ae0 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e077      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
 8003142:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003146:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800314a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	fa93 f2a3 	rbit	r2, r3
 8003156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800315a:	601a      	str	r2, [r3, #0]
  return result;
 800315c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003160:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_RCC_OscConfig+0xd4c>
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCC_OscConfig+0xe0c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e01b      	b.n	80031b4 <HAL_RCC_OscConfig+0xd84>
 800317c:	f107 0320 	add.w	r3, r7, #32
 8003180:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	fa93 f2a3 	rbit	r2, r3
 8003190:	f107 031c 	add.w	r3, r7, #28
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	f107 0318 	add.w	r3, r7, #24
 800319a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f107 0318 	add.w	r3, r7, #24
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	4b22      	ldr	r3, [pc, #136]	; (800323c <HAL_RCC_OscConfig+0xe0c>)
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f107 0210 	add.w	r2, r7, #16
 80031b8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80031bc:	6011      	str	r1, [r2, #0]
 80031be:	f107 0210 	add.w	r2, r7, #16
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	fa92 f1a2 	rbit	r1, r2
 80031c8:	f107 020c 	add.w	r2, r7, #12
 80031cc:	6011      	str	r1, [r2, #0]
  return result;
 80031ce:	f107 020c 	add.w	r2, r7, #12
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	fab2 f282 	clz	r2, r2
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	f042 0220 	orr.w	r2, r2, #32
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	f002 021f 	and.w	r2, r2, #31
 80031e4:	2101      	movs	r1, #1
 80031e6:	fa01 f202 	lsl.w	r2, r1, r2
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d19e      	bne.n	800312e <HAL_RCC_OscConfig+0xcfe>
 80031f0:	e01e      	b.n	8003230 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d101      	bne.n	8003200 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e018      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003200:	4b0e      	ldr	r3, [pc, #56]	; (800323c <HAL_RCC_OscConfig+0xe0c>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003208:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800320c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	429a      	cmp	r2, r3
 8003218:	d108      	bne.n	800322c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800321a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800321e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003222:	1d3b      	adds	r3, r7, #4
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003228:	429a      	cmp	r2, r3
 800322a:	d001      	beq.n	8003230 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000

08003240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b09e      	sub	sp, #120	; 0x78
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e162      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003258:	4b90      	ldr	r3, [pc, #576]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d910      	bls.n	8003288 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b8d      	ldr	r3, [pc, #564]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 0207 	bic.w	r2, r3, #7
 800326e:	498b      	ldr	r1, [pc, #556]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b89      	ldr	r3, [pc, #548]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0307 	and.w	r3, r3, #7
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e14a      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b82      	ldr	r3, [pc, #520]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	497f      	ldr	r1, [pc, #508]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80dc 	beq.w	800346c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d13c      	bne.n	8003336 <HAL_RCC_ClockConfig+0xf6>
 80032bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032c4:	fa93 f3a3 	rbit	r3, r3
 80032c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80032ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032cc:	fab3 f383 	clz	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	095b      	lsrs	r3, r3, #5
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xa6>
 80032e0:	4b6f      	ldr	r3, [pc, #444]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	e00f      	b.n	8003306 <HAL_RCC_ClockConfig+0xc6>
 80032e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032ee:	fa93 f3a3 	rbit	r3, r3
 80032f2:	667b      	str	r3, [r7, #100]	; 0x64
 80032f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f8:	663b      	str	r3, [r7, #96]	; 0x60
 80032fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032fc:	fa93 f3a3 	rbit	r3, r3
 8003300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003302:	4b67      	ldr	r3, [pc, #412]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800330a:	65ba      	str	r2, [r7, #88]	; 0x58
 800330c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800330e:	fa92 f2a2 	rbit	r2, r2
 8003312:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003316:	fab2 f282 	clz	r2, r2
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f042 0220 	orr.w	r2, r2, #32
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f002 021f 	and.w	r2, r2, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d17b      	bne.n	800342a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0f3      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d13c      	bne.n	80033b8 <HAL_RCC_ClockConfig+0x178>
 800333e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003342:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	fab3 f383 	clz	r3, r3
 8003352:	b2db      	uxtb	r3, r3
 8003354:	095b      	lsrs	r3, r3, #5
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f043 0301 	orr.w	r3, r3, #1
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_RCC_ClockConfig+0x128>
 8003362:	4b4f      	ldr	r3, [pc, #316]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	e00f      	b.n	8003388 <HAL_RCC_ClockConfig+0x148>
 8003368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800336c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	fa93 f3a3 	rbit	r3, r3
 8003374:	647b      	str	r3, [r7, #68]	; 0x44
 8003376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337a:	643b      	str	r3, [r7, #64]	; 0x40
 800337c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003384:	4b46      	ldr	r3, [pc, #280]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800338c:	63ba      	str	r2, [r7, #56]	; 0x38
 800338e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003390:	fa92 f2a2 	rbit	r2, r2
 8003394:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	f042 0220 	orr.w	r2, r2, #32
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	f002 021f 	and.w	r2, r2, #31
 80033a8:	2101      	movs	r1, #1
 80033aa:	fa01 f202 	lsl.w	r2, r1, r2
 80033ae:	4013      	ands	r3, r2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d13a      	bne.n	800342a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b2      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
 80033b8:	2302      	movs	r3, #2
 80033ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c6:	fab3 f383 	clz	r3, r3
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	095b      	lsrs	r3, r3, #5
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d102      	bne.n	80033e0 <HAL_RCC_ClockConfig+0x1a0>
 80033da:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	e00d      	b.n	80033fc <HAL_RCC_ClockConfig+0x1bc>
 80033e0:	2302      	movs	r3, #2
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	2302      	movs	r3, #2
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	fa93 f3a3 	rbit	r3, r3
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	2202      	movs	r2, #2
 80033fe:	61ba      	str	r2, [r7, #24]
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	617a      	str	r2, [r7, #20]
  return result;
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	fab2 f282 	clz	r2, r2
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f042 0220 	orr.w	r2, r2, #32
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	f002 021f 	and.w	r2, r2, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e079      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342a:	4b1d      	ldr	r3, [pc, #116]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f023 0203 	bic.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	491a      	ldr	r1, [pc, #104]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800343c:	f7fd fb50 	bl	8000ae0 <HAL_GetTick>
 8003440:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fd fb4c 	bl	8000ae0 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e061      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <HAL_RCC_ClockConfig+0x260>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f003 020c 	and.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	429a      	cmp	r2, r3
 800346a:	d1eb      	bne.n	8003444 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d214      	bcs.n	80034a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 0207 	bic.w	r2, r3, #7
 8003482:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	4313      	orrs	r3, r2
 8003488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_RCC_ClockConfig+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e040      	b.n	800351e <HAL_RCC_ClockConfig+0x2de>
 800349c:	40022000 	.word	0x40022000
 80034a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_RCC_ClockConfig+0x2e8>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	491a      	ldr	r1, [pc, #104]	; (8003528 <HAL_RCC_ClockConfig+0x2e8>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0308 	and.w	r3, r3, #8
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d009      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <HAL_RCC_ClockConfig+0x2e8>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4912      	ldr	r1, [pc, #72]	; (8003528 <HAL_RCC_ClockConfig+0x2e8>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80034e2:	f000 f829 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034e6:	4601      	mov	r1, r0
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_RCC_ClockConfig+0x2e8>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f0:	22f0      	movs	r2, #240	; 0xf0
 80034f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	fa92 f2a2 	rbit	r2, r2
 80034fa:	60fa      	str	r2, [r7, #12]
  return result;
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	fab2 f282 	clz	r2, r2
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	40d3      	lsrs	r3, r2
 8003506:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x2ec>)
 8003508:	5cd3      	ldrb	r3, [r2, r3]
 800350a:	fa21 f303 	lsr.w	r3, r1, r3
 800350e:	4a08      	ldr	r2, [pc, #32]	; (8003530 <HAL_RCC_ClockConfig+0x2f0>)
 8003510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <HAL_RCC_ClockConfig+0x2f4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fd fa9e 	bl	8000a58 <HAL_InitTick>
  
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3778      	adds	r7, #120	; 0x78
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	40021000 	.word	0x40021000
 800352c:	080040d0 	.word	0x080040d0
 8003530:	20000004 	.word	0x20000004
 8003534:	20000008 	.word	0x20000008

08003538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	b08b      	sub	sp, #44	; 0x2c
 800353c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
 8003542:	2300      	movs	r3, #0
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	2300      	movs	r3, #0
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
 800354a:	2300      	movs	r3, #0
 800354c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d002      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x30>
 8003562:	2b08      	cmp	r3, #8
 8003564:	d003      	beq.n	800356e <HAL_RCC_GetSysClockFreq+0x36>
 8003566:	e03c      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003568:	4b24      	ldr	r3, [pc, #144]	; (80035fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800356a:	623b      	str	r3, [r7, #32]
      break;
 800356c:	e03c      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003574:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003578:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	fa92 f2a2 	rbit	r2, r2
 8003580:	607a      	str	r2, [r7, #4]
  return result;
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	fab2 f282 	clz	r2, r2
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	40d3      	lsrs	r3, r2
 800358c:	4a1c      	ldr	r2, [pc, #112]	; (8003600 <HAL_RCC_GetSysClockFreq+0xc8>)
 800358e:	5cd3      	ldrb	r3, [r2, r3]
 8003590:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	220f      	movs	r2, #15
 800359c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	fa92 f2a2 	rbit	r2, r2
 80035a4:	60fa      	str	r2, [r7, #12]
  return result;
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	fab2 f282 	clz	r2, r2
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	40d3      	lsrs	r3, r2
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035b2:	5cd3      	ldrb	r3, [r2, r3]
 80035b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80035c0:	4a0e      	ldr	r2, [pc, #56]	; (80035fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	fb02 f303 	mul.w	r3, r2, r3
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	e004      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a0c      	ldr	r2, [pc, #48]	; (8003608 <HAL_RCC_GetSysClockFreq+0xd0>)
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	623b      	str	r3, [r7, #32]
      break;
 80035e0:	e002      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_RCC_GetSysClockFreq+0xd4>)
 80035e4:	623b      	str	r3, [r7, #32]
      break;
 80035e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035e8:	6a3b      	ldr	r3, [r7, #32]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	372c      	adds	r7, #44	; 0x2c
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40021000 	.word	0x40021000
 80035fc:	00f42400 	.word	0x00f42400
 8003600:	080040e0 	.word	0x080040e0
 8003604:	080040f0 	.word	0x080040f0
 8003608:	003d0900 	.word	0x003d0900
 800360c:	007a1200 	.word	0x007a1200

08003610 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b092      	sub	sp, #72	; 0x48
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362e:	2b00      	cmp	r3, #0
 8003630:	f000 80cd 	beq.w	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003634:	4b86      	ldr	r3, [pc, #536]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10e      	bne.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003640:	4b83      	ldr	r3, [pc, #524]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	4a82      	ldr	r2, [pc, #520]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800364a:	61d3      	str	r3, [r2, #28]
 800364c:	4b80      	ldr	r3, [pc, #512]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d118      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a79      	ldr	r2, [pc, #484]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003674:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003676:	f7fd fa33 	bl	8000ae0 <HAL_GetTick>
 800367a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	e008      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800367e:	f7fd fa2f 	bl	8000ae0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	2b64      	cmp	r3, #100	; 0x64
 800368a:	d901      	bls.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0db      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f0      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800369c:	4b6c      	ldr	r3, [pc, #432]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d07d      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d076      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ba:	4b65      	ldr	r3, [pc, #404]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	fa93 f3a3 	rbit	r3, r3
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80036d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	4b5e      	ldr	r3, [pc, #376]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	461a      	mov	r2, r3
 80036e4:	2301      	movs	r3, #1
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	fa93 f3a3 	rbit	r3, r3
 80036f4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036f8:	fab3 f383 	clz	r3, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	4b55      	ldr	r3, [pc, #340]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	461a      	mov	r2, r3
 8003708:	2300      	movs	r3, #0
 800370a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800370c:	4a50      	ldr	r2, [pc, #320]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d045      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fd f9e0 	bl	8000ae0 <HAL_GetTick>
 8003720:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003722:	e00a      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003724:	f7fd f9dc 	bl	8000ae0 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e086      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800373a:	2302      	movs	r3, #2
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	2302      	movs	r3, #2
 8003748:	623b      	str	r3, [r7, #32]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	61fb      	str	r3, [r7, #28]
  return result;
 8003752:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	b2db      	uxtb	r3, r3
 800375e:	f043 0302 	orr.w	r3, r3, #2
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d102      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003768:	4b39      	ldr	r3, [pc, #228]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	e007      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800376e:	2302      	movs	r3, #2
 8003770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	fa93 f3a3 	rbit	r3, r3
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	4b35      	ldr	r3, [pc, #212]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2202      	movs	r2, #2
 8003780:	613a      	str	r2, [r7, #16]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	fa92 f2a2 	rbit	r2, r2
 8003788:	60fa      	str	r2, [r7, #12]
  return result;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	fab2 f282 	clz	r2, r2
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	f002 021f 	and.w	r2, r2, #31
 800379c:	2101      	movs	r1, #1
 800379e:	fa01 f202 	lsl.w	r2, r1, r2
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0bd      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4926      	ldr	r1, [pc, #152]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d105      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b23      	ldr	r3, [pc, #140]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d008      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037da:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f023 0203 	bic.w	r2, r3, #3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	491a      	ldr	r1, [pc, #104]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037f8:	4b15      	ldr	r3, [pc, #84]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f023 0210 	bic.w	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4912      	ldr	r1, [pc, #72]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003806:	4313      	orrs	r3, r2
 8003808:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003812:	2b00      	cmp	r3, #0
 8003814:	d008      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003816:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	490b      	ldr	r1, [pc, #44]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003824:	4313      	orrs	r3, r2
 8003826:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003834:	4b06      	ldr	r3, [pc, #24]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4903      	ldr	r1, [pc, #12]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003842:	4313      	orrs	r3, r2
 8003844:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3748      	adds	r7, #72	; 0x48
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	40021000 	.word	0x40021000
 8003854:	40007000 	.word	0x40007000
 8003858:	10908100 	.word	0x10908100

0800385c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e049      	b.n	8003902 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd f834 	bl	80008f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4610      	mov	r0, r2
 800389c:	f000 fa42 	bl	8003d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b082      	sub	sp, #8
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	d122      	bne.n	8003966 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b02      	cmp	r3, #2
 800392c:	d11b      	bne.n	8003966 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0202 	mvn.w	r2, #2
 8003936:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f9cb 	bl	8003ce8 <HAL_TIM_IC_CaptureCallback>
 8003952:	e005      	b.n	8003960 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f9bd 	bl	8003cd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9ce 	bl	8003cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b04      	cmp	r3, #4
 8003972:	d122      	bne.n	80039ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b04      	cmp	r3, #4
 8003980:	d11b      	bne.n	80039ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f06f 0204 	mvn.w	r2, #4
 800398a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f9a1 	bl	8003ce8 <HAL_TIM_IC_CaptureCallback>
 80039a6:	e005      	b.n	80039b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 f993 	bl	8003cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f9a4 	bl	8003cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d122      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d11b      	bne.n	8003a0e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f06f 0208 	mvn.w	r2, #8
 80039de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2204      	movs	r2, #4
 80039e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f977 	bl	8003ce8 <HAL_TIM_IC_CaptureCallback>
 80039fa:	e005      	b.n	8003a08 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f969 	bl	8003cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f97a 	bl	8003cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d122      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b10      	cmp	r3, #16
 8003a28:	d11b      	bne.n	8003a62 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f06f 0210 	mvn.w	r2, #16
 8003a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2208      	movs	r2, #8
 8003a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f94d 	bl	8003ce8 <HAL_TIM_IC_CaptureCallback>
 8003a4e:	e005      	b.n	8003a5c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f93f 	bl	8003cd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f950 	bl	8003cfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10e      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f06f 0201 	mvn.w	r2, #1
 8003a86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fc fe05 	bl	8000698 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b80      	cmp	r3, #128	; 0x80
 8003a9a:	d10e      	bne.n	8003aba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d107      	bne.n	8003aba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fabf 	bl	8004038 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac8:	d10e      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d107      	bne.n	8003ae8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fab2 	bl	800404c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b40      	cmp	r3, #64	; 0x40
 8003af4:	d10e      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d107      	bne.n	8003b14 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8fe 	bl	8003d10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b20      	cmp	r3, #32
 8003b20:	d10e      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d107      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0220 	mvn.w	r2, #32
 8003b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 fa72 	bl	8004024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_ConfigClockSource+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0b5      	b.n	8003ccc <HAL_TIM_ConfigClockSource+0x184>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9c:	d03e      	beq.n	8003c1c <HAL_TIM_ConfigClockSource+0xd4>
 8003b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba2:	f200 8087 	bhi.w	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003baa:	f000 8085 	beq.w	8003cb8 <HAL_TIM_ConfigClockSource+0x170>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	d87f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d01a      	beq.n	8003bee <HAL_TIM_ConfigClockSource+0xa6>
 8003bb8:	2b70      	cmp	r3, #112	; 0x70
 8003bba:	d87b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d050      	beq.n	8003c62 <HAL_TIM_ConfigClockSource+0x11a>
 8003bc0:	2b60      	cmp	r3, #96	; 0x60
 8003bc2:	d877      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b50      	cmp	r3, #80	; 0x50
 8003bc6:	d03c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0xfa>
 8003bc8:	2b50      	cmp	r3, #80	; 0x50
 8003bca:	d873      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d058      	beq.n	8003c82 <HAL_TIM_ConfigClockSource+0x13a>
 8003bd0:	2b40      	cmp	r3, #64	; 0x40
 8003bd2:	d86f      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d064      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d86b      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d060      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d867      	bhi.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05c      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d05a      	beq.n	8003ca2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003bec:	e062      	b.n	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6899      	ldr	r1, [r3, #8]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f000 f983 	bl	8003f08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c10:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	609a      	str	r2, [r3, #8]
      break;
 8003c1a:	e04e      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f000 f96c 	bl	8003f08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3e:	609a      	str	r2, [r3, #8]
      break;
 8003c40:	e03b      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6818      	ldr	r0, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	f000 f8e0 	bl	8003e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2150      	movs	r1, #80	; 0x50
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f939 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003c60:	e02b      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	6859      	ldr	r1, [r3, #4]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	461a      	mov	r2, r3
 8003c70:	f000 f8ff 	bl	8003e72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2160      	movs	r1, #96	; 0x60
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f929 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003c80:	e01b      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6818      	ldr	r0, [r3, #0]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	6859      	ldr	r1, [r3, #4]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f000 f8c0 	bl	8003e14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2140      	movs	r1, #64	; 0x40
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 f919 	bl	8003ed2 <TIM_ITRx_SetConfig>
      break;
 8003ca0:	e00b      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4619      	mov	r1, r3
 8003cac:	4610      	mov	r0, r2
 8003cae:	f000 f910 	bl	8003ed2 <TIM_ITRx_SetConfig>
        break;
 8003cb2:	e002      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003cb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <TIM_Base_SetConfig+0xdc>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d007      	beq.n	8003d4c <TIM_Base_SetConfig+0x28>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d42:	d003      	beq.n	8003d4c <TIM_Base_SetConfig+0x28>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a2f      	ldr	r2, [pc, #188]	; (8003e04 <TIM_Base_SetConfig+0xe0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d108      	bne.n	8003d5e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <TIM_Base_SetConfig+0xdc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <TIM_Base_SetConfig+0x6a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d6c:	d00f      	beq.n	8003d8e <TIM_Base_SetConfig+0x6a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a24      	ldr	r2, [pc, #144]	; (8003e04 <TIM_Base_SetConfig+0xe0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0x6a>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a23      	ldr	r2, [pc, #140]	; (8003e08 <TIM_Base_SetConfig+0xe4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x6a>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <TIM_Base_SetConfig+0xe8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x6a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a21      	ldr	r2, [pc, #132]	; (8003e10 <TIM_Base_SetConfig+0xec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a0e      	ldr	r2, [pc, #56]	; (8003e00 <TIM_Base_SetConfig+0xdc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <TIM_Base_SetConfig+0xc0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a0e      	ldr	r2, [pc, #56]	; (8003e08 <TIM_Base_SetConfig+0xe4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d007      	beq.n	8003de4 <TIM_Base_SetConfig+0xc0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a0d      	ldr	r2, [pc, #52]	; (8003e0c <TIM_Base_SetConfig+0xe8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0xc0>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a0c      	ldr	r2, [pc, #48]	; (8003e10 <TIM_Base_SetConfig+0xec>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40000400 	.word	0x40000400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800

08003e14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f023 030a 	bic.w	r3, r3, #10
 8003e50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	621a      	str	r2, [r3, #32]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b087      	sub	sp, #28
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	f023 0210 	bic.w	r2, r3, #16
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003eae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	697a      	ldr	r2, [r7, #20]
 8003ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b085      	sub	sp, #20
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f043 0307 	orr.w	r3, r3, #7
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	609a      	str	r2, [r3, #8]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	60b9      	str	r1, [r7, #8]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	021a      	lsls	r2, r3, #8
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	609a      	str	r2, [r3, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b085      	sub	sp, #20
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e054      	b.n	800400a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a24      	ldr	r2, [pc, #144]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00e      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc8:	d009      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d004      	beq.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a11      	ldr	r2, [pc, #68]	; (8004020 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10c      	bne.n	8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40000400 	.word	0x40000400
 8004020:	40014000 	.word	0x40014000

08004024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <__libc_init_array>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4d0d      	ldr	r5, [pc, #52]	; (8004098 <__libc_init_array+0x38>)
 8004064:	4c0d      	ldr	r4, [pc, #52]	; (800409c <__libc_init_array+0x3c>)
 8004066:	1b64      	subs	r4, r4, r5
 8004068:	10a4      	asrs	r4, r4, #2
 800406a:	2600      	movs	r6, #0
 800406c:	42a6      	cmp	r6, r4
 800406e:	d109      	bne.n	8004084 <__libc_init_array+0x24>
 8004070:	4d0b      	ldr	r5, [pc, #44]	; (80040a0 <__libc_init_array+0x40>)
 8004072:	4c0c      	ldr	r4, [pc, #48]	; (80040a4 <__libc_init_array+0x44>)
 8004074:	f000 f820 	bl	80040b8 <_init>
 8004078:	1b64      	subs	r4, r4, r5
 800407a:	10a4      	asrs	r4, r4, #2
 800407c:	2600      	movs	r6, #0
 800407e:	42a6      	cmp	r6, r4
 8004080:	d105      	bne.n	800408e <__libc_init_array+0x2e>
 8004082:	bd70      	pop	{r4, r5, r6, pc}
 8004084:	f855 3b04 	ldr.w	r3, [r5], #4
 8004088:	4798      	blx	r3
 800408a:	3601      	adds	r6, #1
 800408c:	e7ee      	b.n	800406c <__libc_init_array+0xc>
 800408e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004092:	4798      	blx	r3
 8004094:	3601      	adds	r6, #1
 8004096:	e7f2      	b.n	800407e <__libc_init_array+0x1e>
 8004098:	08004100 	.word	0x08004100
 800409c:	08004100 	.word	0x08004100
 80040a0:	08004100 	.word	0x08004100
 80040a4:	08004104 	.word	0x08004104

080040a8 <memset>:
 80040a8:	4402      	add	r2, r0
 80040aa:	4603      	mov	r3, r0
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d100      	bne.n	80040b2 <memset+0xa>
 80040b0:	4770      	bx	lr
 80040b2:	f803 1b01 	strb.w	r1, [r3], #1
 80040b6:	e7f9      	b.n	80040ac <memset+0x4>

080040b8 <_init>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	bf00      	nop
 80040bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040be:	bc08      	pop	{r3}
 80040c0:	469e      	mov	lr, r3
 80040c2:	4770      	bx	lr

080040c4 <_fini>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr
