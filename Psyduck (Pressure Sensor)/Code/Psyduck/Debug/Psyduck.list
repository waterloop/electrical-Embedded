
Psyduck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005078  08005078  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08005078  08005078  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005078  08005078  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800507c  0800507c  0001507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000020  080050a0  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  080050a0  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f826  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002138  00000000  00000000  0002f876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00032770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcc6  00000000  00000000  00033438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffe6  00000000  00000000  0004f0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9428  00000000  00000000  0005f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010850c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b28  00000000  00000000  00108560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005030 	.word	0x08005030

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005030 	.word	0x08005030

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 fd30 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f86e 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 fa28 	bl	8000e64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a14:	f000 fa08 	bl	8000e28 <MX_DMA_Init>
  MX_ADC2_Init();
 8000a18:	f000 f8c6 	bl	8000ba8 <MX_ADC2_Init>
  MX_CAN_Init();
 8000a1c:	f000 f94e 	bl	8000cbc <MX_CAN_Init>
  MX_TIM2_Init();
 8000a20:	f000 f9b4 	bl	8000d8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  hcan.Instance->MCR = 0x60; // important for debugging canbus, allows for normal operation during debugging
 8000a24:	4b2a      	ldr	r3, [pc, #168]	; (8000ad0 <main+0xcc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2260      	movs	r2, #96	; 0x60
 8000a2a:	601a      	str	r2, [r3, #0]
  HAL_CAN_Start(&hcan);
 8000a2c:	4828      	ldr	r0, [pc, #160]	; (8000ad0 <main+0xcc>)
 8000a2e:	f001 fdad 	bl	800258c <HAL_CAN_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2ConvertedValues, 64);
 8000a32:	2240      	movs	r2, #64	; 0x40
 8000a34:	4927      	ldr	r1, [pc, #156]	; (8000ad4 <main+0xd0>)
 8000a36:	4828      	ldr	r0, [pc, #160]	; (8000ad8 <main+0xd4>)
 8000a38:	f000 ff24 	bl	8001884 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000a3c:	4827      	ldr	r0, [pc, #156]	; (8000adc <main+0xd8>)
 8000a3e:	f003 fec3 	bl	80047c8 <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim2, 0);
 8000a42:	4b26      	ldr	r3, [pc, #152]	; (8000adc <main+0xd8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (HAL_CAN_GetRxFifoFillLevel(&hcan, fifo ) !=0) { // check if mail box is not empty
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <main+0xdc>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481f      	ldr	r0, [pc, #124]	; (8000ad0 <main+0xcc>)
 8000a52:	f001 fff0 	bl	8002a36 <HAL_CAN_GetRxFifoFillLevel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d033      	beq.n	8000ac4 <main+0xc0>
	  	HAL_CAN_GetRxMessage(&hcan, fifo, &RxHeader, Data); // copy frame data to RX header
 8000a5c:	4b20      	ldr	r3, [pc, #128]	; (8000ae0 <main+0xdc>)
 8000a5e:	6819      	ldr	r1, [r3, #0]
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <main+0xe0>)
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <main+0xe4>)
 8000a64:	481a      	ldr	r0, [pc, #104]	; (8000ad0 <main+0xcc>)
 8000a66:	f001 fed4 	bl	8002812 <HAL_CAN_GetRxMessage>
	  	switch (RxHeader.ExtId) {
 8000a6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <main+0xe4>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d12a      	bne.n	8000ac8 <main+0xc4>
	  		case 0:
	  			if  ((Data[0] == 0x02) || (Data[0] == 0x03) || (Data[0] == 0x08)) {
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <main+0xe0>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	d007      	beq.n	8000a8a <main+0x86>
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <main+0xe0>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b03      	cmp	r3, #3
 8000a80:	d003      	beq.n	8000a8a <main+0x86>
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <main+0xe0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d105      	bne.n	8000a96 <main+0x92>
	  				HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f002 fc13 	bl	80032bc <HAL_GPIO_WritePin>
	  			}

	  			if ((Data[0] == 0x04) || (Data[0] == 0x05) || (Data[0] == 0x06) || (Data[0] == 0x07)) {
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <main+0xe0>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b04      	cmp	r3, #4
 8000a9c:	d00b      	beq.n	8000ab6 <main+0xb2>
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <main+0xe0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b05      	cmp	r3, #5
 8000aa4:	d007      	beq.n	8000ab6 <main+0xb2>
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <main+0xe0>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b06      	cmp	r3, #6
 8000aac:	d003      	beq.n	8000ab6 <main+0xb2>
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <main+0xe0>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b07      	cmp	r3, #7
 8000ab4:	d10a      	bne.n	8000acc <main+0xc8>
	  				HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_SET);
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	2101      	movs	r1, #1
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f002 fbfd 	bl	80032bc <HAL_GPIO_WritePin>
	  			}
	  			break;
 8000ac2:	e003      	b.n	8000acc <main+0xc8>
	  		default:
	  			break;

	  	}

	 }
 8000ac4:	bf00      	nop
 8000ac6:	e7c0      	b.n	8000a4a <main+0x46>
	  			break;
 8000ac8:	bf00      	nop
 8000aca:	e7be      	b.n	8000a4a <main+0x46>
	  			break;
 8000acc:	bf00      	nop
	 if (HAL_CAN_GetRxFifoFillLevel(&hcan, fifo ) !=0) { // check if mail box is not empty
 8000ace:	e7bc      	b.n	8000a4a <main+0x46>
 8000ad0:	2000009c 	.word	0x2000009c
 8000ad4:	200001c8 	.word	0x200001c8
 8000ad8:	2000004c 	.word	0x2000004c
 8000adc:	20000104 	.word	0x20000104
 8000ae0:	20000048 	.word	0x20000048
 8000ae4:	200000fc 	.word	0x200000fc
 8000ae8:	200001ac 	.word	0x200001ac

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b096      	sub	sp, #88	; 0x58
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af6:	2228      	movs	r2, #40	; 0x28
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f004 fa90 	bl	8005020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b3c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b40:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fbd0 	bl	80032ec <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000b52:	f000 fb15 	bl	8001180 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 fac2 	bl	80040fc <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7e:	f000 faff 	bl	8001180 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b82:	2380      	movs	r3, #128	; 0x80
 8000b84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b8a:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fc9c 	bl	80044cc <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b9a:	f000 faf1 	bl	8001180 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	; 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
 8000bbc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bbe:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bc0:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <MX_ADC2_Init+0x110>)
 8000bc2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bc4:	4b3b      	ldr	r3, [pc, #236]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bca:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bd0:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000bd6:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bea:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c06:	2204      	movs	r2, #4
 8000c08:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c16:	4827      	ldr	r0, [pc, #156]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c18:	f000 fca2 	bl	8001560 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000c22:	f000 faad 	bl	8001180 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000c32:	2305      	movs	r3, #5
 8000c34:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	481c      	ldr	r0, [pc, #112]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c44:	f000 fef8 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000c4e:	f000 fa97 	bl	8001180 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c52:	2302      	movs	r3, #2
 8000c54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c60:	f000 feea 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000c6a:	f000 fa89 	bl	8001180 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000c72:	2303      	movs	r3, #3
 8000c74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c7c:	f000 fedc 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000c86:	f000 fa7b 	bl	8001180 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_ADC2_Init+0x10c>)
 8000c9c:	f000 fecc 	bl	8001a38 <HAL_ADC_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC2_Init+0x102>
  {
    Error_Handler();
 8000ca6:	f000 fa6b 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000004c 	.word	0x2000004c
 8000cb8:	50000100 	.word	0x50000100

08000cbc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cc2:	4a2f      	ldr	r2, [pc, #188]	; (8000d80 <MX_CAN_Init+0xc4>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cc8:	2209      	movs	r2, #9
 8000cca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cda:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8000cde:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000ce2:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000ce6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ce8:	4b24      	ldr	r3, [pc, #144]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000cee:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000cf4:	4b21      	ldr	r3, [pc, #132]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cfa:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d0c:	481b      	ldr	r0, [pc, #108]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000d0e:	f001 fa78 	bl	8002202 <HAL_CAN_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d18:	f000 fa32 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  FilterConfig.FilterIdHigh = 0x0000;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  FilterConfig.FilterMaskIdHigh = 0x0000;
 8000d28:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  FilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000d34:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  FilterConfig.FilterBank = 13;
 8000d3a:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d3c:	220d      	movs	r2, #13
 8000d3e:	615a      	str	r2, [r3, #20]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d40:	4b10      	ldr	r3, [pc, #64]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	619a      	str	r2, [r3, #24]
  FilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000d46:	4b0f      	ldr	r3, [pc, #60]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d4c:	4b0d      	ldr	r3, [pc, #52]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan, &FilterConfig);
 8000d52:	490c      	ldr	r1, [pc, #48]	; (8000d84 <MX_CAN_Init+0xc8>)
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <MX_CAN_Init+0xc0>)
 8000d56:	f001 fb4f 	bl	80023f8 <HAL_CAN_ConfigFilter>

  //Configuring TX:
  TxHeader.StdId = 0x00;
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_CAN_Init+0xcc>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
  //TxHeader.ExtId = 0x01;
  TxHeader.RTR = CAN_RTR_DATA; 	 			// want data frame
 8000d60:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_CAN_Init+0xcc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_EXT;	 			// want extended frame
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_CAN_Init+0xcc>)
 8000d68:	2204      	movs	r2, #4
 8000d6a:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 4;			 	 			// amounts of bytes u sending
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_CAN_Init+0xcc>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MX_CAN_Init+0xcc>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	751a      	strb	r2, [r3, #20]
  /* USER CODE END CAN_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	2000009c 	.word	0x2000009c
 8000d80:	40006400 	.word	0x40006400
 8000d84:	200000d0 	.word	0x200000d0
 8000d88:	20000194 	.word	0x20000194

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000daa:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000db0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000db4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000db8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000dc2:	f240 128f 	movw	r2, #399	; 0x18f
 8000dc6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000dd6:	f003 fc9f 	bl	8004718 <HAL_TIM_Base_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000de0:	f000 f9ce 	bl	8001180 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dea:	f107 0310 	add.w	r3, r7, #16
 8000dee:	4619      	mov	r1, r3
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000df2:	f003 fe64 	bl	8004abe <HAL_TIM_ConfigClockSource>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000dfc:	f000 f9c0 	bl	8001180 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_TIM2_Init+0x98>)
 8000e0e:	f004 f857 	bl	8004ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 f9b2 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e1c:	bf00      	nop
 8000e1e:	3720      	adds	r7, #32
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000104 	.word	0x20000104

08000e28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_DMA_Init+0x38>)
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <MX_DMA_Init+0x38>)
 8000e34:	f043 0301 	orr.w	r3, r3, #1
 8000e38:	6153      	str	r3, [r2, #20]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_DMA_Init+0x38>)
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2100      	movs	r1, #0
 8000e4a:	200c      	movs	r0, #12
 8000e4c:	f001 fef7 	bl	8002c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e50:	200c      	movs	r0, #12
 8000e52:	f001 ff10 	bl	8002c76 <HAL_NVIC_EnableIRQ>

}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_GPIO_Init+0x78>)
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	4a17      	ldr	r2, [pc, #92]	; (8000edc <MX_GPIO_Init+0x78>)
 8000e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e84:	6153      	str	r3, [r2, #20]
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_GPIO_Init+0x78>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_GPIO_Init+0x78>)
 8000e94:	695b      	ldr	r3, [r3, #20]
 8000e96:	4a11      	ldr	r2, [pc, #68]	; (8000edc <MX_GPIO_Init+0x78>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	6153      	str	r3, [r2, #20]
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_GPIO_Init+0x78>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2101      	movs	r1, #1
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f002 fa03 	bl	80032bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CONTROL_Pin */
  GPIO_InitStruct.Pin = CONTROL_Pin;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ed0:	f002 f882 	bl	8002fd8 <HAL_GPIO_Init>

}
 8000ed4:	bf00      	nop
 8000ed6:	3720      	adds	r7, #32
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000

08000ee0 <float2Bytes>:

/* USER CODE BEGIN 4 */
void float2Bytes(float val, uint8_t *bytes_array){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eea:	6038      	str	r0, [r7, #0]
  union {
    float float_variable;
    uint8_t temp_array[4];
  } u;
  // Overite bytes of union with float variable
  u.float_variable = val;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fa      	ldr	r2, [r7, #12]
  // Assign bytes to input array
  memcpy(bytes_array, u.temp_array, 4);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	601a      	str	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f04:	b5b0      	push	{r4, r5, r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < 4; i++) {
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e0c5      	b.n	800109e <HAL_ADC_ConvCpltCallback+0x19a>
		sum = 0;
 8000f12:	4b67      	ldr	r3, [pc, #412]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
		mean = 0;
 8000f18:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	801a      	strh	r2, [r3, #0]

		for(uint8_t j=0; j < 16; j++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73bb      	strb	r3, [r7, #14]
 8000f22:	e00f      	b.n	8000f44 <HAL_ADC_ConvCpltCallback+0x40>
			sum += ADC2ConvertedValues[i + 4*j];
 8000f24:	7bfa      	ldrb	r2, [r7, #15]
 8000f26:	7bbb      	ldrb	r3, [r7, #14]
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a62      	ldr	r2, [pc, #392]	; (80010b8 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8000f2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b5e      	ldr	r3, [pc, #376]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	4a5d      	ldr	r2, [pc, #372]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000f3c:	6013      	str	r3, [r2, #0]
		for(uint8_t j=0; j < 16; j++) {
 8000f3e:	7bbb      	ldrb	r3, [r7, #14]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73bb      	strb	r3, [r7, #14]
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d9ec      	bls.n	8000f24 <HAL_ADC_ConvCpltCallback+0x20>
		}

		mean = sum/16;
 8000f4a:	4b59      	ldr	r3, [pc, #356]	; (80010b0 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	091b      	lsrs	r3, r3, #4
 8000f50:	b29a      	uxth	r2, r3
 8000f52:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000f54:	801a      	strh	r2, [r3, #0]

		//i = 0, 1 psi250 max. i=2 psi5805.51 max
		switch (i)
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	2b03      	cmp	r3, #3
 8000f5a:	f200 809c 	bhi.w	8001096 <HAL_ADC_ConvCpltCallback+0x192>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <HAL_ADC_ConvCpltCallback+0x60>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000fb9 	.word	0x08000fb9
 8000f6c:	08000ffd 	.word	0x08000ffd
 8000f70:	08001031 	.word	0x08001031
		{
			case 0:
				pressure[0] = (((float)mean)*VGain_1) + offset[i];
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f80:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80010bc <HAL_ADC_ConvCpltCallback+0x1b8>
 8000f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f88:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80010c0 <HAL_ADC_ConvCpltCallback+0x1bc>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f98:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f9c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	4413      	add	r3, r2
 8000fa8:	edd3 7a00 	vldr	s15, [r3]
 8000fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb0:	4b45      	ldr	r3, [pc, #276]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8000fb6:	e06f      	b.n	8001098 <HAL_ADC_ConvCpltCallback+0x194>

			case 1:
				pressure[1] = (((float)mean)*VGain_1) + offset[i];
 8000fb8:	4b3e      	ldr	r3, [pc, #248]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000fba:	881b      	ldrh	r3, [r3, #0]
 8000fbc:	ee07 3a90 	vmov	s15, r3
 8000fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80010bc <HAL_ADC_ConvCpltCallback+0x1b8>
 8000fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fcc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80010c0 <HAL_ADC_ConvCpltCallback+0x1bc>
 8000fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fd4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000fd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000fe0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4a37      	ldr	r2, [pc, #220]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	edd3 7a00 	vldr	s15, [r3]
 8000ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff4:	4b34      	ldr	r3, [pc, #208]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x1c4>)
 8000ff6:	edc3 7a01 	vstr	s15, [r3, #4]
			break;
 8000ffa:	e04d      	b.n	8001098 <HAL_ADC_ConvCpltCallback+0x194>

			case 2:
				pressure[2] = (((float)mean)*VGain_2) + offset[i];
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001008:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80010bc <HAL_ADC_ConvCpltCallback+0x1b8>
 800100c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001010:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80010cc <HAL_ADC_ConvCpltCallback+0x1c8>
 8001014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001028:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_ADC_ConvCpltCallback+0x1c4>)
 800102a:	edc3 7a02 	vstr	s15, [r3, #8]
			break;
 800102e:	e033      	b.n	8001098 <HAL_ADC_ConvCpltCallback+0x194>

			case 3:
				current = (((float)mean)*IGain) + offset[i];
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001032:	881b      	ldrh	r3, [r3, #0]
 8001034:	ee07 3a90 	vmov	s15, r3
 8001038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800103c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80010bc <HAL_ADC_ConvCpltCallback+0x1b8>
 8001040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001044:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001048:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800104c:	ee16 0a90 	vmov	r0, s13
 8001050:	f7ff fa1e 	bl	8000490 <__aeabi_f2d>
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <HAL_ADC_ConvCpltCallback+0x1cc>)
 800105a:	f7ff fb9b 	bl	8000794 <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4614      	mov	r4, r2
 8001064:	461d      	mov	r5, r3
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	4a16      	ldr	r2, [pc, #88]	; (80010c4 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	4413      	add	r3, r2
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa0d 	bl	8000490 <__aeabi_f2d>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4620      	mov	r0, r4
 800107c:	4629      	mov	r1, r5
 800107e:	f7ff f8a9 	bl	80001d4 <__adddf3>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fc6b 	bl	8000964 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001092:	6013      	str	r3, [r2, #0]
			break;
 8001094:	e000      	b.n	8001098 <HAL_ADC_ConvCpltCallback+0x194>

			default:
			break;
 8001096:	bf00      	nop
	for (uint8_t i=0; i < 4; i++) {
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	3301      	adds	r3, #1
 800109c:	73fb      	strb	r3, [r7, #15]
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	f67f af36 	bls.w	8000f12 <HAL_ADC_ConvCpltCallback+0xe>
				}
	}
}
 80010a6:	bf00      	nop
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}
 80010b0:	2000003c 	.word	0x2000003c
 80010b4:	20000040 	.word	0x20000040
 80010b8:	200001c8 	.word	0x200001c8
 80010bc:	3a534067 	.word	0x3a534067
 80010c0:	427a0000 	.word	0x427a0000
 80010c4:	20000000 	.word	0x20000000
 80010c8:	200000c4 	.word	0x200000c4
 80010cc:	441109aa 	.word	0x441109aa
 80010d0:	40490000 	.word	0x40490000
 80010d4:	20000100 	.word	0x20000100

080010d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < 3; ++i) { 										//looping through CAN messages and sending data acquired
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e036      	b.n	8001154 <HAL_TIM_PeriodElapsedCallback+0x7c>

				TxHeader.StdId = IDs[i];
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80010f0:	601a      	str	r2, [r3, #0]
				float2Bytes(pressure[2-i], &bytes[0]); 						//converting the floats to packets of bytes
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	f1c3 0302 	rsb	r3, r3, #2
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	edd3 7a00 	vldr	s15, [r3]
 8001102:	481b      	ldr	r0, [pc, #108]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001104:	eeb0 0a67 	vmov.f32	s0, s15
 8001108:	f7ff feea 	bl	8000ee0 <float2Bytes>

				for (uint8_t j=0 ; j < 4; j++) {
 800110c:	2300      	movs	r3, #0
 800110e:	73bb      	strb	r3, [r7, #14]
 8001110:	e00a      	b.n	8001128 <HAL_TIM_PeriodElapsedCallback+0x50>
					Data[3-j] = bytes[j]; 									//writing down for the data buffer
 8001112:	7bba      	ldrb	r2, [r7, #14]
 8001114:	7bbb      	ldrb	r3, [r7, #14]
 8001116:	f1c3 0303 	rsb	r3, r3, #3
 800111a:	4915      	ldr	r1, [pc, #84]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800111c:	5c89      	ldrb	r1, [r1, r2]
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001120:	54d1      	strb	r1, [r2, r3]
				for (uint8_t j=0 ; j < 4; j++) {
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	3301      	adds	r3, #1
 8001126:	73bb      	strb	r3, [r7, #14]
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d9f1      	bls.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x3a>
				}

				HAL_CAN_AddTxMessage(&hcan, &TxHeader, Data, &TxMailBox ); 	// load message to mailbox
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001130:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001132:	490d      	ldr	r1, [pc, #52]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001136:	f001 fa6d 	bl	8002614 <HAL_CAN_AddTxMessage>
				while (HAL_CAN_IsTxMessagePending( &hcan, TxMailBox));		//waiting till message gets through
 800113a:	bf00      	nop
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	480e      	ldr	r0, [pc, #56]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001144:	f001 fb41 	bl	80027ca <HAL_CAN_IsTxMessagePending>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d1f6      	bne.n	800113c <HAL_TIM_PeriodElapsedCallback+0x64>
	for (uint8_t i=0; i < 3; ++i) { 										//looping through CAN messages and sending data acquired
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	3301      	adds	r3, #1
 8001152:	73fb      	strb	r3, [r7, #15]
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d9c5      	bls.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0xe>
			}
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000010 	.word	0x20000010
 8001168:	20000194 	.word	0x20000194
 800116c:	200000c4 	.word	0x200000c4
 8001170:	200000f8 	.word	0x200000f8
 8001174:	200000fc 	.word	0x200000fc
 8001178:	20000044 	.word	0x20000044
 800117c:	2000009c 	.word	0x2000009c

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x44>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x44>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6193      	str	r3, [r2, #24]
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x44>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x44>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x44>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	61d3      	str	r3, [r2, #28]
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x44>)
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a29      	ldr	r2, [pc, #164]	; (8001298 <HAL_ADC_MspInit+0xc4>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d14c      	bne.n	8001290 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011f6:	4b29      	ldr	r3, [pc, #164]	; (800129c <HAL_ADC_MspInit+0xc8>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4a28      	ldr	r2, [pc, #160]	; (800129c <HAL_ADC_MspInit+0xc8>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6153      	str	r3, [r2, #20]
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <HAL_ADC_MspInit+0xc8>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <HAL_ADC_MspInit+0xc8>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	4a22      	ldr	r2, [pc, #136]	; (800129c <HAL_ADC_MspInit+0xc8>)
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	6153      	str	r3, [r2, #20]
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <HAL_ADC_MspInit+0xc8>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001226:	23f0      	movs	r3, #240	; 0xf0
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122a:	2303      	movs	r3, #3
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123c:	f001 fecc 	bl	8002fd8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001242:	4a18      	ldr	r2, [pc, #96]	; (80012a4 <HAL_ADC_MspInit+0xd0>)
 8001244:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 800125a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800125e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001266:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 800126a:	2220      	movs	r2, #32
 800126c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001270:	2200      	movs	r2, #0
 8001272:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001276:	f001 fd18 	bl	8002caa <HAL_DMA_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001280:	f7ff ff7e 	bl	8001180 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 8001288:	639a      	str	r2, [r3, #56]	; 0x38
 800128a:	4a05      	ldr	r2, [pc, #20]	; (80012a0 <HAL_ADC_MspInit+0xcc>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001290:	bf00      	nop
 8001292:	3728      	adds	r7, #40	; 0x28
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	50000100 	.word	0x50000100
 800129c:	40021000 	.word	0x40021000
 80012a0:	20000150 	.word	0x20000150
 80012a4:	4002001c 	.word	0x4002001c

080012a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_CAN_MspInit+0x80>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d129      	bne.n	800131e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_CAN_MspInit+0x84>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	4a17      	ldr	r2, [pc, #92]	; (800132c <HAL_CAN_MspInit+0x84>)
 80012d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d4:	61d3      	str	r3, [r2, #28]
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_CAN_MspInit+0x84>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_CAN_MspInit+0x84>)
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <HAL_CAN_MspInit+0x84>)
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ec:	6153      	str	r3, [r2, #20]
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_CAN_MspInit+0x84>)
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80012fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800130c:	2309      	movs	r3, #9
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f001 fe5d 	bl	8002fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	; 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40006400 	.word	0x40006400
 800132c:	40021000 	.word	0x40021000

08001330 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d113      	bne.n	800136a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_TIM_Base_MspInit+0x44>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0b      	ldr	r2, [pc, #44]	; (8001374 <HAL_TIM_Base_MspInit+0x44>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <HAL_TIM_Base_MspInit+0x44>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	201c      	movs	r0, #28
 8001360:	f001 fc6d 	bl	8002c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001364:	201c      	movs	r0, #28
 8001366:	f001 fc86 	bl	8002c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000

08001378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800137c:	e7fe      	b.n	800137c <NMI_Handler+0x4>

0800137e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <MemManage_Handler+0x4>

0800138a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <BusFault_Handler+0x4>

08001390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <UsageFault_Handler+0x4>

08001396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f898 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80013d0:	4802      	ldr	r0, [pc, #8]	; (80013dc <DMA1_Channel2_IRQHandler+0x10>)
 80013d2:	f001 fd10 	bl	8002df6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000150 	.word	0x20000150

080013e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <TIM2_IRQHandler+0x10>)
 80013e6:	f003 fa4b 	bl	8004880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000104 	.word	0x20000104

080013f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	; (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001450 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800141c:	480d      	ldr	r0, [pc, #52]	; (8001454 <LoopForever+0x6>)
  ldr r1, =_edata
 800141e:	490e      	ldr	r1, [pc, #56]	; (8001458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <LoopForever+0xe>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001424:	e002      	b.n	800142c <LoopCopyDataInit>

08001426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142a:	3304      	adds	r3, #4

0800142c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800142c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001430:	d3f9      	bcc.n	8001426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001434:	4c0b      	ldr	r4, [pc, #44]	; (8001464 <LoopForever+0x16>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001438:	e001      	b.n	800143e <LoopFillZerobss>

0800143a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800143c:	3204      	adds	r2, #4

0800143e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001440:	d3fb      	bcc.n	800143a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001442:	f7ff ffd7 	bl	80013f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001446:	f003 fdc7 	bl	8004fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800144a:	f7ff fadb 	bl	8000a04 <main>

0800144e <LoopForever>:

LoopForever:
    b LoopForever
 800144e:	e7fe      	b.n	800144e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001450:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800145c:	08005080 	.word	0x08005080
  ldr r2, =_sbss
 8001460:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001464:	2000024c 	.word	0x2000024c

08001468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC1_2_IRQHandler>
	...

0800146c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x28>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x28>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f001 fbd3 	bl	8002c28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fe80 	bl	800118c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40022000 	.word	0x40022000

08001498 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fbeb 	bl	8002c92 <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f001 fbb3 	bl	8002c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000014 	.word	0x20000014
 80014f0:	2000001c 	.word	0x2000001c
 80014f4:	20000018 	.word	0x20000018

080014f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000001c 	.word	0x2000001c
 800151c:	20000248 	.word	0x20000248

08001520 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;  
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20000248 	.word	0x20000248

08001538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b09a      	sub	sp, #104	; 0x68
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e172      	b.n	8001866 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d176      	bne.n	8001680 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	2b00      	cmp	r3, #0
 8001598:	d152      	bne.n	8001640 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff fe0d 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d13b      	bne.n	8001640 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fdbb 	bl	8002144 <ADC_Disable>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d12f      	bne.n	8001640 <HAL_ADC_Init+0xe0>
 80015e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d12b      	bne.n	8001640 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f0:	f023 0302 	bic.w	r3, r3, #2
 80015f4:	f043 0202 	orr.w	r2, r3, #2
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800160a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800161a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800161c:	4b94      	ldr	r3, [pc, #592]	; (8001870 <HAL_ADC_Init+0x310>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a94      	ldr	r2, [pc, #592]	; (8001874 <HAL_ADC_Init+0x314>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9a      	lsrs	r2, r3, #18
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001632:	e002      	b.n	800163a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3b01      	subs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f9      	bne.n	8001634 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d007      	beq.n	800165e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800165c:	d110      	bne.n	8001680 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f023 0312 	bic.w	r3, r3, #18
 8001666:	f043 0210 	orr.w	r2, r3, #16
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f043 0201 	orr.w	r2, r3, #1
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 80df 	bne.w	800184c <HAL_ADC_Init+0x2ec>
 800168e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 80da 	bne.w	800184c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f040 80d2 	bne.w	800184c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016b0:	f043 0202 	orr.w	r2, r3, #2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016b8:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_ADC_Init+0x318>)
 80016ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016c4:	d102      	bne.n	80016cc <HAL_ADC_Init+0x16c>
 80016c6:	4b6d      	ldr	r3, [pc, #436]	; (800187c <HAL_ADC_Init+0x31c>)
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e002      	b.n	80016d2 <HAL_ADC_Init+0x172>
 80016cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016d0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_ADC_Init+0x192>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_ADC_Init+0x192>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_ADC_Init+0x194>
 80016f2:	2300      	movs	r3, #0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d11c      	bne.n	8001732 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d010      	beq.n	8001720 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_ADC_Init+0x1ba>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b01      	cmp	r3, #1
 8001714:	d101      	bne.n	800171a <HAL_ADC_Init+0x1ba>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_ADC_Init+0x1bc>
 800171a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800171c:	2b00      	cmp	r3, #0
 800171e:	d108      	bne.n	8001732 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	431a      	orrs	r2, r3
 800172e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001730:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e5b      	ldrb	r3, [r3, #25]
 8001736:	035b      	lsls	r3, r3, #13
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800173c:	2a01      	cmp	r2, #1
 800173e:	d002      	beq.n	8001746 <HAL_ADC_Init+0x1e6>
 8001740:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001744:	e000      	b.n	8001748 <HAL_ADC_Init+0x1e8>
 8001746:	2200      	movs	r2, #0
 8001748:	431a      	orrs	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4313      	orrs	r3, r2
 8001756:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001758:	4313      	orrs	r3, r2
 800175a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d11b      	bne.n	800179e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7e5b      	ldrb	r3, [r3, #25]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	3b01      	subs	r3, #1
 8001774:	045a      	lsls	r2, r3, #17
 8001776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001778:	4313      	orrs	r3, r2
 800177a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800177e:	663b      	str	r3, [r7, #96]	; 0x60
 8001780:	e00d      	b.n	800179e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800178a:	f043 0220 	orr.w	r2, r3, #32
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d007      	beq.n	80017b6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ae:	4313      	orrs	r3, r2
 80017b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017b2:	4313      	orrs	r3, r2
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d114      	bne.n	80017ee <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017d2:	f023 0302 	bic.w	r3, r3, #2
 80017d6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7e1b      	ldrb	r3, [r3, #24]
 80017dc:	039a      	lsls	r2, r3, #14
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4313      	orrs	r3, r2
 80017e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017ea:	4313      	orrs	r3, r2
 80017ec:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <HAL_ADC_Init+0x320>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80017fe:	430b      	orrs	r3, r1
 8001800:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10c      	bne.n	8001824 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	f023 010f 	bic.w	r1, r3, #15
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
 8001822:	e007      	b.n	8001834 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 020f 	bic.w	r2, r2, #15
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	f023 0303 	bic.w	r3, r3, #3
 8001842:	f043 0201 	orr.w	r2, r3, #1
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
 800184a:	e00a      	b.n	8001862 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	f023 0312 	bic.w	r3, r3, #18
 8001854:	f043 0210 	orr.w	r2, r3, #16
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800185c:	2301      	movs	r3, #1
 800185e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001866:	4618      	mov	r0, r3
 8001868:	3768      	adds	r7, #104	; 0x68
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000014 	.word	0x20000014
 8001874:	431bde83 	.word	0x431bde83
 8001878:	50000300 	.word	0x50000300
 800187c:	50000100 	.word	0x50000100
 8001880:	fff0c007 	.word	0xfff0c007

08001884 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f040 80b9 	bne.w	8001a16 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_ADC_Start_DMA+0x2e>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e0b4      	b.n	8001a1c <HAL_ADC_Start_DMA+0x198>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80018ba:	4b5a      	ldr	r3, [pc, #360]	; (8001a24 <HAL_ADC_Start_DMA+0x1a0>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 80a0 	bne.w	8001a08 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fbdd 	bl	8002088 <ADC_Enable>
 80018ce:	4603      	mov	r3, r0
 80018d0:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 8092 	bne.w	80019fe <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018e2:	f023 0301 	bic.w	r3, r3, #1
 80018e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <HAL_ADC_Start_DMA+0x1a0>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_ADC_Start_DMA+0x80>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001902:	d115      	bne.n	8001930 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d027      	beq.n	800196e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001926:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800192e:	e01e      	b.n	800196e <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001944:	d004      	beq.n	8001950 <HAL_ADC_Start_DMA+0xcc>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a37      	ldr	r2, [pc, #220]	; (8001a28 <HAL_ADC_Start_DMA+0x1a4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d10e      	bne.n	800196e <HAL_ADC_Start_DMA+0xea>
 8001950:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197a:	d106      	bne.n	800198a <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001980:	f023 0206 	bic.w	r2, r3, #6
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	645a      	str	r2, [r3, #68]	; 0x44
 8001988:	e002      	b.n	8001990 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800199c:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <HAL_ADC_Start_DMA+0x1a8>)
 800199e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a4:	4a22      	ldr	r2, [pc, #136]	; (8001a30 <HAL_ADC_Start_DMA+0x1ac>)
 80019a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <HAL_ADC_Start_DMA+0x1b0>)
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	221c      	movs	r2, #28
 80019b6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f042 0210 	orr.w	r2, r2, #16
 80019c6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	68da      	ldr	r2, [r3, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f042 0201 	orr.w	r2, r2, #1
 80019d6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3340      	adds	r3, #64	; 0x40
 80019e2:	4619      	mov	r1, r3
 80019e4:	68ba      	ldr	r2, [r7, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f001 f9a6 	bl	8002d38 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0204 	orr.w	r2, r2, #4
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	e00d      	b.n	8001a1a <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a06:	e008      	b.n	8001a1a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001a14:	e001      	b.n	8001a1a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	50000300 	.word	0x50000300
 8001a28:	50000100 	.word	0x50000100
 8001a2c:	08001fbd 	.word	0x08001fbd
 8001a30:	08002037 	.word	0x08002037
 8001a34:	08002053 	.word	0x08002053

08001a38 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b09b      	sub	sp, #108	; 0x6c
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_ConfigChannel+0x22>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e2a5      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x56e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 8289 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d81c      	bhi.n	8001ab4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	231f      	movs	r3, #31
 8001a90:	4093      	lsls	r3, r2
 8001a92:	43db      	mvns	r3, r3
 8001a94:	4019      	ands	r1, r3
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab2:	e063      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b09      	cmp	r3, #9
 8001aba:	d81e      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	3b1e      	subs	r3, #30
 8001ad0:	221f      	movs	r2, #31
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	4019      	ands	r1, r3
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	3b1e      	subs	r3, #30
 8001aec:	fa00 f203 	lsl.w	r2, r0, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	635a      	str	r2, [r3, #52]	; 0x34
 8001af8:	e040      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b0e      	cmp	r3, #14
 8001b00:	d81e      	bhi.n	8001b40 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	3b3c      	subs	r3, #60	; 0x3c
 8001b16:	221f      	movs	r2, #31
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4019      	ands	r1, r3
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	3b3c      	subs	r3, #60	; 0x3c
 8001b32:	fa00 f203 	lsl.w	r2, r0, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3e:	e01d      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	3b5a      	subs	r3, #90	; 0x5a
 8001b54:	221f      	movs	r2, #31
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4019      	ands	r1, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	6818      	ldr	r0, [r3, #0]
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	3b5a      	subs	r3, #90	; 0x5a
 8001b70:	fa00 f203 	lsl.w	r2, r0, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 80e5 	bne.w	8001d56 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d91c      	bls.n	8001bce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6999      	ldr	r1, [r3, #24]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3b1e      	subs	r3, #30
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4019      	ands	r1, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6898      	ldr	r0, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3b1e      	subs	r3, #30
 8001bc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	619a      	str	r2, [r3, #24]
 8001bcc:	e019      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6959      	ldr	r1, [r3, #20]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	2207      	movs	r2, #7
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4019      	ands	r1, r3
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	6898      	ldr	r0, [r3, #8]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	fa00 f203 	lsl.w	r2, r0, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d84f      	bhi.n	8001cc4 <HAL_ADC_ConfigChannel+0x28c>
 8001c24:	a201      	add	r2, pc, #4	; (adr r2, 8001c2c <HAL_ADC_ConfigChannel+0x1f4>)
 8001c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c2a:	bf00      	nop
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c5f 	.word	0x08001c5f
 8001c34:	08001c81 	.word	0x08001c81
 8001c38:	08001ca3 	.word	0x08001ca3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c42:	4b9e      	ldr	r3, [pc, #632]	; (8001ebc <HAL_ADC_ConfigChannel+0x484>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6812      	ldr	r2, [r2, #0]
 8001c4a:	0691      	lsls	r1, r2, #26
 8001c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c5a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c5c:	e07e      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c64:	4b95      	ldr	r3, [pc, #596]	; (8001ebc <HAL_ADC_ConfigChannel+0x484>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	0691      	lsls	r1, r2, #26
 8001c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c70:	430a      	orrs	r2, r1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c7c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001c7e:	e06d      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001c86:	4b8d      	ldr	r3, [pc, #564]	; (8001ebc <HAL_ADC_ConfigChannel+0x484>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	0691      	lsls	r1, r2, #26
 8001c90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c92:	430a      	orrs	r2, r1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c9e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ca0:	e05c      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ca8:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_ADC_ConfigChannel+0x484>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	0691      	lsls	r1, r2, #26
 8001cb2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cc0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001cc2:	e04b      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	069b      	lsls	r3, r3, #26
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ce6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	069b      	lsls	r3, r3, #26
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d107      	bne.n	8001d0c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d0a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	069b      	lsls	r3, r3, #26
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d107      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d2e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	069b      	lsls	r3, r3, #26
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d10a      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d52:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001d54:	e001      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001d56:	bf00      	nop
 8001d58:	e000      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x324>
      break;
 8001d5a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x344>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_ADC_ConfigChannel+0x344>
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x346>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	f040 810b 	bne.w	8001f9a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d00f      	beq.n	8001dac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001daa:	e049      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	d91c      	bls.n	8001e08 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6999      	ldr	r1, [r3, #24]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b1b      	subs	r3, #27
 8001de0:	2207      	movs	r2, #7
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4019      	ands	r1, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6898      	ldr	r0, [r3, #8]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	3b1b      	subs	r3, #27
 8001dfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	619a      	str	r2, [r3, #24]
 8001e06:	e01b      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6959      	ldr	r1, [r3, #20]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	2207      	movs	r2, #7
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	4019      	ands	r1, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6898      	ldr	r0, [r3, #8]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	fa00 f203 	lsl.w	r2, r0, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e40:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <HAL_ADC_ConfigChannel+0x488>)
 8001e42:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	d105      	bne.n	8001e58 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d015      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001e5c:	2b11      	cmp	r3, #17
 8001e5e:	d105      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	f040 8092 	bne.w	8001f9a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 808b 	bne.w	8001f9a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8c:	d102      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x45c>
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <HAL_ADC_ConfigChannel+0x48c>)
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	e002      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x462>
 8001e94:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e98:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d10f      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x490>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d108      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x490>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e007      	b.n	8001eca <HAL_ADC_ConfigChannel+0x492>
 8001eba:	bf00      	nop
 8001ebc:	83fff000 	.word	0x83fff000
 8001ec0:	50000300 	.word	0x50000300
 8001ec4:	50000100 	.word	0x50000100
 8001ec8:	2300      	movs	r3, #0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d150      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ece:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d010      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x4b8>
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x4b8>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x4ba>
 8001ef0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d13c      	bne.n	8001f70 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d11d      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x502>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f06:	d118      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_ADC_ConfigChannel+0x57c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <HAL_ADC_ConfigChannel+0x580>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	0c9a      	lsrs	r2, r3, #18
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f2a:	e002      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f9      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f38:	e02e      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b11      	cmp	r3, #17
 8001f40:	d10b      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x522>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f4a:	d106      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f56:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f58:	e01e      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b12      	cmp	r3, #18
 8001f60:	d11a      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f6c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f6e:	e013      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f82:	e00a      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f96:	e000      	b.n	8001f9a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f98:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001fa2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	376c      	adds	r7, #108	; 0x6c
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000014 	.word	0x20000014
 8001fb8:	431bde83 	.word	0x431bde83

08001fbc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d126      	bne.n	8002024 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d115      	bne.n	800201c <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d111      	bne.n	800201c <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d105      	bne.n	800201c <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002014:	f043 0201 	orr.w	r2, r3, #1
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f7fe ff71 	bl	8000f04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002022:	e004      	b.n	800202e <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
}
 800202e:	bf00      	nop
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff fa77 	bl	8001538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	f043 0204 	orr.w	r2, r3, #4
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002078:	68f8      	ldr	r0, [r7, #12]
 800207a:	f7ff fa67 	bl	800154c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
	...

08002088 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d108      	bne.n	80020b4 <ADC_Enable+0x2c>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <ADC_Enable+0x2c>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e000      	b.n	80020b6 <ADC_Enable+0x2e>
 80020b4:	2300      	movs	r3, #0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d13c      	bne.n	8002134 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <ADC_Enable+0xb8>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00d      	beq.n	80020e4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	f043 0210 	orr.w	r2, r3, #16
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e028      	b.n	8002136 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80020f4:	f7ff fa14 	bl	8001520 <HAL_GetTick>
 80020f8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020fa:	e014      	b.n	8002126 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020fc:	f7ff fa10 	bl	8001520 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d90d      	bls.n	8002126 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f043 0210 	orr.w	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e007      	b.n	8002136 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d1e3      	bne.n	80020fc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	8000003f 	.word	0x8000003f

08002144 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d108      	bne.n	8002170 <ADC_Disable+0x2c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <ADC_Disable+0x2c>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <ADC_Disable+0x2e>
 8002170:	2300      	movs	r3, #0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d040      	beq.n	80021f8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030d 	and.w	r3, r3, #13
 8002180:	2b01      	cmp	r3, #1
 8002182:	d10f      	bne.n	80021a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0202 	orr.w	r2, r2, #2
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2203      	movs	r2, #3
 800219a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800219c:	f7ff f9c0 	bl	8001520 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021a2:	e022      	b.n	80021ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f043 0210 	orr.w	r2, r3, #16
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	f043 0201 	orr.w	r2, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e01c      	b.n	80021fa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021c0:	f7ff f9ae 	bl	8001520 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d90d      	bls.n	80021ea <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e007      	b.n	80021fa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d0e3      	beq.n	80021c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0ed      	b.n	80023f0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d102      	bne.n	8002226 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff f841 	bl	80012a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 0202 	bic.w	r2, r2, #2
 8002234:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002236:	f7ff f973 	bl	8001520 <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800223c:	e012      	b.n	8002264 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800223e:	f7ff f96f 	bl	8001520 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b0a      	cmp	r3, #10
 800224a:	d90b      	bls.n	8002264 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2205      	movs	r2, #5
 800225c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0c5      	b.n	80023f0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1e5      	bne.n	800223e <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0201 	orr.w	r2, r2, #1
 8002280:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002282:	f7ff f94d 	bl	8001520 <HAL_GetTick>
 8002286:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002288:	e012      	b.n	80022b0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800228a:	f7ff f949 	bl	8001520 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b0a      	cmp	r3, #10
 8002296:	d90b      	bls.n	80022b0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2205      	movs	r2, #5
 80022a8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e09f      	b.n	80023f0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0e5      	beq.n	800228a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	7e1b      	ldrb	r3, [r3, #24]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	e007      	b.n	80022e8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7e5b      	ldrb	r3, [r3, #25]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d108      	bne.n	8002302 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	e007      	b.n	8002312 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002310:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	7e9b      	ldrb	r3, [r3, #26]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d108      	bne.n	800232c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f042 0220 	orr.w	r2, r2, #32
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	e007      	b.n	800233c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f022 0220 	bic.w	r2, r2, #32
 800233a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7edb      	ldrb	r3, [r3, #27]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d108      	bne.n	8002356 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f022 0210 	bic.w	r2, r2, #16
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e007      	b.n	8002366 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0210 	orr.w	r2, r2, #16
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7f1b      	ldrb	r3, [r3, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 0208 	orr.w	r2, r2, #8
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e007      	b.n	8002390 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0208 	bic.w	r2, r2, #8
 800238e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7f5b      	ldrb	r3, [r3, #29]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0204 	orr.w	r2, r2, #4
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e007      	b.n	80023ba <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0204 	bic.w	r2, r2, #4
 80023b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	ea42 0103 	orr.w	r1, r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	1e5a      	subs	r2, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d003      	beq.n	800241e <HAL_CAN_ConfigFilter+0x26>
 8002416:	7cfb      	ldrb	r3, [r7, #19]
 8002418:	2b02      	cmp	r3, #2
 800241a:	f040 80aa 	bne.w	8002572 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002424:	f043 0201 	orr.w	r2, r3, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2201      	movs	r2, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43db      	mvns	r3, r3
 8002448:	401a      	ands	r2, r3
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d123      	bne.n	80024a0 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800247a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3248      	adds	r2, #72	; 0x48
 8002480:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002494:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002496:	6979      	ldr	r1, [r7, #20]
 8002498:	3348      	adds	r3, #72	; 0x48
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	440b      	add	r3, r1
 800249e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d122      	bne.n	80024ee <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	431a      	orrs	r2, r3
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3248      	adds	r2, #72	; 0x48
 80024ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024e4:	6979      	ldr	r1, [r7, #20]
 80024e6:	3348      	adds	r3, #72	; 0x48
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	440b      	add	r3, r1
 80024ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	401a      	ands	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002508:	e007      	b.n	800251a <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d109      	bne.n	8002536 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	43db      	mvns	r3, r3
 800252c:	401a      	ands	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002534:	e007      	b.n	8002546 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	431a      	orrs	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	431a      	orrs	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002564:	f023 0201 	bic.w	r2, r3, #1
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e006      	b.n	8002580 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
  }
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d12e      	bne.n	80025fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025b8:	f7fe ffb2 	bl	8001520 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025be:	e012      	b.n	80025e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7fe ffae 	bl	8001520 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d90b      	bls.n	80025e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e012      	b.n	800260c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1e5      	bne.n	80025c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	e006      	b.n	800260c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002602:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002628:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002632:	7ffb      	ldrb	r3, [r7, #31]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d003      	beq.n	8002640 <HAL_CAN_AddTxMessage+0x2c>
 8002638:	7ffb      	ldrb	r3, [r7, #31]
 800263a:	2b02      	cmp	r3, #2
 800263c:	f040 80b8 	bne.w	80027b0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10a      	bne.n	8002660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a0 	beq.w	80027a0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	0e1b      	lsrs	r3, r3, #24
 8002664:	f003 0303 	and.w	r3, r3, #3
 8002668:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d907      	bls.n	8002680 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e09e      	b.n	80027be <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002680:	2201      	movs	r2, #1
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	409a      	lsls	r2, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	6809      	ldr	r1, [r1, #0]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3318      	adds	r3, #24
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	440b      	add	r3, r1
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e00f      	b.n	80026ce <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026b8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026c2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	3318      	adds	r3, #24
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	440b      	add	r3, r1
 80026cc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3318      	adds	r3, #24
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	440b      	add	r3, r1
 80026de:	3304      	adds	r3, #4
 80026e0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	7d1b      	ldrb	r3, [r3, #20]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d111      	bne.n	800270e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3318      	adds	r3, #24
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	4413      	add	r3, r2
 80026f6:	3304      	adds	r3, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6811      	ldr	r1, [r2, #0]
 80026fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3318      	adds	r3, #24
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	440b      	add	r3, r1
 800270a:	3304      	adds	r3, #4
 800270c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3307      	adds	r3, #7
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	061a      	lsls	r2, r3, #24
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3306      	adds	r3, #6
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	041b      	lsls	r3, r3, #16
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3305      	adds	r3, #5
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	4313      	orrs	r3, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	3204      	adds	r2, #4
 800272e:	7812      	ldrb	r2, [r2, #0]
 8002730:	4610      	mov	r0, r2
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	6811      	ldr	r1, [r2, #0]
 8002736:	ea43 0200 	orr.w	r2, r3, r0
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	440b      	add	r3, r1
 8002740:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002744:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3303      	adds	r3, #3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	061a      	lsls	r2, r3, #24
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3302      	adds	r3, #2
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3301      	adds	r3, #1
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	4313      	orrs	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	4610      	mov	r0, r2
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	6811      	ldr	r1, [r2, #0]
 800276c:	ea43 0200 	orr.w	r2, r3, r0
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	440b      	add	r3, r1
 8002776:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800277a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	3318      	adds	r3, #24
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	4413      	add	r3, r2
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	3318      	adds	r3, #24
 8002796:	011b      	lsls	r3, r3, #4
 8002798:	440b      	add	r3, r1
 800279a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800279c:	2300      	movs	r3, #0
 800279e:	e00e      	b.n	80027be <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e006      	b.n	80027be <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
  }
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3724      	adds	r7, #36	; 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b085      	sub	sp, #20
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027de:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d002      	beq.n	80027ec <HAL_CAN_IsTxMessagePending+0x22>
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d10b      	bne.n	8002804 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	069b      	lsls	r3, r3, #26
 80027f6:	401a      	ands	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	069b      	lsls	r3, r3, #26
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8002800:	2301      	movs	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8002804:	68fb      	ldr	r3, [r7, #12]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002812:	b480      	push	{r7}
 8002814:	b087      	sub	sp, #28
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002826:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <HAL_CAN_GetRxMessage+0x24>
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b02      	cmp	r3, #2
 8002832:	f040 80f3 	bne.w	8002a1c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10e      	bne.n	800285a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d116      	bne.n	8002878 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0e7      	b.n	8002a2a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d107      	bne.n	8002878 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0d8      	b.n	8002a2a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	331b      	adds	r3, #27
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	4413      	add	r3, r2
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0204 	and.w	r2, r3, #4
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10c      	bne.n	80028b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	331b      	adds	r3, #27
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	4413      	add	r3, r2
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	0d5b      	lsrs	r3, r3, #21
 80028a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e00b      	b.n	80028c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	331b      	adds	r3, #27
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	08db      	lsrs	r3, r3, #3
 80028c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	331b      	adds	r3, #27
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	4413      	add	r3, r2
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0202 	and.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	331b      	adds	r3, #27
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 020f 	and.w	r2, r3, #15
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	331b      	adds	r3, #27
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	4413      	add	r3, r2
 8002902:	3304      	adds	r3, #4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	b2da      	uxtb	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	331b      	adds	r3, #27
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0c1b      	lsrs	r3, r3, #16
 8002920:	b29a      	uxth	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	4413      	add	r3, r2
 8002930:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	b2da      	uxtb	r2, r3
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	4413      	add	r3, r2
 8002946:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	0a1a      	lsrs	r2, r3, #8
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	3301      	adds	r3, #1
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	4413      	add	r3, r2
 8002960:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0c1a      	lsrs	r2, r3, #16
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	3302      	adds	r3, #2
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e1a      	lsrs	r2, r3, #24
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3303      	adds	r3, #3
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	4413      	add	r3, r2
 8002994:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	3304      	adds	r3, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	011b      	lsls	r3, r3, #4
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	0a1a      	lsrs	r2, r3, #8
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	3305      	adds	r3, #5
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0c1a      	lsrs	r2, r3, #16
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	3306      	adds	r3, #6
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	4413      	add	r3, r2
 80029e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0e1a      	lsrs	r2, r3, #24
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3307      	adds	r3, #7
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d108      	bne.n	8002a08 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0220 	orr.w	r2, r2, #32
 8002a04:	60da      	str	r2, [r3, #12]
 8002a06:	e007      	b.n	8002a18 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0220 	orr.w	r2, r2, #32
 8002a16:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e006      	b.n	8002a2a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
  }
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b085      	sub	sp, #20
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
 8002a3e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d002      	beq.n	8002a58 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002a52:	7afb      	ldrb	r3, [r7, #11]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d10f      	bne.n	8002a78 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f003 0303 	and.w	r3, r3, #3
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e005      	b.n	8002a78 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002a78:	68fb      	ldr	r3, [r7, #12]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4907      	ldr	r1, [pc, #28]	; (8002b24 <__NVIC_EnableIRQ+0x38>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	; (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	; (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	; 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ff8e 	bl	8002b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff29 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	4603      	mov	r3, r0
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c50:	f7ff ff3e 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	68b9      	ldr	r1, [r7, #8]
 8002c5a:	6978      	ldr	r0, [r7, #20]
 8002c5c:	f7ff ff8e 	bl	8002b7c <NVIC_EncodePriority>
 8002c60:	4602      	mov	r2, r0
 8002c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff ff5d 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c6e:	bf00      	nop
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ff31 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff ffa2 	bl	8002be4 <SysTick_Config>
 8002ca0:	4603      	mov	r3, r0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e037      	b.n	8002d30 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002cd6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002cda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f940 	bl	8002f98 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}  
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_DMA_Start_IT+0x20>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e04a      	b.n	8002dee <HAL_DMA_Start_IT+0xb6>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d13a      	bne.n	8002de0 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8d4 	bl	8002f3c <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d008      	beq.n	8002dae <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 020e 	orr.w	r2, r2, #14
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e00f      	b.n	8002dce <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 020a 	orr.w	r2, r2, #10
 8002dbc:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0204 	bic.w	r2, r2, #4
 8002dcc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 0201 	orr.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	e005      	b.n	8002dec <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002de8:	2302      	movs	r3, #2
 8002dea:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002dec:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2204      	movs	r2, #4
 8002e14:	409a      	lsls	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d024      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x72>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f003 0304 	and.w	r3, r3, #4
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d01f      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d107      	bne.n	8002e46 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 0204 	bic.w	r2, r2, #4
 8002e44:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4e:	2104      	movs	r1, #4
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d06a      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e66:	e065      	b.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4013      	ands	r3, r2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d02c      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdc>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d027      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 020a 	bic.w	r2, r2, #10
 8002e9e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb0:	2102      	movs	r1, #2
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d035      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002ed0:	e030      	b.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d028      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 020e 	bic.w	r2, r2, #14
 8002efa:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f04:	2101      	movs	r1, #1
 8002f06:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d004      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
    }
  }
}  
 8002f32:	e7ff      	b.n	8002f34 <HAL_DMA_IRQHandler+0x13e>
 8002f34:	bf00      	nop
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f52:	2101      	movs	r1, #1
 8002f54:	fa01 f202 	lsl.w	r2, r1, r2
 8002f58:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d108      	bne.n	8002f7c <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f7a:	e007      	b.n	8002f8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <DMA_CalcBaseAndBitshift+0x34>)
 8002fa8:	4413      	add	r3, r2
 8002faa:	4a09      	ldr	r2, [pc, #36]	; (8002fd0 <DMA_CalcBaseAndBitshift+0x38>)
 8002fac:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	009a      	lsls	r2, r3, #2
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a06      	ldr	r2, [pc, #24]	; (8002fd4 <DMA_CalcBaseAndBitshift+0x3c>)
 8002fbc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	bffdfff8 	.word	0xbffdfff8
 8002fd0:	cccccccd 	.word	0xcccccccd
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fe6:	e14e      	b.n	8003286 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	2101      	movs	r1, #1
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 8140 	beq.w	8003280 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d00b      	beq.n	8003020 <HAL_GPIO_Init+0x48>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b02      	cmp	r3, #2
 800300e:	d007      	beq.n	8003020 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003014:	2b11      	cmp	r3, #17
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b12      	cmp	r3, #18
 800301e:	d130      	bne.n	8003082 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003056:	2201      	movs	r2, #1
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 0201 	and.w	r2, r3, #1
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	4013      	ands	r3, r2
 8003098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d003      	beq.n	80030c2 <HAL_GPIO_Init+0xea>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b12      	cmp	r3, #18
 80030c0:	d123      	bne.n	800310a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	08da      	lsrs	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3208      	adds	r2, #8
 80030ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f003 0307 	and.w	r3, r3, #7
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	220f      	movs	r2, #15
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	08da      	lsrs	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3208      	adds	r2, #8
 8003104:	6939      	ldr	r1, [r7, #16]
 8003106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	2203      	movs	r2, #3
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0203 	and.w	r2, r3, #3
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 809a 	beq.w	8003280 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314c:	4b55      	ldr	r3, [pc, #340]	; (80032a4 <HAL_GPIO_Init+0x2cc>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	4a54      	ldr	r2, [pc, #336]	; (80032a4 <HAL_GPIO_Init+0x2cc>)
 8003152:	f043 0301 	orr.w	r3, r3, #1
 8003156:	6193      	str	r3, [r2, #24]
 8003158:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_GPIO_Init+0x2cc>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003164:	4a50      	ldr	r2, [pc, #320]	; (80032a8 <HAL_GPIO_Init+0x2d0>)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	220f      	movs	r2, #15
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800318e:	d013      	beq.n	80031b8 <HAL_GPIO_Init+0x1e0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a46      	ldr	r2, [pc, #280]	; (80032ac <HAL_GPIO_Init+0x2d4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00d      	beq.n	80031b4 <HAL_GPIO_Init+0x1dc>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a45      	ldr	r2, [pc, #276]	; (80032b0 <HAL_GPIO_Init+0x2d8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x1d8>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a44      	ldr	r2, [pc, #272]	; (80032b4 <HAL_GPIO_Init+0x2dc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_GPIO_Init+0x1d4>
 80031a8:	2303      	movs	r3, #3
 80031aa:	e006      	b.n	80031ba <HAL_GPIO_Init+0x1e2>
 80031ac:	2305      	movs	r3, #5
 80031ae:	e004      	b.n	80031ba <HAL_GPIO_Init+0x1e2>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e002      	b.n	80031ba <HAL_GPIO_Init+0x1e2>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_GPIO_Init+0x1e2>
 80031b8:	2300      	movs	r3, #0
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	f002 0203 	and.w	r2, r2, #3
 80031c0:	0092      	lsls	r2, r2, #2
 80031c2:	4093      	lsls	r3, r2
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031ca:	4937      	ldr	r1, [pc, #220]	; (80032a8 <HAL_GPIO_Init+0x2d0>)
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b37      	ldr	r3, [pc, #220]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031fc:	4a2e      	ldr	r2, [pc, #184]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	43db      	mvns	r3, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003226:	4a24      	ldr	r2, [pc, #144]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322c:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	43db      	mvns	r3, r3
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003250:	4a19      	ldr	r2, [pc, #100]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	43db      	mvns	r3, r3
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4013      	ands	r3, r2
 8003264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800327a:	4a0f      	ldr	r2, [pc, #60]	; (80032b8 <HAL_GPIO_Init+0x2e0>)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	3301      	adds	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	f47f aea9 	bne.w	8002fe8 <HAL_GPIO_Init+0x10>
  }
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40010000 	.word	0x40010000
 80032ac:	48000400 	.word	0x48000400
 80032b0:	48000800 	.word	0x48000800
 80032b4:	48000c00 	.word	0x48000c00
 80032b8:	40010400 	.word	0x40010400

080032bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	460b      	mov	r3, r1
 80032c6:	807b      	strh	r3, [r7, #2]
 80032c8:	4613      	mov	r3, r2
 80032ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032cc:	787b      	ldrb	r3, [r7, #1]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032d2:	887a      	ldrh	r2, [r7, #2]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032d8:	e002      	b.n	80032e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	1d3b      	adds	r3, r7, #4
 80032f6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d102      	bne.n	8003306 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f000 bef4 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 816a 	beq.w	80035ea <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003316:	4bb3      	ldr	r3, [pc, #716]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d00c      	beq.n	800333c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003322:	4bb0      	ldr	r3, [pc, #704]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d159      	bne.n	80033e2 <HAL_RCC_OscConfig+0xf6>
 800332e:	4bad      	ldr	r3, [pc, #692]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800333a:	d152      	bne.n	80033e2 <HAL_RCC_OscConfig+0xf6>
 800333c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003340:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003344:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003350:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003354:	fab3 f383 	clz	r3, r3
 8003358:	b2db      	uxtb	r3, r3
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	b2db      	uxtb	r3, r3
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d102      	bne.n	800336e <HAL_RCC_OscConfig+0x82>
 8003368:	4b9e      	ldr	r3, [pc, #632]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0xae>
 800336e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003372:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003376:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800337a:	fa93 f3a3 	rbit	r3, r3
 800337e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003382:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003386:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800338a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800338e:	fa93 f3a3 	rbit	r3, r3
 8003392:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003396:	4b93      	ldr	r3, [pc, #588]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800339e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80033a2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80033a6:	fa92 f2a2 	rbit	r2, r2
 80033aa:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80033ae:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f042 0220 	orr.w	r2, r2, #32
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f002 021f 	and.w	r2, r2, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 810c 	beq.w	80035e8 <HAL_RCC_OscConfig+0x2fc>
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f040 8106 	bne.w	80035e8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	f000 be86 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x110>
 80033ee:	4b7d      	ldr	r3, [pc, #500]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a7c      	ldr	r2, [pc, #496]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e030      	b.n	800345e <HAL_RCC_OscConfig+0x172>
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x134>
 8003406:	4b77      	ldr	r3, [pc, #476]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a76      	ldr	r2, [pc, #472]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b74      	ldr	r3, [pc, #464]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a73      	ldr	r2, [pc, #460]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01e      	b.n	800345e <HAL_RCC_OscConfig+0x172>
 8003420:	1d3b      	adds	r3, r7, #4
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342a:	d10c      	bne.n	8003446 <HAL_RCC_OscConfig+0x15a>
 800342c:	4b6d      	ldr	r3, [pc, #436]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a6c      	ldr	r2, [pc, #432]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a69      	ldr	r2, [pc, #420]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e00b      	b.n	800345e <HAL_RCC_OscConfig+0x172>
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a66      	ldr	r2, [pc, #408]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800344c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	4b64      	ldr	r3, [pc, #400]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a63      	ldr	r2, [pc, #396]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800345e:	4b61      	ldr	r3, [pc, #388]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f023 020f 	bic.w	r2, r3, #15
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	495d      	ldr	r1, [pc, #372]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800346e:	4313      	orrs	r3, r2
 8003470:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003472:	1d3b      	adds	r3, r7, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d059      	beq.n	8003530 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fe f850 	bl	8001520 <HAL_GetTick>
 8003480:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003484:	e00a      	b.n	800349c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003486:	f7fe f84b 	bl	8001520 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b64      	cmp	r3, #100	; 0x64
 8003494:	d902      	bls.n	800349c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	f000 be29 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>
 800349c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80034a8:	fa93 f3a3 	rbit	r3, r3
 80034ac:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80034b0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_OscConfig+0x1e2>
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	e015      	b.n	80034fa <HAL_RCC_OscConfig+0x20e>
 80034ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034d2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80034e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034e6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80034ea:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80034ee:	fa93 f3a3 	rbit	r3, r3
 80034f2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80034f6:	4b3b      	ldr	r3, [pc, #236]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034fe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003502:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003506:	fa92 f2a2 	rbit	r2, r2
 800350a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800350e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003512:	fab2 f282 	clz	r2, r2
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	f042 0220 	orr.w	r2, r2, #32
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	f002 021f 	and.w	r2, r2, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f202 	lsl.w	r2, r1, r2
 8003528:	4013      	ands	r3, r2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d0ab      	beq.n	8003486 <HAL_RCC_OscConfig+0x19a>
 800352e:	e05c      	b.n	80035ea <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fd fff6 	bl	8001520 <HAL_GetTick>
 8003534:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003538:	e00a      	b.n	8003550 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353a:	f7fd fff1 	bl	8001520 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d902      	bls.n	8003550 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	f000 bdcf 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>
 8003550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003554:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003564:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d102      	bne.n	8003582 <HAL_RCC_OscConfig+0x296>
 800357c:	4b19      	ldr	r3, [pc, #100]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x2c2>
 8003582:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003586:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800359a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800359e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80035aa:	4b0e      	ldr	r3, [pc, #56]	; (80035e4 <HAL_RCC_OscConfig+0x2f8>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80035b2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80035b6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80035ba:	fa92 f2a2 	rbit	r2, r2
 80035be:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80035c2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80035c6:	fab2 f282 	clz	r2, r2
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	f042 0220 	orr.w	r2, r2, #32
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	f002 021f 	and.w	r2, r2, #31
 80035d6:	2101      	movs	r1, #1
 80035d8:	fa01 f202 	lsl.w	r2, r1, r2
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ab      	bne.n	800353a <HAL_RCC_OscConfig+0x24e>
 80035e2:	e002      	b.n	80035ea <HAL_RCC_OscConfig+0x2fe>
 80035e4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	1d3b      	adds	r3, r7, #4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 816f 	beq.w	80038d8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80035fa:	4bd0      	ldr	r3, [pc, #832]	; (800393c <HAL_RCC_OscConfig+0x650>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f003 030c 	and.w	r3, r3, #12
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00b      	beq.n	800361e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003606:	4bcd      	ldr	r3, [pc, #820]	; (800393c <HAL_RCC_OscConfig+0x650>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b08      	cmp	r3, #8
 8003610:	d16c      	bne.n	80036ec <HAL_RCC_OscConfig+0x400>
 8003612:	4bca      	ldr	r3, [pc, #808]	; (800393c <HAL_RCC_OscConfig+0x650>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d166      	bne.n	80036ec <HAL_RCC_OscConfig+0x400>
 800361e:	2302      	movs	r3, #2
 8003620:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003628:	fa93 f3a3 	rbit	r3, r3
 800362c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003630:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003634:	fab3 f383 	clz	r3, r3
 8003638:	b2db      	uxtb	r3, r3
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0x362>
 8003648:	4bbc      	ldr	r3, [pc, #752]	; (800393c <HAL_RCC_OscConfig+0x650>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	e013      	b.n	8003676 <HAL_RCC_OscConfig+0x38a>
 800364e:	2302      	movs	r3, #2
 8003650:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003658:	fa93 f3a3 	rbit	r3, r3
 800365c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003660:	2302      	movs	r3, #2
 8003662:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003666:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800366a:	fa93 f3a3 	rbit	r3, r3
 800366e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003672:	4bb2      	ldr	r3, [pc, #712]	; (800393c <HAL_RCC_OscConfig+0x650>)
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	2202      	movs	r2, #2
 8003678:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800367c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003688:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800368c:	fab2 f282 	clz	r2, r2
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	f042 0220 	orr.w	r2, r2, #32
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	f002 021f 	and.w	r2, r2, #31
 800369c:	2101      	movs	r1, #1
 800369e:	fa01 f202 	lsl.w	r2, r1, r2
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d007      	beq.n	80036b8 <HAL_RCC_OscConfig+0x3cc>
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d002      	beq.n	80036b8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f000 bd1b 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b8:	4ba0      	ldr	r3, [pc, #640]	; (800393c <HAL_RCC_OscConfig+0x650>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c0:	1d3b      	adds	r3, r7, #4
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	21f8      	movs	r1, #248	; 0xf8
 80036c8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80036d0:	fa91 f1a1 	rbit	r1, r1
 80036d4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80036d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80036dc:	fab1 f181 	clz	r1, r1
 80036e0:	b2c9      	uxtb	r1, r1
 80036e2:	408b      	lsls	r3, r1
 80036e4:	4995      	ldr	r1, [pc, #596]	; (800393c <HAL_RCC_OscConfig+0x650>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ea:	e0f5      	b.n	80038d8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8085 	beq.w	8003802 <HAL_RCC_OscConfig+0x516>
 80036f8:	2301      	movs	r3, #1
 80036fa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800370a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003718:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	461a      	mov	r2, r3
 8003720:	2301      	movs	r3, #1
 8003722:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fd fefc 	bl	8001520 <HAL_GetTick>
 8003728:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800372e:	f7fd fef7 	bl	8001520 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d902      	bls.n	8003744 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	f000 bcd5 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>
 8003744:	2302      	movs	r3, #2
 8003746:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800374e:	fa93 f3a3 	rbit	r3, r3
 8003752:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003756:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	b2db      	uxtb	r3, r3
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b01      	cmp	r3, #1
 800376c:	d102      	bne.n	8003774 <HAL_RCC_OscConfig+0x488>
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <HAL_RCC_OscConfig+0x650>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	e013      	b.n	800379c <HAL_RCC_OscConfig+0x4b0>
 8003774:	2302      	movs	r3, #2
 8003776:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800378c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003798:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x650>)
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	2202      	movs	r2, #2
 800379e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80037a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80037a6:	fa92 f2a2 	rbit	r2, r2
 80037aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80037ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80037b2:	fab2 f282 	clz	r2, r2
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	f042 0220 	orr.w	r2, r2, #32
 80037bc:	b2d2      	uxtb	r2, r2
 80037be:	f002 021f 	and.w	r2, r2, #31
 80037c2:	2101      	movs	r1, #1
 80037c4:	fa01 f202 	lsl.w	r2, r1, r2
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0af      	beq.n	800372e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b5b      	ldr	r3, [pc, #364]	; (800393c <HAL_RCC_OscConfig+0x650>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037d6:	1d3b      	adds	r3, r7, #4
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	21f8      	movs	r1, #248	; 0xf8
 80037de:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80037e6:	fa91 f1a1 	rbit	r1, r1
 80037ea:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80037ee:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80037f2:	fab1 f181 	clz	r1, r1
 80037f6:	b2c9      	uxtb	r1, r1
 80037f8:	408b      	lsls	r3, r1
 80037fa:	4950      	ldr	r1, [pc, #320]	; (800393c <HAL_RCC_OscConfig+0x650>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	600b      	str	r3, [r1, #0]
 8003800:	e06a      	b.n	80038d8 <HAL_RCC_OscConfig+0x5ec>
 8003802:	2301      	movs	r3, #1
 8003804:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003808:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003814:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003822:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	461a      	mov	r2, r3
 800382a:	2300      	movs	r3, #0
 800382c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fd fe77 	bl	8001520 <HAL_GetTick>
 8003832:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003838:	f7fd fe72 	bl	8001520 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d902      	bls.n	800384e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	f000 bc50 	b.w	80040ee <HAL_RCC_OscConfig+0xe02>
 800384e:	2302      	movs	r3, #2
 8003850:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003854:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003860:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003864:	fab3 f383 	clz	r3, r3
 8003868:	b2db      	uxtb	r3, r3
 800386a:	095b      	lsrs	r3, r3, #5
 800386c:	b2db      	uxtb	r3, r3
 800386e:	f043 0301 	orr.w	r3, r3, #1
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <HAL_RCC_OscConfig+0x592>
 8003878:	4b30      	ldr	r3, [pc, #192]	; (800393c <HAL_RCC_OscConfig+0x650>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	e013      	b.n	80038a6 <HAL_RCC_OscConfig+0x5ba>
 800387e:	2302      	movs	r3, #2
 8003880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003890:	2302      	movs	r3, #2
 8003892:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003896:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800389a:	fa93 f3a3 	rbit	r3, r3
 800389e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80038a2:	4b26      	ldr	r3, [pc, #152]	; (800393c <HAL_RCC_OscConfig+0x650>)
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	2202      	movs	r2, #2
 80038a8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80038ac:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80038b0:	fa92 f2a2 	rbit	r2, r2
 80038b4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80038b8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80038bc:	fab2 f282 	clz	r2, r2
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	f042 0220 	orr.w	r2, r2, #32
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	f002 021f 	and.w	r2, r2, #31
 80038cc:	2101      	movs	r1, #1
 80038ce:	fa01 f202 	lsl.w	r2, r1, r2
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d1af      	bne.n	8003838 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d8:	1d3b      	adds	r3, r7, #4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80da 	beq.w	8003a9c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d069      	beq.n	80039c6 <HAL_RCC_OscConfig+0x6da>
 80038f2:	2301      	movs	r3, #1
 80038f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003904:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	b2db      	uxtb	r3, r3
 800390e:	461a      	mov	r2, r3
 8003910:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_RCC_OscConfig+0x654>)
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	461a      	mov	r2, r3
 8003918:	2301      	movs	r3, #1
 800391a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fd fe00 	bl	8001520 <HAL_GetTick>
 8003920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003924:	e00e      	b.n	8003944 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003926:	f7fd fdfb 	bl	8001520 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d906      	bls.n	8003944 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e3d9      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	10908120 	.word	0x10908120
 8003944:	2302      	movs	r3, #2
 8003946:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800394a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800394e:	fa93 f3a3 	rbit	r3, r3
 8003952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003956:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800395a:	2202      	movs	r2, #2
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	fa93 f2a3 	rbit	r2, r3
 8003968:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	fa93 f2a3 	rbit	r2, r3
 8003980:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003984:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	4ba5      	ldr	r3, [pc, #660]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800398a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800398e:	2102      	movs	r1, #2
 8003990:	6019      	str	r1, [r3, #0]
 8003992:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	fa93 f1a3 	rbit	r1, r3
 800399c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039a0:	6019      	str	r1, [r3, #0]
  return result;
 80039a2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	fab3 f383 	clz	r3, r3
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2101      	movs	r1, #1
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0b0      	beq.n	8003926 <HAL_RCC_OscConfig+0x63a>
 80039c4:	e06a      	b.n	8003a9c <HAL_RCC_OscConfig+0x7b0>
 80039c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039dc:	601a      	str	r2, [r3, #0]
  return result;
 80039de:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039e2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	fab3 f383 	clz	r3, r3
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <HAL_RCC_OscConfig+0x934>)
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	461a      	mov	r2, r3
 80039f4:	2300      	movs	r3, #0
 80039f6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f8:	f7fd fd92 	bl	8001520 <HAL_GetTick>
 80039fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a00:	e009      	b.n	8003a16 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a02:	f7fd fd8d 	bl	8001520 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e36b      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 8003a16:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a32:	2202      	movs	r2, #2
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	fa93 f2a3 	rbit	r2, r3
 8003a58:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003a5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5e:	4b6f      	ldr	r3, [pc, #444]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a66:	2102      	movs	r1, #2
 8003a68:	6019      	str	r1, [r3, #0]
 8003a6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	fa93 f1a3 	rbit	r1, r3
 8003a74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a78:	6019      	str	r1, [r3, #0]
  return result;
 8003a7a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	f003 031f 	and.w	r3, r3, #31
 8003a90:	2101      	movs	r1, #1
 8003a92:	fa01 f303 	lsl.w	r3, r1, r3
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d1b2      	bne.n	8003a02 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a9c:	1d3b      	adds	r3, r7, #4
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8158 	beq.w	8003d5c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ab2:	4b5a      	ldr	r3, [pc, #360]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d112      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003abe:	4b57      	ldr	r3, [pc, #348]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	4a56      	ldr	r2, [pc, #344]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	61d3      	str	r3, [r2, #28]
 8003aca:	4b54      	ldr	r3, [pc, #336]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003ad2:	f107 0308 	add.w	r3, r7, #8
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	f107 0308 	add.w	r3, r7, #8
 8003adc:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	4b4f      	ldr	r3, [pc, #316]	; (8003c24 <HAL_RCC_OscConfig+0x938>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d11a      	bne.n	8003b26 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af0:	4b4c      	ldr	r3, [pc, #304]	; (8003c24 <HAL_RCC_OscConfig+0x938>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <HAL_RCC_OscConfig+0x938>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003afc:	f7fd fd10 	bl	8001520 <HAL_GetTick>
 8003b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b04:	e009      	b.n	8003b1a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b06:	f7fd fd0b 	bl	8001520 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e2e9      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1a:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x938>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0ef      	beq.n	8003b06 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d106      	bne.n	8003b3e <HAL_RCC_OscConfig+0x852>
 8003b30:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a39      	ldr	r2, [pc, #228]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b36:	f043 0301 	orr.w	r3, r3, #1
 8003b3a:	6213      	str	r3, [r2, #32]
 8003b3c:	e02f      	b.n	8003b9e <HAL_RCC_OscConfig+0x8b2>
 8003b3e:	1d3b      	adds	r3, r7, #4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_OscConfig+0x876>
 8003b48:	4b34      	ldr	r3, [pc, #208]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	4a33      	ldr	r2, [pc, #204]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b4e:	f023 0301 	bic.w	r3, r3, #1
 8003b52:	6213      	str	r3, [r2, #32]
 8003b54:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4a30      	ldr	r2, [pc, #192]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b5a:	f023 0304 	bic.w	r3, r3, #4
 8003b5e:	6213      	str	r3, [r2, #32]
 8003b60:	e01d      	b.n	8003b9e <HAL_RCC_OscConfig+0x8b2>
 8003b62:	1d3b      	adds	r3, r7, #4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b05      	cmp	r3, #5
 8003b6a:	d10c      	bne.n	8003b86 <HAL_RCC_OscConfig+0x89a>
 8003b6c:	4b2b      	ldr	r3, [pc, #172]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a2a      	ldr	r2, [pc, #168]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b7e:	f043 0301 	orr.w	r3, r3, #1
 8003b82:	6213      	str	r3, [r2, #32]
 8003b84:	e00b      	b.n	8003b9e <HAL_RCC_OscConfig+0x8b2>
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	4a24      	ldr	r2, [pc, #144]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b8c:	f023 0301 	bic.w	r3, r3, #1
 8003b90:	6213      	str	r3, [r2, #32]
 8003b92:	4b22      	ldr	r3, [pc, #136]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003b98:	f023 0304 	bic.w	r3, r3, #4
 8003b9c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b9e:	1d3b      	adds	r3, r7, #4
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06b      	beq.n	8003c80 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fcba 	bl	8001520 <HAL_GetTick>
 8003bac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb0:	e00b      	b.n	8003bca <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb2:	f7fd fcb5 	bl	8001520 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e291      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 8003bca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bce:	2202      	movs	r2, #2
 8003bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	fa93 f2a3 	rbit	r2, r3
 8003bdc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003be6:	2202      	movs	r2, #2
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	fa93 f2a3 	rbit	r2, r3
 8003bf4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bf8:	601a      	str	r2, [r3, #0]
  return result;
 8003bfa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003bfe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c00:	fab3 f383 	clz	r3, r3
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	f043 0302 	orr.w	r3, r3, #2
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d109      	bne.n	8003c28 <HAL_RCC_OscConfig+0x93c>
 8003c14:	4b01      	ldr	r3, [pc, #4]	; (8003c1c <HAL_RCC_OscConfig+0x930>)
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x958>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	10908120 	.word	0x10908120
 8003c24:	40007000 	.word	0x40007000
 8003c28:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	fa93 f2a3 	rbit	r2, r3
 8003c3a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	4bbb      	ldr	r3, [pc, #748]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c48:	2102      	movs	r1, #2
 8003c4a:	6011      	str	r1, [r2, #0]
 8003c4c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	fa92 f1a2 	rbit	r1, r2
 8003c56:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c5a:	6011      	str	r1, [r2, #0]
  return result;
 8003c5c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	fab2 f282 	clz	r2, r2
 8003c66:	b2d2      	uxtb	r2, r2
 8003c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	f002 021f 	and.w	r2, r2, #31
 8003c72:	2101      	movs	r1, #1
 8003c74:	fa01 f202 	lsl.w	r2, r1, r2
 8003c78:	4013      	ands	r3, r2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d099      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x8c6>
 8003c7e:	e063      	b.n	8003d48 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fd fc4e 	bl	8001520 <HAL_GetTick>
 8003c84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c88:	e00b      	b.n	8003ca2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8a:	f7fd fc49 	bl	8001520 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e225      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 8003ca2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003caa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003cd0:	601a      	str	r2, [r3, #0]
  return result;
 8003cd2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003cd6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd8:	fab3 f383 	clz	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f043 0302 	orr.w	r3, r3, #2
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d102      	bne.n	8003cf2 <HAL_RCC_OscConfig+0xa06>
 8003cec:	4b90      	ldr	r3, [pc, #576]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	e00d      	b.n	8003d0e <HAL_RCC_OscConfig+0xa22>
 8003cf2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cfa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	fa93 f2a3 	rbit	r2, r3
 8003d04:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4b89      	ldr	r3, [pc, #548]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d12:	2102      	movs	r1, #2
 8003d14:	6011      	str	r1, [r2, #0]
 8003d16:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	fa92 f1a2 	rbit	r1, r2
 8003d20:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d24:	6011      	str	r1, [r2, #0]
  return result;
 8003d26:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	fab2 f282 	clz	r2, r2
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f002 021f 	and.w	r2, r2, #31
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003d42:	4013      	ands	r3, r2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1a0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d48:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b77      	ldr	r3, [pc, #476]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	4a76      	ldr	r2, [pc, #472]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 81c2 	beq.w	80040ec <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d68:	4b71      	ldr	r3, [pc, #452]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 030c 	and.w	r3, r3, #12
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	f000 819c 	beq.w	80040ae <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	f040 8114 	bne.w	8003faa <HAL_RCC_OscConfig+0xcbe>
 8003d82:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d86:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d9a:	601a      	str	r2, [r3, #0]
  return result;
 8003d9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003da0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da2:	fab3 f383 	clz	r3, r3
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	461a      	mov	r2, r3
 8003db4:	2300      	movs	r3, #0
 8003db6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7fd fbb2 	bl	8001520 <HAL_GetTick>
 8003dbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd fbad 	bl	8001520 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e18b      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 8003dd6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	fa93 f2a3 	rbit	r2, r3
 8003dea:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003dee:	601a      	str	r2, [r3, #0]
  return result;
 8003df0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003df4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df6:	fab3 f383 	clz	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f043 0301 	orr.w	r3, r3, #1
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_OscConfig+0xb24>
 8003e0a:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	e01b      	b.n	8003e48 <HAL_RCC_OscConfig+0xb5c>
 8003e10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	fa93 f2a3 	rbit	r2, r3
 8003e24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	fa93 f2a3 	rbit	r2, r3
 8003e3e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	4b3a      	ldr	r3, [pc, #232]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e4c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e50:	6011      	str	r1, [r2, #0]
 8003e52:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	fa92 f1a2 	rbit	r1, r2
 8003e5c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e60:	6011      	str	r1, [r2, #0]
  return result;
 8003e62:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	fab2 f282 	clz	r2, r2
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	f042 0220 	orr.w	r2, r2, #32
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	f002 021f 	and.w	r2, r2, #31
 8003e78:	2101      	movs	r1, #1
 8003e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7e:	4013      	ands	r3, r2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d19e      	bne.n	8003dc2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e84:	4b2a      	ldr	r3, [pc, #168]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e8c:	1d3b      	adds	r3, r7, #4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e92:	1d3b      	adds	r3, r7, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	430b      	orrs	r3, r1
 8003e9a:	4925      	ldr	r1, [pc, #148]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ea4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	fa93 f2a3 	rbit	r2, r3
 8003eb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003eb8:	601a      	str	r2, [r3, #0]
  return result;
 8003eba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ebe:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ec0:	fab3 f383 	clz	r3, r3
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003eca:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed6:	f7fd fb23 	bl	8001520 <HAL_GetTick>
 8003eda:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ede:	e009      	b.n	8003ef4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fd fb1e 	bl	8001520 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0fc      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 8003ef4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003ef8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	fa93 f2a3 	rbit	r2, r3
 8003f08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f0c:	601a      	str	r2, [r3, #0]
  return result;
 8003f0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f14:	fab3 f383 	clz	r3, r3
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <HAL_RCC_OscConfig+0xc48>
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <HAL_RCC_OscConfig+0xc44>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	e01e      	b.n	8003f6c <HAL_RCC_OscConfig+0xc80>
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f3e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	fa93 f2a3 	rbit	r2, r3
 8003f48:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	fa93 f2a3 	rbit	r2, r3
 8003f62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	4b63      	ldr	r3, [pc, #396]	; (80040f8 <HAL_RCC_OscConfig+0xe0c>)
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f74:	6011      	str	r1, [r2, #0]
 8003f76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	fa92 f1a2 	rbit	r1, r2
 8003f80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f84:	6011      	str	r1, [r2, #0]
  return result;
 8003f86:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fab2 f282 	clz	r2, r2
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	f042 0220 	orr.w	r2, r2, #32
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	f002 021f 	and.w	r2, r2, #31
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d09b      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xbf4>
 8003fa8:	e0a0      	b.n	80040ec <HAL_RCC_OscConfig+0xe00>
 8003faa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	fa93 f2a3 	rbit	r2, r3
 8003fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc2:	601a      	str	r2, [r3, #0]
  return result;
 8003fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003fc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fa9e 	bl	8001520 <HAL_GetTick>
 8003fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe8:	e009      	b.n	8003ffe <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fd fa99 	bl	8001520 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e077      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
 8003ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004002:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	fa93 f2a3 	rbit	r2, r3
 8004012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004016:	601a      	str	r2, [r3, #0]
  return result;
 8004018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800401c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d102      	bne.n	8004038 <HAL_RCC_OscConfig+0xd4c>
 8004032:	4b31      	ldr	r3, [pc, #196]	; (80040f8 <HAL_RCC_OscConfig+0xe0c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	e01b      	b.n	8004070 <HAL_RCC_OscConfig+0xd84>
 8004038:	f107 0320 	add.w	r3, r7, #32
 800403c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004040:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	f107 0320 	add.w	r3, r7, #32
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	fa93 f2a3 	rbit	r2, r3
 800404c:	f107 031c 	add.w	r3, r7, #28
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	f107 0318 	add.w	r3, r7, #24
 8004056:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f107 0318 	add.w	r3, r7, #24
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	fa93 f2a3 	rbit	r2, r3
 8004066:	f107 0314 	add.w	r3, r7, #20
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	4b22      	ldr	r3, [pc, #136]	; (80040f8 <HAL_RCC_OscConfig+0xe0c>)
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	f107 0210 	add.w	r2, r7, #16
 8004074:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004078:	6011      	str	r1, [r2, #0]
 800407a:	f107 0210 	add.w	r2, r7, #16
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	fa92 f1a2 	rbit	r1, r2
 8004084:	f107 020c 	add.w	r2, r7, #12
 8004088:	6011      	str	r1, [r2, #0]
  return result;
 800408a:	f107 020c 	add.w	r2, r7, #12
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	fab2 f282 	clz	r2, r2
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	f042 0220 	orr.w	r2, r2, #32
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	f002 021f 	and.w	r2, r2, #31
 80040a0:	2101      	movs	r1, #1
 80040a2:	fa01 f202 	lsl.w	r2, r1, r2
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d19e      	bne.n	8003fea <HAL_RCC_OscConfig+0xcfe>
 80040ac:	e01e      	b.n	80040ec <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ae:	1d3b      	adds	r3, r7, #4
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e018      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040bc:	4b0e      	ldr	r3, [pc, #56]	; (80040f8 <HAL_RCC_OscConfig+0xe0c>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040c4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d108      	bne.n	80040e8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80040d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80040da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40021000 	.word	0x40021000

080040fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b09e      	sub	sp, #120	; 0x78
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e162      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004114:	4b90      	ldr	r3, [pc, #576]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d910      	bls.n	8004144 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	4b8d      	ldr	r3, [pc, #564]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 0207 	bic.w	r2, r3, #7
 800412a:	498b      	ldr	r1, [pc, #556]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	4313      	orrs	r3, r2
 8004130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b89      	ldr	r3, [pc, #548]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e14a      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004150:	4b82      	ldr	r3, [pc, #520]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	497f      	ldr	r1, [pc, #508]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800415e:	4313      	orrs	r3, r2
 8004160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80dc 	beq.w	8004328 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d13c      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xf6>
 8004178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800417c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004180:	fa93 f3a3 	rbit	r3, r3
 8004184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004188:	fab3 f383 	clz	r3, r3
 800418c:	b2db      	uxtb	r3, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b01      	cmp	r3, #1
 800419a:	d102      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xa6>
 800419c:	4b6f      	ldr	r3, [pc, #444]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	e00f      	b.n	80041c2 <HAL_RCC_ClockConfig+0xc6>
 80041a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041aa:	fa93 f3a3 	rbit	r3, r3
 80041ae:	667b      	str	r3, [r7, #100]	; 0x64
 80041b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041b4:	663b      	str	r3, [r7, #96]	; 0x60
 80041b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041b8:	fa93 f3a3 	rbit	r3, r3
 80041bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041be:	4b67      	ldr	r3, [pc, #412]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80041c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041ca:	fa92 f2a2 	rbit	r2, r2
 80041ce:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80041d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80041d2:	fab2 f282 	clz	r2, r2
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	f042 0220 	orr.w	r2, r2, #32
 80041dc:	b2d2      	uxtb	r2, r2
 80041de:	f002 021f 	and.w	r2, r2, #31
 80041e2:	2101      	movs	r1, #1
 80041e4:	fa01 f202 	lsl.w	r2, r1, r2
 80041e8:	4013      	ands	r3, r2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d17b      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0f3      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d13c      	bne.n	8004274 <HAL_RCC_ClockConfig+0x178>
 80041fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420a:	fab3 f383 	clz	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	095b      	lsrs	r3, r3, #5
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b01      	cmp	r3, #1
 800421c:	d102      	bne.n	8004224 <HAL_RCC_ClockConfig+0x128>
 800421e:	4b4f      	ldr	r3, [pc, #316]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	e00f      	b.n	8004244 <HAL_RCC_ClockConfig+0x148>
 8004224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800422a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800422c:	fa93 f3a3 	rbit	r3, r3
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
 8004232:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004236:	643b      	str	r3, [r7, #64]	; 0x40
 8004238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423a:	fa93 f3a3 	rbit	r3, r3
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004248:	63ba      	str	r2, [r7, #56]	; 0x38
 800424a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800424c:	fa92 f2a2 	rbit	r2, r2
 8004250:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004254:	fab2 f282 	clz	r2, r2
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	f042 0220 	orr.w	r2, r2, #32
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f002 021f 	and.w	r2, r2, #31
 8004264:	2101      	movs	r1, #1
 8004266:	fa01 f202 	lsl.w	r2, r1, r2
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d13a      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b2      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
 8004274:	2302      	movs	r3, #2
 8004276:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	fa93 f3a3 	rbit	r3, r3
 800427e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	fab3 f383 	clz	r3, r3
 8004286:	b2db      	uxtb	r3, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d102      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
 8004296:	4b31      	ldr	r3, [pc, #196]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	e00d      	b.n	80042b8 <HAL_RCC_ClockConfig+0x1bc>
 800429c:	2302      	movs	r3, #2
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
 80042a8:	2302      	movs	r3, #2
 80042aa:	623b      	str	r3, [r7, #32]
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	61fb      	str	r3, [r7, #28]
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	2202      	movs	r2, #2
 80042ba:	61ba      	str	r2, [r7, #24]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	fa92 f2a2 	rbit	r2, r2
 80042c2:	617a      	str	r2, [r7, #20]
  return result;
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	fab2 f282 	clz	r2, r2
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	f042 0220 	orr.w	r2, r2, #32
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	f002 021f 	and.w	r2, r2, #31
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f202 	lsl.w	r2, r1, r2
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e079      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042e6:	4b1d      	ldr	r3, [pc, #116]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f023 0203 	bic.w	r2, r3, #3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	491a      	ldr	r1, [pc, #104]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042f8:	f7fd f912 	bl	8001520 <HAL_GetTick>
 80042fc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004300:	f7fd f90e 	bl	8001520 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e061      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <HAL_RCC_ClockConfig+0x260>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 020c 	and.w	r2, r3, #12
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d1eb      	bne.n	8004300 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004328:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d214      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 0207 	bic.w	r2, r3, #7
 800433e:	4906      	ldr	r1, [pc, #24]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b04      	ldr	r3, [pc, #16]	; (8004358 <HAL_RCC_ClockConfig+0x25c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0307 	and.w	r3, r3, #7
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e040      	b.n	80043da <HAL_RCC_ClockConfig+0x2de>
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b1d      	ldr	r3, [pc, #116]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	491a      	ldr	r1, [pc, #104]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b16      	ldr	r3, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4912      	ldr	r1, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800439e:	f000 f829 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4601      	mov	r1, r0
 80043a4:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <HAL_RCC_ClockConfig+0x2e8>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ac:	22f0      	movs	r2, #240	; 0xf0
 80043ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	fa92 f2a2 	rbit	r2, r2
 80043b6:	60fa      	str	r2, [r7, #12]
  return result;
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	40d3      	lsrs	r3, r2
 80043c2:	4a09      	ldr	r2, [pc, #36]	; (80043e8 <HAL_RCC_ClockConfig+0x2ec>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
 80043c6:	fa21 f303 	lsr.w	r3, r1, r3
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <HAL_RCC_ClockConfig+0x2f0>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <HAL_RCC_ClockConfig+0x2f4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fd f860 	bl	8001498 <HAL_InitTick>
  
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3778      	adds	r7, #120	; 0x78
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40021000 	.word	0x40021000
 80043e8:	08005048 	.word	0x08005048
 80043ec:	20000014 	.word	0x20000014
 80043f0:	20000018 	.word	0x20000018

080043f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b08b      	sub	sp, #44	; 0x2c
 80043f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	61fb      	str	r3, [r7, #28]
 80043fe:	2300      	movs	r3, #0
 8004400:	61bb      	str	r3, [r7, #24]
 8004402:	2300      	movs	r3, #0
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800440e:	4b29      	ldr	r3, [pc, #164]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f003 030c 	and.w	r3, r3, #12
 800441a:	2b04      	cmp	r3, #4
 800441c:	d002      	beq.n	8004424 <HAL_RCC_GetSysClockFreq+0x30>
 800441e:	2b08      	cmp	r3, #8
 8004420:	d003      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x36>
 8004422:	e03c      	b.n	800449e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004424:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004426:	623b      	str	r3, [r7, #32]
      break;
 8004428:	e03c      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004430:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004434:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	fa92 f2a2 	rbit	r2, r2
 800443c:	607a      	str	r2, [r7, #4]
  return result;
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	fab2 f282 	clz	r2, r2
 8004444:	b2d2      	uxtb	r2, r2
 8004446:	40d3      	lsrs	r3, r2
 8004448:	4a1c      	ldr	r2, [pc, #112]	; (80044bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800444e:	4b19      	ldr	r3, [pc, #100]	; (80044b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f003 030f 	and.w	r3, r3, #15
 8004456:	220f      	movs	r2, #15
 8004458:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	fa92 f2a2 	rbit	r2, r2
 8004460:	60fa      	str	r2, [r7, #12]
  return result;
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	40d3      	lsrs	r3, r2
 800446c:	4a14      	ldr	r2, [pc, #80]	; (80044c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800447c:	4a0e      	ldr	r2, [pc, #56]	; (80044b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	fbb2 f2f3 	udiv	r2, r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	fb02 f303 	mul.w	r3, r2, r3
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	e004      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4a0c      	ldr	r2, [pc, #48]	; (80044c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004492:	fb02 f303 	mul.w	r3, r2, r3
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	623b      	str	r3, [r7, #32]
      break;
 800449c:	e002      	b.n	80044a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044a0:	623b      	str	r3, [r7, #32]
      break;
 80044a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044a4:	6a3b      	ldr	r3, [r7, #32]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	372c      	adds	r7, #44	; 0x2c
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40021000 	.word	0x40021000
 80044b8:	00f42400 	.word	0x00f42400
 80044bc:	08005058 	.word	0x08005058
 80044c0:	08005068 	.word	0x08005068
 80044c4:	003d0900 	.word	0x003d0900
 80044c8:	007a1200 	.word	0x007a1200

080044cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b092      	sub	sp, #72	; 0x48
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80cd 	beq.w	800468a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f0:	4b86      	ldr	r3, [pc, #536]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10e      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fc:	4b83      	ldr	r3, [pc, #524]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044fe:	69db      	ldr	r3, [r3, #28]
 8004500:	4a82      	ldr	r2, [pc, #520]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004506:	61d3      	str	r3, [r2, #28]
 8004508:	4b80      	ldr	r3, [pc, #512]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800450a:	69db      	ldr	r3, [r3, #28]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	60bb      	str	r3, [r7, #8]
 8004512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b7a      	ldr	r3, [pc, #488]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a79      	ldr	r2, [pc, #484]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fc fff5 	bl	8001520 <HAL_GetTick>
 8004536:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fc fff1 	bl	8001520 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	; 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e0db      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b70      	ldr	r3, [pc, #448]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004558:	4b6c      	ldr	r3, [pc, #432]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d07d      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004572:	429a      	cmp	r2, r3
 8004574:	d076      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004576:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004580:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004584:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	fa93 f3a3 	rbit	r3, r3
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	4b5e      	ldr	r3, [pc, #376]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	461a      	mov	r2, r3
 80045a0:	2301      	movs	r3, #1
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ac:	fa93 f3a3 	rbit	r3, r3
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b4:	fab3 f383 	clz	r3, r3
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	461a      	mov	r2, r3
 80045bc:	4b55      	ldr	r3, [pc, #340]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	461a      	mov	r2, r3
 80045c4:	2300      	movs	r3, #0
 80045c6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c8:	4a50      	ldr	r2, [pc, #320]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80045ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045cc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d045      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d8:	f7fc ffa2 	bl	8001520 <HAL_GetTick>
 80045dc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	e00a      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e0:	f7fc ff9e 	bl	8001520 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e086      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80045f6:	2302      	movs	r3, #2
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	fa93 f3a3 	rbit	r3, r3
 8004600:	627b      	str	r3, [r7, #36]	; 0x24
 8004602:	2302      	movs	r3, #2
 8004604:	623b      	str	r3, [r7, #32]
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	61fb      	str	r3, [r7, #28]
  return result;
 800460e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f043 0302 	orr.w	r3, r3, #2
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d102      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004624:	4b39      	ldr	r3, [pc, #228]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	e007      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800462a:	2302      	movs	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	4b35      	ldr	r3, [pc, #212]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	2202      	movs	r2, #2
 800463c:	613a      	str	r2, [r7, #16]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	60fa      	str	r2, [r7, #12]
  return result;
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	f002 021f 	and.w	r2, r2, #31
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f202 	lsl.w	r2, r1, r2
 800465e:	4013      	ands	r3, r2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0bd      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004664:	4b29      	ldr	r3, [pc, #164]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	4926      	ldr	r1, [pc, #152]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004672:	4313      	orrs	r3, r2
 8004674:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800467a:	2b01      	cmp	r3, #1
 800467c:	d105      	bne.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800467e:	4b23      	ldr	r3, [pc, #140]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004688:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f023 0203 	bic.w	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	491a      	ldr	r1, [pc, #104]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b4:	4b15      	ldr	r3, [pc, #84]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	f023 0210 	bic.w	r2, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4912      	ldr	r1, [pc, #72]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80046d2:	4b0e      	ldr	r3, [pc, #56]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	490b      	ldr	r1, [pc, #44]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	4903      	ldr	r1, [pc, #12]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3748      	adds	r7, #72	; 0x48
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
 8004714:	10908100 	.word	0x10908100

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fdf6 	bl	8001330 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 faa0 	bl	8004c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d001      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e040      	b.n	8004862 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_TIM_Base_Start_IT+0xa8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x58>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d009      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x58>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_TIM_Base_Start_IT+0xac>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x58>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <HAL_TIM_Base_Start_IT+0xb0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d115      	bne.n	800484c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_TIM_Base_Start_IT+0xb4>)
 8004828:	4013      	ands	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d015      	beq.n	800485e <HAL_TIM_Base_Start_IT+0x96>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d011      	beq.n	800485e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e008      	b.n	800485e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e000      	b.n	8004860 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40000400 	.word	0x40000400
 8004878:	40014000 	.word	0x40014000
 800487c:	00010007 	.word	0x00010007

08004880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b02      	cmp	r3, #2
 8004894:	d122      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d11b      	bne.n	80048dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0202 	mvn.w	r2, #2
 80048ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9cb 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 80048c8:	e005      	b.n	80048d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f9bd 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f9ce 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d122      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d11b      	bne.n	8004930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0204 	mvn.w	r2, #4
 8004900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f9a1 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f993 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f9a4 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b08      	cmp	r3, #8
 800493c:	d122      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b08      	cmp	r3, #8
 800494a:	d11b      	bne.n	8004984 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0208 	mvn.w	r2, #8
 8004954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2204      	movs	r2, #4
 800495a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f003 0303 	and.w	r3, r3, #3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f977 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 8004970:	e005      	b.n	800497e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f969 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f97a 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0310 	and.w	r3, r3, #16
 800498e:	2b10      	cmp	r3, #16
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b10      	cmp	r3, #16
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f94d 	bl	8004c5e <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f93f 	bl	8004c4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f950 	bl	8004c72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0201 	mvn.w	r2, #1
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fb6a 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a0e:	2b80      	cmp	r3, #128	; 0x80
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fac0 	bl	8004fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d10e      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4a:	2b80      	cmp	r3, #128	; 0x80
 8004a4c:	d107      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fab3 	bl	8004fc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d10e      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a76:	2b40      	cmp	r3, #64	; 0x40
 8004a78:	d107      	bne.n	8004a8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f8fe 	bl	8004c86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	d10e      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0320 	and.w	r3, r3, #32
 8004aa2:	2b20      	cmp	r3, #32
 8004aa4:	d107      	bne.n	8004ab6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f06f 0220 	mvn.w	r2, #32
 8004aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fa73 	bl	8004f9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ab6:	bf00      	nop
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b084      	sub	sp, #16
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
 8004ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_TIM_ConfigClockSource+0x18>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e0b5      	b.n	8004c42 <HAL_TIM_ConfigClockSource+0x184>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004af4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004af8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b00:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b12:	d03e      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0xd4>
 8004b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b18:	f200 8087 	bhi.w	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	f000 8085 	beq.w	8004c2e <HAL_TIM_ConfigClockSource+0x170>
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d87f      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b2a:	2b70      	cmp	r3, #112	; 0x70
 8004b2c:	d01a      	beq.n	8004b64 <HAL_TIM_ConfigClockSource+0xa6>
 8004b2e:	2b70      	cmp	r3, #112	; 0x70
 8004b30:	d87b      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b32:	2b60      	cmp	r3, #96	; 0x60
 8004b34:	d050      	beq.n	8004bd8 <HAL_TIM_ConfigClockSource+0x11a>
 8004b36:	2b60      	cmp	r3, #96	; 0x60
 8004b38:	d877      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b3a:	2b50      	cmp	r3, #80	; 0x50
 8004b3c:	d03c      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0xfa>
 8004b3e:	2b50      	cmp	r3, #80	; 0x50
 8004b40:	d873      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b42:	2b40      	cmp	r3, #64	; 0x40
 8004b44:	d058      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0x13a>
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d86f      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b4a:	2b30      	cmp	r3, #48	; 0x30
 8004b4c:	d064      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0x15a>
 8004b4e:	2b30      	cmp	r3, #48	; 0x30
 8004b50:	d86b      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d060      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0x15a>
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d867      	bhi.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d05c      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0x15a>
 8004b5e:	2b10      	cmp	r3, #16
 8004b60:	d05a      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004b62:	e062      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6899      	ldr	r1, [r3, #8]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f000 f984 	bl	8004e80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b86:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	609a      	str	r2, [r3, #8]
      break;
 8004b90:	e04e      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6899      	ldr	r1, [r3, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f000 f96d 	bl	8004e80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bb4:	609a      	str	r2, [r3, #8]
      break;
 8004bb6:	e03b      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6859      	ldr	r1, [r3, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	f000 f8e1 	bl	8004d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2150      	movs	r1, #80	; 0x50
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f000 f93a 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bd6:	e02b      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6818      	ldr	r0, [r3, #0]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	6859      	ldr	r1, [r3, #4]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	461a      	mov	r2, r3
 8004be6:	f000 f900 	bl	8004dea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2160      	movs	r1, #96	; 0x60
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 f92a 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004bf6:	e01b      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6818      	ldr	r0, [r3, #0]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	461a      	mov	r2, r3
 8004c06:	f000 f8c1 	bl	8004d8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2140      	movs	r1, #64	; 0x40
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f91a 	bl	8004e4a <TIM_ITRx_SetConfig>
      break;
 8004c16:	e00b      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f000 f911 	bl	8004e4a <TIM_ITRx_SetConfig>
        break;
 8004c28:	e002      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004c2a:	bf00      	nop
 8004c2c:	e000      	b.n	8004c30 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8e:	bf00      	nop
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a32      	ldr	r2, [pc, #200]	; (8004d78 <TIM_Base_SetConfig+0xdc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <TIM_Base_SetConfig+0x28>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cba:	d003      	beq.n	8004cc4 <TIM_Base_SetConfig+0x28>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a2f      	ldr	r2, [pc, #188]	; (8004d7c <TIM_Base_SetConfig+0xe0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d108      	bne.n	8004cd6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a27      	ldr	r2, [pc, #156]	; (8004d78 <TIM_Base_SetConfig+0xdc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <TIM_Base_SetConfig+0x6a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce4:	d00f      	beq.n	8004d06 <TIM_Base_SetConfig+0x6a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a24      	ldr	r2, [pc, #144]	; (8004d7c <TIM_Base_SetConfig+0xe0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00b      	beq.n	8004d06 <TIM_Base_SetConfig+0x6a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a23      	ldr	r2, [pc, #140]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d007      	beq.n	8004d06 <TIM_Base_SetConfig+0x6a>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a22      	ldr	r2, [pc, #136]	; (8004d84 <TIM_Base_SetConfig+0xe8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <TIM_Base_SetConfig+0x6a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <TIM_Base_SetConfig+0xec>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d108      	bne.n	8004d18 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <TIM_Base_SetConfig+0xdc>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <TIM_Base_SetConfig+0xc0>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <TIM_Base_SetConfig+0xe4>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_Base_SetConfig+0xc0>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <TIM_Base_SetConfig+0xe8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_Base_SetConfig+0xc0>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <TIM_Base_SetConfig+0xec>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d103      	bne.n	8004d64 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	615a      	str	r2, [r3, #20]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40012c00 	.word	0x40012c00
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40014000 	.word	0x40014000
 8004d84:	40014400 	.word	0x40014400
 8004d88:	40014800 	.word	0x40014800

08004d8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0201 	bic.w	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004db6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f023 030a 	bic.w	r3, r3, #10
 8004dc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b087      	sub	sp, #28
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f023 0210 	bic.w	r2, r3, #16
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
 8004e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f043 0307 	orr.w	r3, r3, #7
 8004e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	609a      	str	r2, [r3, #8]
}
 8004e74:	bf00      	nop
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	021a      	lsls	r2, r3, #8
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	431a      	orrs	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	371c      	adds	r7, #28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	e054      	b.n	8004f82 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f08:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a17      	ldr	r2, [pc, #92]	; (8004f90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00e      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d009      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d004      	beq.n	8004f56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10c      	bne.n	8004f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40014000 	.word	0x40014000

08004f9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <__libc_init_array>:
 8004fd8:	b570      	push	{r4, r5, r6, lr}
 8004fda:	4d0d      	ldr	r5, [pc, #52]	; (8005010 <__libc_init_array+0x38>)
 8004fdc:	4c0d      	ldr	r4, [pc, #52]	; (8005014 <__libc_init_array+0x3c>)
 8004fde:	1b64      	subs	r4, r4, r5
 8004fe0:	10a4      	asrs	r4, r4, #2
 8004fe2:	2600      	movs	r6, #0
 8004fe4:	42a6      	cmp	r6, r4
 8004fe6:	d109      	bne.n	8004ffc <__libc_init_array+0x24>
 8004fe8:	4d0b      	ldr	r5, [pc, #44]	; (8005018 <__libc_init_array+0x40>)
 8004fea:	4c0c      	ldr	r4, [pc, #48]	; (800501c <__libc_init_array+0x44>)
 8004fec:	f000 f820 	bl	8005030 <_init>
 8004ff0:	1b64      	subs	r4, r4, r5
 8004ff2:	10a4      	asrs	r4, r4, #2
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	d105      	bne.n	8005006 <__libc_init_array+0x2e>
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
 8004ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005000:	4798      	blx	r3
 8005002:	3601      	adds	r6, #1
 8005004:	e7ee      	b.n	8004fe4 <__libc_init_array+0xc>
 8005006:	f855 3b04 	ldr.w	r3, [r5], #4
 800500a:	4798      	blx	r3
 800500c:	3601      	adds	r6, #1
 800500e:	e7f2      	b.n	8004ff6 <__libc_init_array+0x1e>
 8005010:	08005078 	.word	0x08005078
 8005014:	08005078 	.word	0x08005078
 8005018:	08005078 	.word	0x08005078
 800501c:	0800507c 	.word	0x0800507c

08005020 <memset>:
 8005020:	4402      	add	r2, r0
 8005022:	4603      	mov	r3, r0
 8005024:	4293      	cmp	r3, r2
 8005026:	d100      	bne.n	800502a <memset+0xa>
 8005028:	4770      	bx	lr
 800502a:	f803 1b01 	strb.w	r1, [r3], #1
 800502e:	e7f9      	b.n	8005024 <memset+0x4>

08005030 <_init>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr

0800503c <_fini>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr
