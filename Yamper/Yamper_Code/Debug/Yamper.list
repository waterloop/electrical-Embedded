
Yamper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002824  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002994  08002994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002994  08002994  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002994  08002994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800299c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  080029a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  080029a8  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000991a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d9  00000000  00000000  0002994e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002b028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002ba28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018358  00000000  00000000  0002c370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ac1d  00000000  00000000  000446c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e872  00000000  00000000  0004f2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ddb57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a8  00000000  00000000  000ddbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080028cc 	.word	0x080028cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080028cc 	.word	0x080028cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4681      	mov	r9, r0
 800022e:	0005      	movs	r5, r0
 8000230:	030c      	lsls	r4, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	4692      	mov	sl, r2
 8000236:	001f      	movs	r7, r3
 8000238:	b085      	sub	sp, #20
 800023a:	0b24      	lsrs	r4, r4, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fce      	lsrs	r6, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d059      	beq.n	80002f8 <__aeabi_ddiv+0xd8>
 8000244:	4b87      	ldr	r3, [pc, #540]	; (8000464 <__aeabi_ddiv+0x244>)
 8000246:	4298      	cmp	r0, r3
 8000248:	d100      	bne.n	800024c <__aeabi_ddiv+0x2c>
 800024a:	e098      	b.n	800037e <__aeabi_ddiv+0x15e>
 800024c:	0f6b      	lsrs	r3, r5, #29
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	431c      	orrs	r4, r3
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	041b      	lsls	r3, r3, #16
 8000256:	4323      	orrs	r3, r4
 8000258:	4698      	mov	r8, r3
 800025a:	4b83      	ldr	r3, [pc, #524]	; (8000468 <__aeabi_ddiv+0x248>)
 800025c:	00ed      	lsls	r5, r5, #3
 800025e:	469b      	mov	fp, r3
 8000260:	2300      	movs	r3, #0
 8000262:	4699      	mov	r9, r3
 8000264:	4483      	add	fp, r0
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	033c      	lsls	r4, r7, #12
 800026a:	007b      	lsls	r3, r7, #1
 800026c:	4650      	mov	r0, sl
 800026e:	0b24      	lsrs	r4, r4, #12
 8000270:	0d5b      	lsrs	r3, r3, #21
 8000272:	0fff      	lsrs	r7, r7, #31
 8000274:	2b00      	cmp	r3, #0
 8000276:	d067      	beq.n	8000348 <__aeabi_ddiv+0x128>
 8000278:	4a7a      	ldr	r2, [pc, #488]	; (8000464 <__aeabi_ddiv+0x244>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d018      	beq.n	80002b0 <__aeabi_ddiv+0x90>
 800027e:	497a      	ldr	r1, [pc, #488]	; (8000468 <__aeabi_ddiv+0x248>)
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	468c      	mov	ip, r1
 8000284:	00e4      	lsls	r4, r4, #3
 8000286:	4659      	mov	r1, fp
 8000288:	4314      	orrs	r4, r2
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	4463      	add	r3, ip
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	1acb      	subs	r3, r1, r3
 8000292:	4314      	orrs	r4, r2
 8000294:	469b      	mov	fp, r3
 8000296:	00c2      	lsls	r2, r0, #3
 8000298:	2000      	movs	r0, #0
 800029a:	0033      	movs	r3, r6
 800029c:	407b      	eors	r3, r7
 800029e:	469a      	mov	sl, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	2b0f      	cmp	r3, #15
 80002a4:	d900      	bls.n	80002a8 <__aeabi_ddiv+0x88>
 80002a6:	e0ef      	b.n	8000488 <__aeabi_ddiv+0x268>
 80002a8:	4970      	ldr	r1, [pc, #448]	; (800046c <__aeabi_ddiv+0x24c>)
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	58cb      	ldr	r3, [r1, r3]
 80002ae:	469f      	mov	pc, r3
 80002b0:	4b6f      	ldr	r3, [pc, #444]	; (8000470 <__aeabi_ddiv+0x250>)
 80002b2:	4652      	mov	r2, sl
 80002b4:	469c      	mov	ip, r3
 80002b6:	4322      	orrs	r2, r4
 80002b8:	44e3      	add	fp, ip
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d000      	beq.n	80002c0 <__aeabi_ddiv+0xa0>
 80002be:	e095      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 80002c0:	4649      	mov	r1, r9
 80002c2:	2302      	movs	r3, #2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	4689      	mov	r9, r1
 80002c8:	2400      	movs	r4, #0
 80002ca:	2002      	movs	r0, #2
 80002cc:	e7e5      	b.n	800029a <__aeabi_ddiv+0x7a>
 80002ce:	2300      	movs	r3, #0
 80002d0:	2400      	movs	r4, #0
 80002d2:	2500      	movs	r5, #0
 80002d4:	4652      	mov	r2, sl
 80002d6:	051b      	lsls	r3, r3, #20
 80002d8:	4323      	orrs	r3, r4
 80002da:	07d2      	lsls	r2, r2, #31
 80002dc:	4313      	orrs	r3, r2
 80002de:	0028      	movs	r0, r5
 80002e0:	0019      	movs	r1, r3
 80002e2:	b005      	add	sp, #20
 80002e4:	bcf0      	pop	{r4, r5, r6, r7}
 80002e6:	46bb      	mov	fp, r7
 80002e8:	46b2      	mov	sl, r6
 80002ea:	46a9      	mov	r9, r5
 80002ec:	46a0      	mov	r8, r4
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f0:	2400      	movs	r4, #0
 80002f2:	2500      	movs	r5, #0
 80002f4:	4b5b      	ldr	r3, [pc, #364]	; (8000464 <__aeabi_ddiv+0x244>)
 80002f6:	e7ed      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80002f8:	464b      	mov	r3, r9
 80002fa:	4323      	orrs	r3, r4
 80002fc:	4698      	mov	r8, r3
 80002fe:	d100      	bne.n	8000302 <__aeabi_ddiv+0xe2>
 8000300:	e089      	b.n	8000416 <__aeabi_ddiv+0x1f6>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d100      	bne.n	8000308 <__aeabi_ddiv+0xe8>
 8000306:	e1e0      	b.n	80006ca <__aeabi_ddiv+0x4aa>
 8000308:	0020      	movs	r0, r4
 800030a:	f000 fd95 	bl	8000e38 <__clzsi2>
 800030e:	0001      	movs	r1, r0
 8000310:	0002      	movs	r2, r0
 8000312:	390b      	subs	r1, #11
 8000314:	231d      	movs	r3, #29
 8000316:	1a5b      	subs	r3, r3, r1
 8000318:	4649      	mov	r1, r9
 800031a:	0010      	movs	r0, r2
 800031c:	40d9      	lsrs	r1, r3
 800031e:	3808      	subs	r0, #8
 8000320:	4084      	lsls	r4, r0
 8000322:	000b      	movs	r3, r1
 8000324:	464d      	mov	r5, r9
 8000326:	4323      	orrs	r3, r4
 8000328:	4698      	mov	r8, r3
 800032a:	4085      	lsls	r5, r0
 800032c:	4851      	ldr	r0, [pc, #324]	; (8000474 <__aeabi_ddiv+0x254>)
 800032e:	033c      	lsls	r4, r7, #12
 8000330:	1a83      	subs	r3, r0, r2
 8000332:	469b      	mov	fp, r3
 8000334:	2300      	movs	r3, #0
 8000336:	4699      	mov	r9, r3
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	007b      	lsls	r3, r7, #1
 800033c:	4650      	mov	r0, sl
 800033e:	0b24      	lsrs	r4, r4, #12
 8000340:	0d5b      	lsrs	r3, r3, #21
 8000342:	0fff      	lsrs	r7, r7, #31
 8000344:	2b00      	cmp	r3, #0
 8000346:	d197      	bne.n	8000278 <__aeabi_ddiv+0x58>
 8000348:	4652      	mov	r2, sl
 800034a:	4322      	orrs	r2, r4
 800034c:	d055      	beq.n	80003fa <__aeabi_ddiv+0x1da>
 800034e:	2c00      	cmp	r4, #0
 8000350:	d100      	bne.n	8000354 <__aeabi_ddiv+0x134>
 8000352:	e1ca      	b.n	80006ea <__aeabi_ddiv+0x4ca>
 8000354:	0020      	movs	r0, r4
 8000356:	f000 fd6f 	bl	8000e38 <__clzsi2>
 800035a:	0002      	movs	r2, r0
 800035c:	3a0b      	subs	r2, #11
 800035e:	231d      	movs	r3, #29
 8000360:	0001      	movs	r1, r0
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	3908      	subs	r1, #8
 8000368:	40da      	lsrs	r2, r3
 800036a:	408c      	lsls	r4, r1
 800036c:	4314      	orrs	r4, r2
 800036e:	4652      	mov	r2, sl
 8000370:	408a      	lsls	r2, r1
 8000372:	4b41      	ldr	r3, [pc, #260]	; (8000478 <__aeabi_ddiv+0x258>)
 8000374:	4458      	add	r0, fp
 8000376:	469b      	mov	fp, r3
 8000378:	4483      	add	fp, r0
 800037a:	2000      	movs	r0, #0
 800037c:	e78d      	b.n	800029a <__aeabi_ddiv+0x7a>
 800037e:	464b      	mov	r3, r9
 8000380:	4323      	orrs	r3, r4
 8000382:	4698      	mov	r8, r3
 8000384:	d140      	bne.n	8000408 <__aeabi_ddiv+0x1e8>
 8000386:	2308      	movs	r3, #8
 8000388:	4699      	mov	r9, r3
 800038a:	3b06      	subs	r3, #6
 800038c:	2500      	movs	r5, #0
 800038e:	4683      	mov	fp, r0
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	e769      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000394:	46b2      	mov	sl, r6
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d0a9      	beq.n	80002f0 <__aeabi_ddiv+0xd0>
 800039c:	2b03      	cmp	r3, #3
 800039e:	d100      	bne.n	80003a2 <__aeabi_ddiv+0x182>
 80003a0:	e211      	b.n	80007c6 <__aeabi_ddiv+0x5a6>
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d093      	beq.n	80002ce <__aeabi_ddiv+0xae>
 80003a6:	4a35      	ldr	r2, [pc, #212]	; (800047c <__aeabi_ddiv+0x25c>)
 80003a8:	445a      	add	r2, fp
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	dc00      	bgt.n	80003b0 <__aeabi_ddiv+0x190>
 80003ae:	e13c      	b.n	800062a <__aeabi_ddiv+0x40a>
 80003b0:	076b      	lsls	r3, r5, #29
 80003b2:	d000      	beq.n	80003b6 <__aeabi_ddiv+0x196>
 80003b4:	e1a7      	b.n	8000706 <__aeabi_ddiv+0x4e6>
 80003b6:	08ed      	lsrs	r5, r5, #3
 80003b8:	4643      	mov	r3, r8
 80003ba:	01db      	lsls	r3, r3, #7
 80003bc:	d506      	bpl.n	80003cc <__aeabi_ddiv+0x1ac>
 80003be:	4642      	mov	r2, r8
 80003c0:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <__aeabi_ddiv+0x260>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	4690      	mov	r8, r2
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	00d2      	lsls	r2, r2, #3
 80003ca:	445a      	add	r2, fp
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <__aeabi_ddiv+0x264>)
 80003ce:	429a      	cmp	r2, r3
 80003d0:	dc8e      	bgt.n	80002f0 <__aeabi_ddiv+0xd0>
 80003d2:	4643      	mov	r3, r8
 80003d4:	0552      	lsls	r2, r2, #21
 80003d6:	0758      	lsls	r0, r3, #29
 80003d8:	025c      	lsls	r4, r3, #9
 80003da:	4305      	orrs	r5, r0
 80003dc:	0b24      	lsrs	r4, r4, #12
 80003de:	0d53      	lsrs	r3, r2, #21
 80003e0:	e778      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80003e2:	46ba      	mov	sl, r7
 80003e4:	46a0      	mov	r8, r4
 80003e6:	0015      	movs	r5, r2
 80003e8:	9000      	str	r0, [sp, #0]
 80003ea:	e7d4      	b.n	8000396 <__aeabi_ddiv+0x176>
 80003ec:	464a      	mov	r2, r9
 80003ee:	2303      	movs	r3, #3
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4691      	mov	r9, r2
 80003f4:	2003      	movs	r0, #3
 80003f6:	4652      	mov	r2, sl
 80003f8:	e74f      	b.n	800029a <__aeabi_ddiv+0x7a>
 80003fa:	4649      	mov	r1, r9
 80003fc:	2301      	movs	r3, #1
 80003fe:	4319      	orrs	r1, r3
 8000400:	4689      	mov	r9, r1
 8000402:	2400      	movs	r4, #0
 8000404:	2001      	movs	r0, #1
 8000406:	e748      	b.n	800029a <__aeabi_ddiv+0x7a>
 8000408:	230c      	movs	r3, #12
 800040a:	4699      	mov	r9, r3
 800040c:	3b09      	subs	r3, #9
 800040e:	46a0      	mov	r8, r4
 8000410:	4683      	mov	fp, r0
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	e728      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000416:	2304      	movs	r3, #4
 8000418:	4699      	mov	r9, r3
 800041a:	2300      	movs	r3, #0
 800041c:	469b      	mov	fp, r3
 800041e:	3301      	adds	r3, #1
 8000420:	2500      	movs	r5, #0
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	e720      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000426:	2300      	movs	r3, #0
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	469a      	mov	sl, r3
 800042c:	2500      	movs	r5, #0
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <__aeabi_ddiv+0x244>)
 8000430:	0324      	lsls	r4, r4, #12
 8000432:	e74f      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	4641      	mov	r1, r8
 8000438:	031b      	lsls	r3, r3, #12
 800043a:	4219      	tst	r1, r3
 800043c:	d008      	beq.n	8000450 <__aeabi_ddiv+0x230>
 800043e:	421c      	tst	r4, r3
 8000440:	d106      	bne.n	8000450 <__aeabi_ddiv+0x230>
 8000442:	431c      	orrs	r4, r3
 8000444:	0324      	lsls	r4, r4, #12
 8000446:	46ba      	mov	sl, r7
 8000448:	0015      	movs	r5, r2
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <__aeabi_ddiv+0x244>)
 800044c:	0b24      	lsrs	r4, r4, #12
 800044e:	e741      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000450:	2480      	movs	r4, #128	; 0x80
 8000452:	4643      	mov	r3, r8
 8000454:	0324      	lsls	r4, r4, #12
 8000456:	431c      	orrs	r4, r3
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	46b2      	mov	sl, r6
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <__aeabi_ddiv+0x244>)
 800045e:	0b24      	lsrs	r4, r4, #12
 8000460:	e738      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	000007ff 	.word	0x000007ff
 8000468:	fffffc01 	.word	0xfffffc01
 800046c:	08002904 	.word	0x08002904
 8000470:	fffff801 	.word	0xfffff801
 8000474:	fffffc0d 	.word	0xfffffc0d
 8000478:	000003f3 	.word	0x000003f3
 800047c:	000003ff 	.word	0x000003ff
 8000480:	feffffff 	.word	0xfeffffff
 8000484:	000007fe 	.word	0x000007fe
 8000488:	4544      	cmp	r4, r8
 800048a:	d200      	bcs.n	800048e <__aeabi_ddiv+0x26e>
 800048c:	e116      	b.n	80006bc <__aeabi_ddiv+0x49c>
 800048e:	d100      	bne.n	8000492 <__aeabi_ddiv+0x272>
 8000490:	e111      	b.n	80006b6 <__aeabi_ddiv+0x496>
 8000492:	2301      	movs	r3, #1
 8000494:	425b      	negs	r3, r3
 8000496:	469c      	mov	ip, r3
 8000498:	002e      	movs	r6, r5
 800049a:	4640      	mov	r0, r8
 800049c:	2500      	movs	r5, #0
 800049e:	44e3      	add	fp, ip
 80004a0:	0223      	lsls	r3, r4, #8
 80004a2:	0e14      	lsrs	r4, r2, #24
 80004a4:	431c      	orrs	r4, r3
 80004a6:	0c1b      	lsrs	r3, r3, #16
 80004a8:	4699      	mov	r9, r3
 80004aa:	0423      	lsls	r3, r4, #16
 80004ac:	0c1f      	lsrs	r7, r3, #16
 80004ae:	0212      	lsls	r2, r2, #8
 80004b0:	4649      	mov	r1, r9
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9701      	str	r7, [sp, #4]
 80004b6:	f7ff fead 	bl	8000214 <__aeabi_uidivmod>
 80004ba:	0002      	movs	r2, r0
 80004bc:	437a      	muls	r2, r7
 80004be:	040b      	lsls	r3, r1, #16
 80004c0:	0c31      	lsrs	r1, r6, #16
 80004c2:	4680      	mov	r8, r0
 80004c4:	4319      	orrs	r1, r3
 80004c6:	428a      	cmp	r2, r1
 80004c8:	d90b      	bls.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	469c      	mov	ip, r3
 80004d0:	1909      	adds	r1, r1, r4
 80004d2:	44e0      	add	r8, ip
 80004d4:	428c      	cmp	r4, r1
 80004d6:	d804      	bhi.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004d8:	428a      	cmp	r2, r1
 80004da:	d902      	bls.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004dc:	1e83      	subs	r3, r0, #2
 80004de:	4698      	mov	r8, r3
 80004e0:	1909      	adds	r1, r1, r4
 80004e2:	1a88      	subs	r0, r1, r2
 80004e4:	4649      	mov	r1, r9
 80004e6:	f7ff fe95 	bl	8000214 <__aeabi_uidivmod>
 80004ea:	0409      	lsls	r1, r1, #16
 80004ec:	468c      	mov	ip, r1
 80004ee:	0431      	lsls	r1, r6, #16
 80004f0:	4666      	mov	r6, ip
 80004f2:	9a01      	ldr	r2, [sp, #4]
 80004f4:	0c09      	lsrs	r1, r1, #16
 80004f6:	4342      	muls	r2, r0
 80004f8:	0003      	movs	r3, r0
 80004fa:	4331      	orrs	r1, r6
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d904      	bls.n	800050a <__aeabi_ddiv+0x2ea>
 8000500:	1909      	adds	r1, r1, r4
 8000502:	3b01      	subs	r3, #1
 8000504:	428c      	cmp	r4, r1
 8000506:	d800      	bhi.n	800050a <__aeabi_ddiv+0x2ea>
 8000508:	e111      	b.n	800072e <__aeabi_ddiv+0x50e>
 800050a:	1a89      	subs	r1, r1, r2
 800050c:	4642      	mov	r2, r8
 800050e:	9e00      	ldr	r6, [sp, #0]
 8000510:	0412      	lsls	r2, r2, #16
 8000512:	431a      	orrs	r2, r3
 8000514:	0c33      	lsrs	r3, r6, #16
 8000516:	001f      	movs	r7, r3
 8000518:	0c10      	lsrs	r0, r2, #16
 800051a:	4690      	mov	r8, r2
 800051c:	9302      	str	r3, [sp, #8]
 800051e:	0413      	lsls	r3, r2, #16
 8000520:	0432      	lsls	r2, r6, #16
 8000522:	0c16      	lsrs	r6, r2, #16
 8000524:	0032      	movs	r2, r6
 8000526:	0c1b      	lsrs	r3, r3, #16
 8000528:	435a      	muls	r2, r3
 800052a:	9603      	str	r6, [sp, #12]
 800052c:	437b      	muls	r3, r7
 800052e:	4346      	muls	r6, r0
 8000530:	4378      	muls	r0, r7
 8000532:	0c17      	lsrs	r7, r2, #16
 8000534:	46bc      	mov	ip, r7
 8000536:	199b      	adds	r3, r3, r6
 8000538:	4463      	add	r3, ip
 800053a:	429e      	cmp	r6, r3
 800053c:	d903      	bls.n	8000546 <__aeabi_ddiv+0x326>
 800053e:	2680      	movs	r6, #128	; 0x80
 8000540:	0276      	lsls	r6, r6, #9
 8000542:	46b4      	mov	ip, r6
 8000544:	4460      	add	r0, ip
 8000546:	0c1e      	lsrs	r6, r3, #16
 8000548:	1830      	adds	r0, r6, r0
 800054a:	0416      	lsls	r6, r2, #16
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	0c36      	lsrs	r6, r6, #16
 8000550:	199e      	adds	r6, r3, r6
 8000552:	4281      	cmp	r1, r0
 8000554:	d200      	bcs.n	8000558 <__aeabi_ddiv+0x338>
 8000556:	e09c      	b.n	8000692 <__aeabi_ddiv+0x472>
 8000558:	d100      	bne.n	800055c <__aeabi_ddiv+0x33c>
 800055a:	e097      	b.n	800068c <__aeabi_ddiv+0x46c>
 800055c:	1bae      	subs	r6, r5, r6
 800055e:	1a09      	subs	r1, r1, r0
 8000560:	42b5      	cmp	r5, r6
 8000562:	4180      	sbcs	r0, r0
 8000564:	4240      	negs	r0, r0
 8000566:	1a08      	subs	r0, r1, r0
 8000568:	4284      	cmp	r4, r0
 800056a:	d100      	bne.n	800056e <__aeabi_ddiv+0x34e>
 800056c:	e111      	b.n	8000792 <__aeabi_ddiv+0x572>
 800056e:	4649      	mov	r1, r9
 8000570:	f7ff fe50 	bl	8000214 <__aeabi_uidivmod>
 8000574:	9a01      	ldr	r2, [sp, #4]
 8000576:	040b      	lsls	r3, r1, #16
 8000578:	4342      	muls	r2, r0
 800057a:	0c31      	lsrs	r1, r6, #16
 800057c:	0005      	movs	r5, r0
 800057e:	4319      	orrs	r1, r3
 8000580:	428a      	cmp	r2, r1
 8000582:	d907      	bls.n	8000594 <__aeabi_ddiv+0x374>
 8000584:	1909      	adds	r1, r1, r4
 8000586:	3d01      	subs	r5, #1
 8000588:	428c      	cmp	r4, r1
 800058a:	d803      	bhi.n	8000594 <__aeabi_ddiv+0x374>
 800058c:	428a      	cmp	r2, r1
 800058e:	d901      	bls.n	8000594 <__aeabi_ddiv+0x374>
 8000590:	1e85      	subs	r5, r0, #2
 8000592:	1909      	adds	r1, r1, r4
 8000594:	1a88      	subs	r0, r1, r2
 8000596:	4649      	mov	r1, r9
 8000598:	f7ff fe3c 	bl	8000214 <__aeabi_uidivmod>
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	468c      	mov	ip, r1
 80005a0:	0431      	lsls	r1, r6, #16
 80005a2:	4666      	mov	r6, ip
 80005a4:	9a01      	ldr	r2, [sp, #4]
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	4342      	muls	r2, r0
 80005aa:	0003      	movs	r3, r0
 80005ac:	4331      	orrs	r1, r6
 80005ae:	428a      	cmp	r2, r1
 80005b0:	d907      	bls.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005b2:	1909      	adds	r1, r1, r4
 80005b4:	3b01      	subs	r3, #1
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d803      	bhi.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005ba:	428a      	cmp	r2, r1
 80005bc:	d901      	bls.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005be:	1e83      	subs	r3, r0, #2
 80005c0:	1909      	adds	r1, r1, r4
 80005c2:	9e03      	ldr	r6, [sp, #12]
 80005c4:	1a89      	subs	r1, r1, r2
 80005c6:	0032      	movs	r2, r6
 80005c8:	042d      	lsls	r5, r5, #16
 80005ca:	431d      	orrs	r5, r3
 80005cc:	9f02      	ldr	r7, [sp, #8]
 80005ce:	042b      	lsls	r3, r5, #16
 80005d0:	0c1b      	lsrs	r3, r3, #16
 80005d2:	435a      	muls	r2, r3
 80005d4:	437b      	muls	r3, r7
 80005d6:	469c      	mov	ip, r3
 80005d8:	0c28      	lsrs	r0, r5, #16
 80005da:	4346      	muls	r6, r0
 80005dc:	0c13      	lsrs	r3, r2, #16
 80005de:	44b4      	add	ip, r6
 80005e0:	4463      	add	r3, ip
 80005e2:	4378      	muls	r0, r7
 80005e4:	429e      	cmp	r6, r3
 80005e6:	d903      	bls.n	80005f0 <__aeabi_ddiv+0x3d0>
 80005e8:	2680      	movs	r6, #128	; 0x80
 80005ea:	0276      	lsls	r6, r6, #9
 80005ec:	46b4      	mov	ip, r6
 80005ee:	4460      	add	r0, ip
 80005f0:	0c1e      	lsrs	r6, r3, #16
 80005f2:	0412      	lsls	r2, r2, #16
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	1830      	adds	r0, r6, r0
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	4281      	cmp	r1, r0
 80005fe:	d306      	bcc.n	800060e <__aeabi_ddiv+0x3ee>
 8000600:	d002      	beq.n	8000608 <__aeabi_ddiv+0x3e8>
 8000602:	2301      	movs	r3, #1
 8000604:	431d      	orrs	r5, r3
 8000606:	e6ce      	b.n	80003a6 <__aeabi_ddiv+0x186>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_ddiv+0x3ee>
 800060c:	e6cb      	b.n	80003a6 <__aeabi_ddiv+0x186>
 800060e:	1861      	adds	r1, r4, r1
 8000610:	1e6e      	subs	r6, r5, #1
 8000612:	42a1      	cmp	r1, r4
 8000614:	d200      	bcs.n	8000618 <__aeabi_ddiv+0x3f8>
 8000616:	e0a4      	b.n	8000762 <__aeabi_ddiv+0x542>
 8000618:	4281      	cmp	r1, r0
 800061a:	d200      	bcs.n	800061e <__aeabi_ddiv+0x3fe>
 800061c:	e0c9      	b.n	80007b2 <__aeabi_ddiv+0x592>
 800061e:	d100      	bne.n	8000622 <__aeabi_ddiv+0x402>
 8000620:	e0d9      	b.n	80007d6 <__aeabi_ddiv+0x5b6>
 8000622:	0035      	movs	r5, r6
 8000624:	e7ed      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 8000626:	2501      	movs	r5, #1
 8000628:	426d      	negs	r5, r5
 800062a:	2101      	movs	r1, #1
 800062c:	1a89      	subs	r1, r1, r2
 800062e:	2938      	cmp	r1, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_ddiv+0x414>
 8000632:	e64c      	b.n	80002ce <__aeabi_ddiv+0xae>
 8000634:	291f      	cmp	r1, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_ddiv+0x41a>
 8000638:	e07f      	b.n	800073a <__aeabi_ddiv+0x51a>
 800063a:	231f      	movs	r3, #31
 800063c:	425b      	negs	r3, r3
 800063e:	1a9a      	subs	r2, r3, r2
 8000640:	4643      	mov	r3, r8
 8000642:	40d3      	lsrs	r3, r2
 8000644:	2920      	cmp	r1, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_ddiv+0x432>
 8000648:	4644      	mov	r4, r8
 800064a:	4a65      	ldr	r2, [pc, #404]	; (80007e0 <__aeabi_ddiv+0x5c0>)
 800064c:	445a      	add	r2, fp
 800064e:	4094      	lsls	r4, r2
 8000650:	4325      	orrs	r5, r4
 8000652:	1e6a      	subs	r2, r5, #1
 8000654:	4195      	sbcs	r5, r2
 8000656:	2207      	movs	r2, #7
 8000658:	432b      	orrs	r3, r5
 800065a:	0015      	movs	r5, r2
 800065c:	2400      	movs	r4, #0
 800065e:	401d      	ands	r5, r3
 8000660:	421a      	tst	r2, r3
 8000662:	d100      	bne.n	8000666 <__aeabi_ddiv+0x446>
 8000664:	e0a1      	b.n	80007aa <__aeabi_ddiv+0x58a>
 8000666:	220f      	movs	r2, #15
 8000668:	2400      	movs	r4, #0
 800066a:	401a      	ands	r2, r3
 800066c:	2a04      	cmp	r2, #4
 800066e:	d100      	bne.n	8000672 <__aeabi_ddiv+0x452>
 8000670:	e098      	b.n	80007a4 <__aeabi_ddiv+0x584>
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	429a      	cmp	r2, r3
 8000676:	419b      	sbcs	r3, r3
 8000678:	425b      	negs	r3, r3
 800067a:	18e4      	adds	r4, r4, r3
 800067c:	0013      	movs	r3, r2
 800067e:	0222      	lsls	r2, r4, #8
 8000680:	d400      	bmi.n	8000684 <__aeabi_ddiv+0x464>
 8000682:	e08f      	b.n	80007a4 <__aeabi_ddiv+0x584>
 8000684:	2301      	movs	r3, #1
 8000686:	2400      	movs	r4, #0
 8000688:	2500      	movs	r5, #0
 800068a:	e623      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 800068c:	42b5      	cmp	r5, r6
 800068e:	d300      	bcc.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e764      	b.n	800055c <__aeabi_ddiv+0x33c>
 8000692:	4643      	mov	r3, r8
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	9b00      	ldr	r3, [sp, #0]
 8000698:	469c      	mov	ip, r3
 800069a:	4465      	add	r5, ip
 800069c:	001f      	movs	r7, r3
 800069e:	429d      	cmp	r5, r3
 80006a0:	419b      	sbcs	r3, r3
 80006a2:	425b      	negs	r3, r3
 80006a4:	191b      	adds	r3, r3, r4
 80006a6:	18c9      	adds	r1, r1, r3
 80006a8:	428c      	cmp	r4, r1
 80006aa:	d23a      	bcs.n	8000722 <__aeabi_ddiv+0x502>
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d863      	bhi.n	8000778 <__aeabi_ddiv+0x558>
 80006b0:	d060      	beq.n	8000774 <__aeabi_ddiv+0x554>
 80006b2:	4690      	mov	r8, r2
 80006b4:	e752      	b.n	800055c <__aeabi_ddiv+0x33c>
 80006b6:	42aa      	cmp	r2, r5
 80006b8:	d900      	bls.n	80006bc <__aeabi_ddiv+0x49c>
 80006ba:	e6ea      	b.n	8000492 <__aeabi_ddiv+0x272>
 80006bc:	4643      	mov	r3, r8
 80006be:	07de      	lsls	r6, r3, #31
 80006c0:	0858      	lsrs	r0, r3, #1
 80006c2:	086b      	lsrs	r3, r5, #1
 80006c4:	431e      	orrs	r6, r3
 80006c6:	07ed      	lsls	r5, r5, #31
 80006c8:	e6ea      	b.n	80004a0 <__aeabi_ddiv+0x280>
 80006ca:	4648      	mov	r0, r9
 80006cc:	f000 fbb4 	bl	8000e38 <__clzsi2>
 80006d0:	0001      	movs	r1, r0
 80006d2:	0002      	movs	r2, r0
 80006d4:	3115      	adds	r1, #21
 80006d6:	3220      	adds	r2, #32
 80006d8:	291c      	cmp	r1, #28
 80006da:	dc00      	bgt.n	80006de <__aeabi_ddiv+0x4be>
 80006dc:	e61a      	b.n	8000314 <__aeabi_ddiv+0xf4>
 80006de:	464b      	mov	r3, r9
 80006e0:	3808      	subs	r0, #8
 80006e2:	4083      	lsls	r3, r0
 80006e4:	2500      	movs	r5, #0
 80006e6:	4698      	mov	r8, r3
 80006e8:	e620      	b.n	800032c <__aeabi_ddiv+0x10c>
 80006ea:	f000 fba5 	bl	8000e38 <__clzsi2>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	3215      	adds	r2, #21
 80006f4:	3020      	adds	r0, #32
 80006f6:	2a1c      	cmp	r2, #28
 80006f8:	dc00      	bgt.n	80006fc <__aeabi_ddiv+0x4dc>
 80006fa:	e630      	b.n	800035e <__aeabi_ddiv+0x13e>
 80006fc:	4654      	mov	r4, sl
 80006fe:	3b08      	subs	r3, #8
 8000700:	2200      	movs	r2, #0
 8000702:	409c      	lsls	r4, r3
 8000704:	e635      	b.n	8000372 <__aeabi_ddiv+0x152>
 8000706:	230f      	movs	r3, #15
 8000708:	402b      	ands	r3, r5
 800070a:	2b04      	cmp	r3, #4
 800070c:	d100      	bne.n	8000710 <__aeabi_ddiv+0x4f0>
 800070e:	e652      	b.n	80003b6 <__aeabi_ddiv+0x196>
 8000710:	2305      	movs	r3, #5
 8000712:	425b      	negs	r3, r3
 8000714:	42ab      	cmp	r3, r5
 8000716:	419b      	sbcs	r3, r3
 8000718:	3504      	adds	r5, #4
 800071a:	425b      	negs	r3, r3
 800071c:	08ed      	lsrs	r5, r5, #3
 800071e:	4498      	add	r8, r3
 8000720:	e64a      	b.n	80003b8 <__aeabi_ddiv+0x198>
 8000722:	428c      	cmp	r4, r1
 8000724:	d1c5      	bne.n	80006b2 <__aeabi_ddiv+0x492>
 8000726:	42af      	cmp	r7, r5
 8000728:	d9c0      	bls.n	80006ac <__aeabi_ddiv+0x48c>
 800072a:	4690      	mov	r8, r2
 800072c:	e716      	b.n	800055c <__aeabi_ddiv+0x33c>
 800072e:	428a      	cmp	r2, r1
 8000730:	d800      	bhi.n	8000734 <__aeabi_ddiv+0x514>
 8000732:	e6ea      	b.n	800050a <__aeabi_ddiv+0x2ea>
 8000734:	1e83      	subs	r3, r0, #2
 8000736:	1909      	adds	r1, r1, r4
 8000738:	e6e7      	b.n	800050a <__aeabi_ddiv+0x2ea>
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <__aeabi_ddiv+0x5c4>)
 800073c:	0028      	movs	r0, r5
 800073e:	445a      	add	r2, fp
 8000740:	4643      	mov	r3, r8
 8000742:	4095      	lsls	r5, r2
 8000744:	4093      	lsls	r3, r2
 8000746:	40c8      	lsrs	r0, r1
 8000748:	1e6a      	subs	r2, r5, #1
 800074a:	4195      	sbcs	r5, r2
 800074c:	4644      	mov	r4, r8
 800074e:	4303      	orrs	r3, r0
 8000750:	432b      	orrs	r3, r5
 8000752:	40cc      	lsrs	r4, r1
 8000754:	075a      	lsls	r2, r3, #29
 8000756:	d092      	beq.n	800067e <__aeabi_ddiv+0x45e>
 8000758:	220f      	movs	r2, #15
 800075a:	401a      	ands	r2, r3
 800075c:	2a04      	cmp	r2, #4
 800075e:	d188      	bne.n	8000672 <__aeabi_ddiv+0x452>
 8000760:	e78d      	b.n	800067e <__aeabi_ddiv+0x45e>
 8000762:	0035      	movs	r5, r6
 8000764:	4281      	cmp	r1, r0
 8000766:	d000      	beq.n	800076a <__aeabi_ddiv+0x54a>
 8000768:	e74b      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 800076a:	9a00      	ldr	r2, [sp, #0]
 800076c:	4293      	cmp	r3, r2
 800076e:	d000      	beq.n	8000772 <__aeabi_ddiv+0x552>
 8000770:	e747      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 8000772:	e618      	b.n	80003a6 <__aeabi_ddiv+0x186>
 8000774:	42ae      	cmp	r6, r5
 8000776:	d99c      	bls.n	80006b2 <__aeabi_ddiv+0x492>
 8000778:	2302      	movs	r3, #2
 800077a:	425b      	negs	r3, r3
 800077c:	469c      	mov	ip, r3
 800077e:	9b00      	ldr	r3, [sp, #0]
 8000780:	44e0      	add	r8, ip
 8000782:	469c      	mov	ip, r3
 8000784:	4465      	add	r5, ip
 8000786:	429d      	cmp	r5, r3
 8000788:	419b      	sbcs	r3, r3
 800078a:	425b      	negs	r3, r3
 800078c:	191b      	adds	r3, r3, r4
 800078e:	18c9      	adds	r1, r1, r3
 8000790:	e6e4      	b.n	800055c <__aeabi_ddiv+0x33c>
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <__aeabi_ddiv+0x5c8>)
 8000794:	445a      	add	r2, fp
 8000796:	2a00      	cmp	r2, #0
 8000798:	dc00      	bgt.n	800079c <__aeabi_ddiv+0x57c>
 800079a:	e744      	b.n	8000626 <__aeabi_ddiv+0x406>
 800079c:	2301      	movs	r3, #1
 800079e:	2500      	movs	r5, #0
 80007a0:	4498      	add	r8, r3
 80007a2:	e609      	b.n	80003b8 <__aeabi_ddiv+0x198>
 80007a4:	0765      	lsls	r5, r4, #29
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	0b24      	lsrs	r4, r4, #12
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	431d      	orrs	r5, r3
 80007ae:	2300      	movs	r3, #0
 80007b0:	e590      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80007b2:	9e00      	ldr	r6, [sp, #0]
 80007b4:	3d02      	subs	r5, #2
 80007b6:	0072      	lsls	r2, r6, #1
 80007b8:	42b2      	cmp	r2, r6
 80007ba:	41bf      	sbcs	r7, r7
 80007bc:	427f      	negs	r7, r7
 80007be:	193c      	adds	r4, r7, r4
 80007c0:	1909      	adds	r1, r1, r4
 80007c2:	9200      	str	r2, [sp, #0]
 80007c4:	e7ce      	b.n	8000764 <__aeabi_ddiv+0x544>
 80007c6:	2480      	movs	r4, #128	; 0x80
 80007c8:	4643      	mov	r3, r8
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	431c      	orrs	r4, r3
 80007ce:	0324      	lsls	r4, r4, #12
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <__aeabi_ddiv+0x5cc>)
 80007d2:	0b24      	lsrs	r4, r4, #12
 80007d4:	e57e      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80007d6:	9a00      	ldr	r2, [sp, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3ea      	bcc.n	80007b2 <__aeabi_ddiv+0x592>
 80007dc:	0035      	movs	r5, r6
 80007de:	e7c4      	b.n	800076a <__aeabi_ddiv+0x54a>
 80007e0:	0000043e 	.word	0x0000043e
 80007e4:	0000041e 	.word	0x0000041e
 80007e8:	000003ff 	.word	0x000003ff
 80007ec:	000007ff 	.word	0x000007ff

080007f0 <__aeabi_dmul>:
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	4657      	mov	r7, sl
 80007f4:	464e      	mov	r6, r9
 80007f6:	4645      	mov	r5, r8
 80007f8:	46de      	mov	lr, fp
 80007fa:	b5e0      	push	{r5, r6, r7, lr}
 80007fc:	4698      	mov	r8, r3
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004b      	lsls	r3, r1, #1
 8000802:	0006      	movs	r6, r0
 8000804:	4692      	mov	sl, r2
 8000806:	b087      	sub	sp, #28
 8000808:	0b24      	lsrs	r4, r4, #12
 800080a:	0d5b      	lsrs	r3, r3, #21
 800080c:	0fcf      	lsrs	r7, r1, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d06c      	beq.n	80008ec <__aeabi_dmul+0xfc>
 8000812:	4add      	ldr	r2, [pc, #884]	; (8000b88 <__aeabi_dmul+0x398>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d100      	bne.n	800081a <__aeabi_dmul+0x2a>
 8000818:	e086      	b.n	8000928 <__aeabi_dmul+0x138>
 800081a:	0f42      	lsrs	r2, r0, #29
 800081c:	00e4      	lsls	r4, r4, #3
 800081e:	4314      	orrs	r4, r2
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0412      	lsls	r2, r2, #16
 8000824:	4314      	orrs	r4, r2
 8000826:	4ad9      	ldr	r2, [pc, #868]	; (8000b8c <__aeabi_dmul+0x39c>)
 8000828:	00c5      	lsls	r5, r0, #3
 800082a:	4694      	mov	ip, r2
 800082c:	4463      	add	r3, ip
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	4699      	mov	r9, r3
 8000834:	469b      	mov	fp, r3
 8000836:	4643      	mov	r3, r8
 8000838:	4642      	mov	r2, r8
 800083a:	031e      	lsls	r6, r3, #12
 800083c:	0fd2      	lsrs	r2, r2, #31
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4650      	mov	r0, sl
 8000842:	4690      	mov	r8, r2
 8000844:	0b36      	lsrs	r6, r6, #12
 8000846:	0d5b      	lsrs	r3, r3, #21
 8000848:	d100      	bne.n	800084c <__aeabi_dmul+0x5c>
 800084a:	e078      	b.n	800093e <__aeabi_dmul+0x14e>
 800084c:	4ace      	ldr	r2, [pc, #824]	; (8000b88 <__aeabi_dmul+0x398>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d01d      	beq.n	800088e <__aeabi_dmul+0x9e>
 8000852:	49ce      	ldr	r1, [pc, #824]	; (8000b8c <__aeabi_dmul+0x39c>)
 8000854:	0f42      	lsrs	r2, r0, #29
 8000856:	468c      	mov	ip, r1
 8000858:	9900      	ldr	r1, [sp, #0]
 800085a:	4463      	add	r3, ip
 800085c:	00f6      	lsls	r6, r6, #3
 800085e:	468c      	mov	ip, r1
 8000860:	4316      	orrs	r6, r2
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	449c      	add	ip, r3
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	4663      	mov	r3, ip
 800086a:	4316      	orrs	r6, r2
 800086c:	00c2      	lsls	r2, r0, #3
 800086e:	2000      	movs	r0, #0
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	9900      	ldr	r1, [sp, #0]
 8000874:	4643      	mov	r3, r8
 8000876:	3101      	adds	r1, #1
 8000878:	468c      	mov	ip, r1
 800087a:	4649      	mov	r1, r9
 800087c:	407b      	eors	r3, r7
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	290f      	cmp	r1, #15
 8000882:	d900      	bls.n	8000886 <__aeabi_dmul+0x96>
 8000884:	e07e      	b.n	8000984 <__aeabi_dmul+0x194>
 8000886:	4bc2      	ldr	r3, [pc, #776]	; (8000b90 <__aeabi_dmul+0x3a0>)
 8000888:	0089      	lsls	r1, r1, #2
 800088a:	5859      	ldr	r1, [r3, r1]
 800088c:	468f      	mov	pc, r1
 800088e:	4652      	mov	r2, sl
 8000890:	9b00      	ldr	r3, [sp, #0]
 8000892:	4332      	orrs	r2, r6
 8000894:	d000      	beq.n	8000898 <__aeabi_dmul+0xa8>
 8000896:	e156      	b.n	8000b46 <__aeabi_dmul+0x356>
 8000898:	49bb      	ldr	r1, [pc, #748]	; (8000b88 <__aeabi_dmul+0x398>)
 800089a:	2600      	movs	r6, #0
 800089c:	468c      	mov	ip, r1
 800089e:	4463      	add	r3, ip
 80008a0:	4649      	mov	r1, r9
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	4319      	orrs	r1, r3
 80008a8:	4689      	mov	r9, r1
 80008aa:	2002      	movs	r0, #2
 80008ac:	e7e1      	b.n	8000872 <__aeabi_dmul+0x82>
 80008ae:	4643      	mov	r3, r8
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	0034      	movs	r4, r6
 80008b4:	0015      	movs	r5, r2
 80008b6:	4683      	mov	fp, r0
 80008b8:	465b      	mov	r3, fp
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d05e      	beq.n	800097c <__aeabi_dmul+0x18c>
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dmul+0xd4>
 80008c2:	e1f3      	b.n	8000cac <__aeabi_dmul+0x4bc>
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d000      	beq.n	80008ca <__aeabi_dmul+0xda>
 80008c8:	e118      	b.n	8000afc <__aeabi_dmul+0x30c>
 80008ca:	2200      	movs	r2, #0
 80008cc:	2400      	movs	r4, #0
 80008ce:	2500      	movs	r5, #0
 80008d0:	9b01      	ldr	r3, [sp, #4]
 80008d2:	0512      	lsls	r2, r2, #20
 80008d4:	4322      	orrs	r2, r4
 80008d6:	07db      	lsls	r3, r3, #31
 80008d8:	431a      	orrs	r2, r3
 80008da:	0028      	movs	r0, r5
 80008dc:	0011      	movs	r1, r2
 80008de:	b007      	add	sp, #28
 80008e0:	bcf0      	pop	{r4, r5, r6, r7}
 80008e2:	46bb      	mov	fp, r7
 80008e4:	46b2      	mov	sl, r6
 80008e6:	46a9      	mov	r9, r5
 80008e8:	46a0      	mov	r8, r4
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ec:	0025      	movs	r5, r4
 80008ee:	4305      	orrs	r5, r0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dmul+0x104>
 80008f2:	e141      	b.n	8000b78 <__aeabi_dmul+0x388>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_dmul+0x10a>
 80008f8:	e1ad      	b.n	8000c56 <__aeabi_dmul+0x466>
 80008fa:	0020      	movs	r0, r4
 80008fc:	f000 fa9c 	bl	8000e38 <__clzsi2>
 8000900:	0001      	movs	r1, r0
 8000902:	0002      	movs	r2, r0
 8000904:	390b      	subs	r1, #11
 8000906:	231d      	movs	r3, #29
 8000908:	0010      	movs	r0, r2
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	0031      	movs	r1, r6
 800090e:	0035      	movs	r5, r6
 8000910:	3808      	subs	r0, #8
 8000912:	4084      	lsls	r4, r0
 8000914:	40d9      	lsrs	r1, r3
 8000916:	4085      	lsls	r5, r0
 8000918:	430c      	orrs	r4, r1
 800091a:	489e      	ldr	r0, [pc, #632]	; (8000b94 <__aeabi_dmul+0x3a4>)
 800091c:	1a83      	subs	r3, r0, r2
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	4699      	mov	r9, r3
 8000924:	469b      	mov	fp, r3
 8000926:	e786      	b.n	8000836 <__aeabi_dmul+0x46>
 8000928:	0005      	movs	r5, r0
 800092a:	4325      	orrs	r5, r4
 800092c:	d000      	beq.n	8000930 <__aeabi_dmul+0x140>
 800092e:	e11c      	b.n	8000b6a <__aeabi_dmul+0x37a>
 8000930:	2208      	movs	r2, #8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2302      	movs	r3, #2
 8000936:	2400      	movs	r4, #0
 8000938:	4691      	mov	r9, r2
 800093a:	469b      	mov	fp, r3
 800093c:	e77b      	b.n	8000836 <__aeabi_dmul+0x46>
 800093e:	4652      	mov	r2, sl
 8000940:	4332      	orrs	r2, r6
 8000942:	d100      	bne.n	8000946 <__aeabi_dmul+0x156>
 8000944:	e10a      	b.n	8000b5c <__aeabi_dmul+0x36c>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d100      	bne.n	800094c <__aeabi_dmul+0x15c>
 800094a:	e176      	b.n	8000c3a <__aeabi_dmul+0x44a>
 800094c:	0030      	movs	r0, r6
 800094e:	f000 fa73 	bl	8000e38 <__clzsi2>
 8000952:	0002      	movs	r2, r0
 8000954:	3a0b      	subs	r2, #11
 8000956:	231d      	movs	r3, #29
 8000958:	0001      	movs	r1, r0
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	4652      	mov	r2, sl
 800095e:	3908      	subs	r1, #8
 8000960:	40da      	lsrs	r2, r3
 8000962:	408e      	lsls	r6, r1
 8000964:	4316      	orrs	r6, r2
 8000966:	4652      	mov	r2, sl
 8000968:	408a      	lsls	r2, r1
 800096a:	9b00      	ldr	r3, [sp, #0]
 800096c:	4989      	ldr	r1, [pc, #548]	; (8000b94 <__aeabi_dmul+0x3a4>)
 800096e:	1a18      	subs	r0, r3, r0
 8000970:	0003      	movs	r3, r0
 8000972:	468c      	mov	ip, r1
 8000974:	4463      	add	r3, ip
 8000976:	2000      	movs	r0, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	e77a      	b.n	8000872 <__aeabi_dmul+0x82>
 800097c:	2400      	movs	r4, #0
 800097e:	2500      	movs	r5, #0
 8000980:	4a81      	ldr	r2, [pc, #516]	; (8000b88 <__aeabi_dmul+0x398>)
 8000982:	e7a5      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000984:	0c2f      	lsrs	r7, r5, #16
 8000986:	042d      	lsls	r5, r5, #16
 8000988:	0c2d      	lsrs	r5, r5, #16
 800098a:	002b      	movs	r3, r5
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	0412      	lsls	r2, r2, #16
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	4353      	muls	r3, r2
 8000994:	4698      	mov	r8, r3
 8000996:	0013      	movs	r3, r2
 8000998:	0028      	movs	r0, r5
 800099a:	437b      	muls	r3, r7
 800099c:	4699      	mov	r9, r3
 800099e:	4348      	muls	r0, r1
 80009a0:	4448      	add	r0, r9
 80009a2:	4683      	mov	fp, r0
 80009a4:	4640      	mov	r0, r8
 80009a6:	000b      	movs	r3, r1
 80009a8:	0c00      	lsrs	r0, r0, #16
 80009aa:	4682      	mov	sl, r0
 80009ac:	4658      	mov	r0, fp
 80009ae:	437b      	muls	r3, r7
 80009b0:	4450      	add	r0, sl
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	4581      	cmp	r9, r0
 80009b6:	d906      	bls.n	80009c6 <__aeabi_dmul+0x1d6>
 80009b8:	469a      	mov	sl, r3
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	025b      	lsls	r3, r3, #9
 80009be:	4699      	mov	r9, r3
 80009c0:	44ca      	add	sl, r9
 80009c2:	4653      	mov	r3, sl
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	469b      	mov	fp, r3
 80009ca:	4643      	mov	r3, r8
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	0400      	lsls	r0, r0, #16
 80009d0:	0c1b      	lsrs	r3, r3, #16
 80009d2:	4698      	mov	r8, r3
 80009d4:	0003      	movs	r3, r0
 80009d6:	4443      	add	r3, r8
 80009d8:	9304      	str	r3, [sp, #16]
 80009da:	0c33      	lsrs	r3, r6, #16
 80009dc:	4699      	mov	r9, r3
 80009de:	002b      	movs	r3, r5
 80009e0:	0436      	lsls	r6, r6, #16
 80009e2:	0c36      	lsrs	r6, r6, #16
 80009e4:	4373      	muls	r3, r6
 80009e6:	4698      	mov	r8, r3
 80009e8:	0033      	movs	r3, r6
 80009ea:	437b      	muls	r3, r7
 80009ec:	469a      	mov	sl, r3
 80009ee:	464b      	mov	r3, r9
 80009f0:	435d      	muls	r5, r3
 80009f2:	435f      	muls	r7, r3
 80009f4:	4643      	mov	r3, r8
 80009f6:	4455      	add	r5, sl
 80009f8:	0c18      	lsrs	r0, r3, #16
 80009fa:	1940      	adds	r0, r0, r5
 80009fc:	4582      	cmp	sl, r0
 80009fe:	d903      	bls.n	8000a08 <__aeabi_dmul+0x218>
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	025b      	lsls	r3, r3, #9
 8000a04:	469a      	mov	sl, r3
 8000a06:	4457      	add	r7, sl
 8000a08:	0c05      	lsrs	r5, r0, #16
 8000a0a:	19eb      	adds	r3, r5, r7
 8000a0c:	9305      	str	r3, [sp, #20]
 8000a0e:	4643      	mov	r3, r8
 8000a10:	041d      	lsls	r5, r3, #16
 8000a12:	0c2d      	lsrs	r5, r5, #16
 8000a14:	0400      	lsls	r0, r0, #16
 8000a16:	1940      	adds	r0, r0, r5
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	0424      	lsls	r4, r4, #16
 8000a1c:	0c24      	lsrs	r4, r4, #16
 8000a1e:	0027      	movs	r7, r4
 8000a20:	4357      	muls	r7, r2
 8000a22:	436a      	muls	r2, r5
 8000a24:	4690      	mov	r8, r2
 8000a26:	002a      	movs	r2, r5
 8000a28:	0c3b      	lsrs	r3, r7, #16
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	434a      	muls	r2, r1
 8000a2e:	4361      	muls	r1, r4
 8000a30:	4441      	add	r1, r8
 8000a32:	4451      	add	r1, sl
 8000a34:	4483      	add	fp, r0
 8000a36:	4588      	cmp	r8, r1
 8000a38:	d903      	bls.n	8000a42 <__aeabi_dmul+0x252>
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	025b      	lsls	r3, r3, #9
 8000a3e:	4698      	mov	r8, r3
 8000a40:	4442      	add	r2, r8
 8000a42:	043f      	lsls	r7, r7, #16
 8000a44:	0c0b      	lsrs	r3, r1, #16
 8000a46:	0c3f      	lsrs	r7, r7, #16
 8000a48:	0409      	lsls	r1, r1, #16
 8000a4a:	19c9      	adds	r1, r1, r7
 8000a4c:	0027      	movs	r7, r4
 8000a4e:	4698      	mov	r8, r3
 8000a50:	464b      	mov	r3, r9
 8000a52:	4377      	muls	r7, r6
 8000a54:	435c      	muls	r4, r3
 8000a56:	436e      	muls	r6, r5
 8000a58:	435d      	muls	r5, r3
 8000a5a:	0c3b      	lsrs	r3, r7, #16
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	19a4      	adds	r4, r4, r6
 8000a60:	444c      	add	r4, r9
 8000a62:	4442      	add	r2, r8
 8000a64:	9503      	str	r5, [sp, #12]
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d904      	bls.n	8000a74 <__aeabi_dmul+0x284>
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	4698      	mov	r8, r3
 8000a70:	4445      	add	r5, r8
 8000a72:	9503      	str	r5, [sp, #12]
 8000a74:	9b02      	ldr	r3, [sp, #8]
 8000a76:	043f      	lsls	r7, r7, #16
 8000a78:	445b      	add	r3, fp
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	4283      	cmp	r3, r0
 8000a7e:	4180      	sbcs	r0, r0
 8000a80:	0423      	lsls	r3, r4, #16
 8000a82:	4698      	mov	r8, r3
 8000a84:	9b05      	ldr	r3, [sp, #20]
 8000a86:	0c3f      	lsrs	r7, r7, #16
 8000a88:	4447      	add	r7, r8
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	1876      	adds	r6, r6, r1
 8000a8e:	428e      	cmp	r6, r1
 8000a90:	4189      	sbcs	r1, r1
 8000a92:	4447      	add	r7, r8
 8000a94:	4240      	negs	r0, r0
 8000a96:	183d      	adds	r5, r7, r0
 8000a98:	46a8      	mov	r8, r5
 8000a9a:	4693      	mov	fp, r2
 8000a9c:	4249      	negs	r1, r1
 8000a9e:	468a      	mov	sl, r1
 8000aa0:	44c3      	add	fp, r8
 8000aa2:	429f      	cmp	r7, r3
 8000aa4:	41bf      	sbcs	r7, r7
 8000aa6:	4580      	cmp	r8, r0
 8000aa8:	4180      	sbcs	r0, r0
 8000aaa:	9b03      	ldr	r3, [sp, #12]
 8000aac:	44da      	add	sl, fp
 8000aae:	4698      	mov	r8, r3
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	427f      	negs	r7, r7
 8000ab6:	4307      	orrs	r7, r0
 8000ab8:	0c24      	lsrs	r4, r4, #16
 8000aba:	4593      	cmp	fp, r2
 8000abc:	4192      	sbcs	r2, r2
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	4189      	sbcs	r1, r1
 8000ac2:	193f      	adds	r7, r7, r4
 8000ac4:	0ddc      	lsrs	r4, r3, #23
 8000ac6:	9b04      	ldr	r3, [sp, #16]
 8000ac8:	0275      	lsls	r5, r6, #9
 8000aca:	431d      	orrs	r5, r3
 8000acc:	1e68      	subs	r0, r5, #1
 8000ace:	4185      	sbcs	r5, r0
 8000ad0:	4653      	mov	r3, sl
 8000ad2:	4252      	negs	r2, r2
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	18bf      	adds	r7, r7, r2
 8000ada:	4447      	add	r7, r8
 8000adc:	0df6      	lsrs	r6, r6, #23
 8000ade:	027f      	lsls	r7, r7, #9
 8000ae0:	4335      	orrs	r5, r6
 8000ae2:	025a      	lsls	r2, r3, #9
 8000ae4:	433c      	orrs	r4, r7
 8000ae6:	4315      	orrs	r5, r2
 8000ae8:	01fb      	lsls	r3, r7, #7
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dmul+0x2fe>
 8000aec:	e0c1      	b.n	8000c72 <__aeabi_dmul+0x482>
 8000aee:	2101      	movs	r1, #1
 8000af0:	086a      	lsrs	r2, r5, #1
 8000af2:	400d      	ands	r5, r1
 8000af4:	4315      	orrs	r5, r2
 8000af6:	07e2      	lsls	r2, r4, #31
 8000af8:	4315      	orrs	r5, r2
 8000afa:	0864      	lsrs	r4, r4, #1
 8000afc:	4926      	ldr	r1, [pc, #152]	; (8000b98 <__aeabi_dmul+0x3a8>)
 8000afe:	4461      	add	r1, ip
 8000b00:	2900      	cmp	r1, #0
 8000b02:	dd56      	ble.n	8000bb2 <__aeabi_dmul+0x3c2>
 8000b04:	076b      	lsls	r3, r5, #29
 8000b06:	d009      	beq.n	8000b1c <__aeabi_dmul+0x32c>
 8000b08:	220f      	movs	r2, #15
 8000b0a:	402a      	ands	r2, r5
 8000b0c:	2a04      	cmp	r2, #4
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dmul+0x32c>
 8000b10:	1d2a      	adds	r2, r5, #4
 8000b12:	42aa      	cmp	r2, r5
 8000b14:	41ad      	sbcs	r5, r5
 8000b16:	426d      	negs	r5, r5
 8000b18:	1964      	adds	r4, r4, r5
 8000b1a:	0015      	movs	r5, r2
 8000b1c:	01e3      	lsls	r3, r4, #7
 8000b1e:	d504      	bpl.n	8000b2a <__aeabi_dmul+0x33a>
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <__aeabi_dmul+0x3ac>)
 8000b24:	00c9      	lsls	r1, r1, #3
 8000b26:	4014      	ands	r4, r2
 8000b28:	4461      	add	r1, ip
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <__aeabi_dmul+0x3b0>)
 8000b2c:	4291      	cmp	r1, r2
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_dmul+0x342>
 8000b30:	e724      	b.n	800097c <__aeabi_dmul+0x18c>
 8000b32:	0762      	lsls	r2, r4, #29
 8000b34:	08ed      	lsrs	r5, r5, #3
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	0549      	lsls	r1, r1, #21
 8000b3a:	4315      	orrs	r5, r2
 8000b3c:	0b24      	lsrs	r4, r4, #12
 8000b3e:	0d4a      	lsrs	r2, r1, #21
 8000b40:	e6c6      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000b42:	9701      	str	r7, [sp, #4]
 8000b44:	e6b8      	b.n	80008b8 <__aeabi_dmul+0xc8>
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <__aeabi_dmul+0x398>)
 8000b48:	2003      	movs	r0, #3
 8000b4a:	4694      	mov	ip, r2
 8000b4c:	4463      	add	r3, ip
 8000b4e:	464a      	mov	r2, r9
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4691      	mov	r9, r2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	e68a      	b.n	8000872 <__aeabi_dmul+0x82>
 8000b5c:	4649      	mov	r1, r9
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4319      	orrs	r1, r3
 8000b62:	4689      	mov	r9, r1
 8000b64:	2600      	movs	r6, #0
 8000b66:	2001      	movs	r0, #1
 8000b68:	e683      	b.n	8000872 <__aeabi_dmul+0x82>
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2303      	movs	r3, #3
 8000b70:	0005      	movs	r5, r0
 8000b72:	4691      	mov	r9, r2
 8000b74:	469b      	mov	fp, r3
 8000b76:	e65e      	b.n	8000836 <__aeabi_dmul+0x46>
 8000b78:	2304      	movs	r3, #4
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	2400      	movs	r4, #0
 8000b84:	469b      	mov	fp, r3
 8000b86:	e656      	b.n	8000836 <__aeabi_dmul+0x46>
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	fffffc01 	.word	0xfffffc01
 8000b90:	08002944 	.word	0x08002944
 8000b94:	fffffc0d 	.word	0xfffffc0d
 8000b98:	000003ff 	.word	0x000003ff
 8000b9c:	feffffff 	.word	0xfeffffff
 8000ba0:	000007fe 	.word	0x000007fe
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2480      	movs	r4, #128	; 0x80
 8000ba8:	2500      	movs	r5, #0
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	0324      	lsls	r4, r4, #12
 8000bb0:	e68e      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	1a40      	subs	r0, r0, r1
 8000bb6:	2838      	cmp	r0, #56	; 0x38
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_dmul+0x3cc>
 8000bba:	e686      	b.n	80008ca <__aeabi_dmul+0xda>
 8000bbc:	281f      	cmp	r0, #31
 8000bbe:	dd5b      	ble.n	8000c78 <__aeabi_dmul+0x488>
 8000bc0:	221f      	movs	r2, #31
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	1a51      	subs	r1, r2, r1
 8000bc8:	40cb      	lsrs	r3, r1
 8000bca:	0019      	movs	r1, r3
 8000bcc:	2820      	cmp	r0, #32
 8000bce:	d003      	beq.n	8000bd8 <__aeabi_dmul+0x3e8>
 8000bd0:	4a3b      	ldr	r2, [pc, #236]	; (8000cc0 <__aeabi_dmul+0x4d0>)
 8000bd2:	4462      	add	r2, ip
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	4325      	orrs	r5, r4
 8000bd8:	1e6a      	subs	r2, r5, #1
 8000bda:	4195      	sbcs	r5, r2
 8000bdc:	002a      	movs	r2, r5
 8000bde:	430a      	orrs	r2, r1
 8000be0:	2107      	movs	r1, #7
 8000be2:	000d      	movs	r5, r1
 8000be4:	2400      	movs	r4, #0
 8000be6:	4015      	ands	r5, r2
 8000be8:	4211      	tst	r1, r2
 8000bea:	d05b      	beq.n	8000ca4 <__aeabi_dmul+0x4b4>
 8000bec:	210f      	movs	r1, #15
 8000bee:	2400      	movs	r4, #0
 8000bf0:	4011      	ands	r1, r2
 8000bf2:	2904      	cmp	r1, #4
 8000bf4:	d053      	beq.n	8000c9e <__aeabi_dmul+0x4ae>
 8000bf6:	1d11      	adds	r1, r2, #4
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	4192      	sbcs	r2, r2
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	18a4      	adds	r4, r4, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	0223      	lsls	r3, r4, #8
 8000c04:	d54b      	bpl.n	8000c9e <__aeabi_dmul+0x4ae>
 8000c06:	2201      	movs	r2, #1
 8000c08:	2400      	movs	r4, #0
 8000c0a:	2500      	movs	r5, #0
 8000c0c:	e660      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	421c      	tst	r4, r3
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dmul+0x43a>
 8000c16:	421e      	tst	r6, r3
 8000c18:	d107      	bne.n	8000c2a <__aeabi_dmul+0x43a>
 8000c1a:	4333      	orrs	r3, r6
 8000c1c:	031c      	lsls	r4, r3, #12
 8000c1e:	4643      	mov	r3, r8
 8000c20:	0015      	movs	r5, r2
 8000c22:	0b24      	lsrs	r4, r4, #12
 8000c24:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	e652      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0312      	lsls	r2, r2, #12
 8000c2e:	4314      	orrs	r4, r2
 8000c30:	0324      	lsls	r4, r4, #12
 8000c32:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000c34:	0b24      	lsrs	r4, r4, #12
 8000c36:	9701      	str	r7, [sp, #4]
 8000c38:	e64a      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c3a:	f000 f8fd 	bl	8000e38 <__clzsi2>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	001a      	movs	r2, r3
 8000c42:	3215      	adds	r2, #21
 8000c44:	3020      	adds	r0, #32
 8000c46:	2a1c      	cmp	r2, #28
 8000c48:	dc00      	bgt.n	8000c4c <__aeabi_dmul+0x45c>
 8000c4a:	e684      	b.n	8000956 <__aeabi_dmul+0x166>
 8000c4c:	4656      	mov	r6, sl
 8000c4e:	3b08      	subs	r3, #8
 8000c50:	2200      	movs	r2, #0
 8000c52:	409e      	lsls	r6, r3
 8000c54:	e689      	b.n	800096a <__aeabi_dmul+0x17a>
 8000c56:	f000 f8ef 	bl	8000e38 <__clzsi2>
 8000c5a:	0001      	movs	r1, r0
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	3115      	adds	r1, #21
 8000c60:	3220      	adds	r2, #32
 8000c62:	291c      	cmp	r1, #28
 8000c64:	dc00      	bgt.n	8000c68 <__aeabi_dmul+0x478>
 8000c66:	e64e      	b.n	8000906 <__aeabi_dmul+0x116>
 8000c68:	0034      	movs	r4, r6
 8000c6a:	3808      	subs	r0, #8
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	4084      	lsls	r4, r0
 8000c70:	e653      	b.n	800091a <__aeabi_dmul+0x12a>
 8000c72:	9b00      	ldr	r3, [sp, #0]
 8000c74:	469c      	mov	ip, r3
 8000c76:	e741      	b.n	8000afc <__aeabi_dmul+0x30c>
 8000c78:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <__aeabi_dmul+0x4d4>)
 8000c7a:	0022      	movs	r2, r4
 8000c7c:	4461      	add	r1, ip
 8000c7e:	002e      	movs	r6, r5
 8000c80:	408d      	lsls	r5, r1
 8000c82:	408a      	lsls	r2, r1
 8000c84:	40c6      	lsrs	r6, r0
 8000c86:	1e69      	subs	r1, r5, #1
 8000c88:	418d      	sbcs	r5, r1
 8000c8a:	4332      	orrs	r2, r6
 8000c8c:	432a      	orrs	r2, r5
 8000c8e:	40c4      	lsrs	r4, r0
 8000c90:	0753      	lsls	r3, r2, #29
 8000c92:	d0b6      	beq.n	8000c02 <__aeabi_dmul+0x412>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4011      	ands	r1, r2
 8000c98:	2904      	cmp	r1, #4
 8000c9a:	d1ac      	bne.n	8000bf6 <__aeabi_dmul+0x406>
 8000c9c:	e7b1      	b.n	8000c02 <__aeabi_dmul+0x412>
 8000c9e:	0765      	lsls	r5, r4, #29
 8000ca0:	0264      	lsls	r4, r4, #9
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	08d2      	lsrs	r2, r2, #3
 8000ca6:	4315      	orrs	r5, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e611      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0312      	lsls	r2, r2, #12
 8000cb0:	4314      	orrs	r4, r2
 8000cb2:	0324      	lsls	r4, r4, #12
 8000cb4:	4a01      	ldr	r2, [pc, #4]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000cb6:	0b24      	lsrs	r4, r4, #12
 8000cb8:	e60a      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	0000043e 	.word	0x0000043e
 8000cc4:	0000041e 	.word	0x0000041e

08000cc8 <__aeabi_i2d>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d016      	beq.n	8000cfc <__aeabi_i2d+0x34>
 8000cce:	17c3      	asrs	r3, r0, #31
 8000cd0:	18c5      	adds	r5, r0, r3
 8000cd2:	405d      	eors	r5, r3
 8000cd4:	0fc4      	lsrs	r4, r0, #31
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f000 f8ae 	bl	8000e38 <__clzsi2>
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <__aeabi_i2d+0x5c>)
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	280a      	cmp	r0, #10
 8000ce2:	dc16      	bgt.n	8000d12 <__aeabi_i2d+0x4a>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	002e      	movs	r6, r5
 8000ce8:	3315      	adds	r3, #21
 8000cea:	409e      	lsls	r6, r3
 8000cec:	230b      	movs	r3, #11
 8000cee:	1a18      	subs	r0, r3, r0
 8000cf0:	40c5      	lsrs	r5, r0
 8000cf2:	0553      	lsls	r3, r2, #21
 8000cf4:	032d      	lsls	r5, r5, #12
 8000cf6:	0b2d      	lsrs	r5, r5, #12
 8000cf8:	0d5b      	lsrs	r3, r3, #21
 8000cfa:	e003      	b.n	8000d04 <__aeabi_i2d+0x3c>
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2500      	movs	r5, #0
 8000d02:	2600      	movs	r6, #0
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	432b      	orrs	r3, r5
 8000d08:	07e4      	lsls	r4, r4, #31
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	0019      	movs	r1, r3
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
 8000d12:	380b      	subs	r0, #11
 8000d14:	4085      	lsls	r5, r0
 8000d16:	0553      	lsls	r3, r2, #21
 8000d18:	032d      	lsls	r5, r5, #12
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	0b2d      	lsrs	r5, r5, #12
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	e7f0      	b.n	8000d04 <__aeabi_i2d+0x3c>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	0000041e 	.word	0x0000041e

08000d28 <__aeabi_d2f>:
 8000d28:	0002      	movs	r2, r0
 8000d2a:	004b      	lsls	r3, r1, #1
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	0308      	lsls	r0, r1, #12
 8000d30:	0d5b      	lsrs	r3, r3, #21
 8000d32:	4e3d      	ldr	r6, [pc, #244]	; (8000e28 <__aeabi_d2f+0x100>)
 8000d34:	0fcc      	lsrs	r4, r1, #31
 8000d36:	0a40      	lsrs	r0, r0, #9
 8000d38:	0f51      	lsrs	r1, r2, #29
 8000d3a:	1c5f      	adds	r7, r3, #1
 8000d3c:	4308      	orrs	r0, r1
 8000d3e:	00d5      	lsls	r5, r2, #3
 8000d40:	4237      	tst	r7, r6
 8000d42:	d00a      	beq.n	8000d5a <__aeabi_d2f+0x32>
 8000d44:	4939      	ldr	r1, [pc, #228]	; (8000e2c <__aeabi_d2f+0x104>)
 8000d46:	185e      	adds	r6, r3, r1
 8000d48:	2efe      	cmp	r6, #254	; 0xfe
 8000d4a:	dd16      	ble.n	8000d7a <__aeabi_d2f+0x52>
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	2100      	movs	r1, #0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	430b      	orrs	r3, r1
 8000d54:	07e0      	lsls	r0, r4, #31
 8000d56:	4318      	orrs	r0, r3
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <__aeabi_d2f+0x44>
 8000d5e:	4328      	orrs	r0, r5
 8000d60:	d027      	beq.n	8000db2 <__aeabi_d2f+0x8a>
 8000d62:	2105      	movs	r1, #5
 8000d64:	0189      	lsls	r1, r1, #6
 8000d66:	0a49      	lsrs	r1, r1, #9
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000d6c:	4305      	orrs	r5, r0
 8000d6e:	d0ed      	beq.n	8000d4c <__aeabi_d2f+0x24>
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	03c9      	lsls	r1, r1, #15
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	4301      	orrs	r1, r0
 8000d78:	e7ea      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	dd1c      	ble.n	8000db8 <__aeabi_d2f+0x90>
 8000d7e:	0192      	lsls	r2, r2, #6
 8000d80:	0011      	movs	r1, r2
 8000d82:	1e4a      	subs	r2, r1, #1
 8000d84:	4191      	sbcs	r1, r2
 8000d86:	00c0      	lsls	r0, r0, #3
 8000d88:	0f6d      	lsrs	r5, r5, #29
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	4329      	orrs	r1, r5
 8000d8e:	074b      	lsls	r3, r1, #29
 8000d90:	d048      	beq.n	8000e24 <__aeabi_d2f+0xfc>
 8000d92:	230f      	movs	r3, #15
 8000d94:	400b      	ands	r3, r1
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_d2f+0x74>
 8000d9a:	3104      	adds	r1, #4
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	04db      	lsls	r3, r3, #19
 8000da0:	400b      	ands	r3, r1
 8000da2:	d03f      	beq.n	8000e24 <__aeabi_d2f+0xfc>
 8000da4:	1c72      	adds	r2, r6, #1
 8000da6:	2efe      	cmp	r6, #254	; 0xfe
 8000da8:	d0d0      	beq.n	8000d4c <__aeabi_d2f+0x24>
 8000daa:	0189      	lsls	r1, r1, #6
 8000dac:	0a49      	lsrs	r1, r1, #9
 8000dae:	b2d3      	uxtb	r3, r2
 8000db0:	e7ce      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000db2:	2300      	movs	r3, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	e7cb      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000db8:	0032      	movs	r2, r6
 8000dba:	3217      	adds	r2, #23
 8000dbc:	db22      	blt.n	8000e04 <__aeabi_d2f+0xdc>
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	221e      	movs	r2, #30
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	4308      	orrs	r0, r1
 8000dc6:	1b92      	subs	r2, r2, r6
 8000dc8:	2a1f      	cmp	r2, #31
 8000dca:	dd1d      	ble.n	8000e08 <__aeabi_d2f+0xe0>
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4249      	negs	r1, r1
 8000dd0:	1b8e      	subs	r6, r1, r6
 8000dd2:	0001      	movs	r1, r0
 8000dd4:	40f1      	lsrs	r1, r6
 8000dd6:	000e      	movs	r6, r1
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d004      	beq.n	8000de6 <__aeabi_d2f+0xbe>
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <__aeabi_d2f+0x108>)
 8000dde:	4694      	mov	ip, r2
 8000de0:	4463      	add	r3, ip
 8000de2:	4098      	lsls	r0, r3
 8000de4:	4305      	orrs	r5, r0
 8000de6:	0029      	movs	r1, r5
 8000de8:	1e4d      	subs	r5, r1, #1
 8000dea:	41a9      	sbcs	r1, r5
 8000dec:	4331      	orrs	r1, r6
 8000dee:	2600      	movs	r6, #0
 8000df0:	074b      	lsls	r3, r1, #29
 8000df2:	d1ce      	bne.n	8000d92 <__aeabi_d2f+0x6a>
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	000b      	movs	r3, r1
 8000df8:	04c0      	lsls	r0, r0, #19
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4003      	ands	r3, r0
 8000dfe:	4201      	tst	r1, r0
 8000e00:	d1d3      	bne.n	8000daa <__aeabi_d2f+0x82>
 8000e02:	e7af      	b.n	8000d64 <__aeabi_d2f+0x3c>
 8000e04:	2300      	movs	r3, #0
 8000e06:	e7ac      	b.n	8000d62 <__aeabi_d2f+0x3a>
 8000e08:	490a      	ldr	r1, [pc, #40]	; (8000e34 <__aeabi_d2f+0x10c>)
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	0029      	movs	r1, r5
 8000e0e:	4463      	add	r3, ip
 8000e10:	40d1      	lsrs	r1, r2
 8000e12:	409d      	lsls	r5, r3
 8000e14:	000a      	movs	r2, r1
 8000e16:	0029      	movs	r1, r5
 8000e18:	4098      	lsls	r0, r3
 8000e1a:	1e4d      	subs	r5, r1, #1
 8000e1c:	41a9      	sbcs	r1, r5
 8000e1e:	4301      	orrs	r1, r0
 8000e20:	4311      	orrs	r1, r2
 8000e22:	e7e4      	b.n	8000dee <__aeabi_d2f+0xc6>
 8000e24:	0033      	movs	r3, r6
 8000e26:	e79d      	b.n	8000d64 <__aeabi_d2f+0x3c>
 8000e28:	000007fe 	.word	0x000007fe
 8000e2c:	fffffc80 	.word	0xfffffc80
 8000e30:	fffffca2 	.word	0xfffffca2
 8000e34:	fffffc82 	.word	0xfffffc82

08000e38 <__clzsi2>:
 8000e38:	211c      	movs	r1, #28
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d301      	bcc.n	8000e46 <__clzsi2+0xe>
 8000e42:	0c00      	lsrs	r0, r0, #16
 8000e44:	3910      	subs	r1, #16
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	d301      	bcc.n	8000e50 <__clzsi2+0x18>
 8000e4c:	0a00      	lsrs	r0, r0, #8
 8000e4e:	3908      	subs	r1, #8
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	4298      	cmp	r0, r3
 8000e54:	d301      	bcc.n	8000e5a <__clzsi2+0x22>
 8000e56:	0900      	lsrs	r0, r0, #4
 8000e58:	3904      	subs	r1, #4
 8000e5a:	a202      	add	r2, pc, #8	; (adr r2, 8000e64 <__clzsi2+0x2c>)
 8000e5c:	5c10      	ldrb	r0, [r2, r0]
 8000e5e:	1840      	adds	r0, r0, r1
 8000e60:	4770      	bx	lr
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	02020304 	.word	0x02020304
 8000e68:	01010101 	.word	0x01010101
	...

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	init_debug();
	init_timer();
 8000e7a:	f000 f827 	bl	8000ecc <init_timer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 fac9 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f877 	bl	8000f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 f94f 	bl	8001128 <MX_GPIO_Init>
  MX_CAN_Init();
 8000e8a:	f000 f8b3 	bl	8000ff4 <MX_CAN_Init>
  MX_TIM3_Init();
 8000e8e:	f000 f8e7 	bl	8001060 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(100);
 8000e92:	2064      	movs	r0, #100	; 0x64
 8000e94:	f000 fb22 	bl	80014dc <HAL_Delay>
	  int count = TIM3->CNT;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <main+0x4c>)
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	607b      	str	r3, [r7, #4]
	  velocity = compute_rpm(count);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f000 f841 	bl	8000f28 <compute_rpm>
 8000ea6:	1c02      	adds	r2, r0, #0
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <main+0x50>)
 8000eaa:	601a      	str	r2, [r3, #0]
	  // TODO: pass this velocity value via CAN
	  // set leading bit to be 1/0 based on whether v is positive/negative
	  TIM3->CNT=0;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <main+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000eb2:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <main+0x54>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fe6b 	bl	8001b92 <HAL_GPIO_TogglePin>
  {
 8000ebc:	e7e9      	b.n	8000e92 <main+0x1e>
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	40000400 	.word	0x40000400
 8000ec4:	20000098 	.word	0x20000098
 8000ec8:	48000400 	.word	0x48000400

08000ecc <init_timer>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void init_timer(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
//	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <init_timer+0x50>)
 8000ed2:	69da      	ldr	r2, [r3, #28]
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <init_timer+0x50>)
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	61da      	str	r2, [r3, #28]

	TIM3->ARR = 0xFFFF;
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <init_timer+0x54>)
 8000ede:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <init_timer+0x58>)
 8000ee0:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <init_timer+0x54>)
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <init_timer+0x54>)
 8000ee8:	2102      	movs	r1, #2
 8000eea:	31ff      	adds	r1, #255	; 0xff
 8000eec:	430a      	orrs	r2, r1
 8000eee:	619a      	str	r2, [r3, #24]
	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <init_timer+0x54>)
 8000ef2:	6a1a      	ldr	r2, [r3, #32]
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <init_timer+0x54>)
 8000ef6:	2122      	movs	r1, #34	; 0x22
 8000ef8:	438a      	bics	r2, r1
 8000efa:	621a      	str	r2, [r3, #32]
	TIM3->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <init_timer+0x54>)
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <init_timer+0x54>)
 8000f02:	2103      	movs	r1, #3
 8000f04:	430a      	orrs	r2, r1
 8000f06:	609a      	str	r2, [r3, #8]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <init_timer+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <init_timer+0x54>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40000400 	.word	0x40000400
 8000f24:	0000ffff 	.word	0x0000ffff

08000f28 <compute_rpm>:

float compute_rpm(int n) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	return (2*M_PI*R*n)/(N*SAMPLING_PERIOD_S);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff fec9 	bl	8000cc8 <__aeabi_i2d>
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <compute_rpm+0x3c>)
 8000f38:	4b0b      	ldr	r3, [pc, #44]	; (8000f68 <compute_rpm+0x40>)
 8000f3a:	f7ff fc59 	bl	80007f0 <__aeabi_dmul>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	000b      	movs	r3, r1
 8000f42:	0010      	movs	r0, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	4a09      	ldr	r2, [pc, #36]	; (8000f6c <compute_rpm+0x44>)
 8000f48:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <compute_rpm+0x48>)
 8000f4a:	f7ff f969 	bl	8000220 <__aeabi_ddiv>
 8000f4e:	0002      	movs	r2, r0
 8000f50:	000b      	movs	r3, r1
 8000f52:	0010      	movs	r0, r2
 8000f54:	0019      	movs	r1, r3
 8000f56:	f7ff fee7 	bl	8000d28 <__aeabi_d2f>
 8000f5a:	1c03      	adds	r3, r0, #0
}
 8000f5c:	1c18      	adds	r0, r3, #0
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	96943152 	.word	0x96943152
 8000f68:	3fd6ebca 	.word	0x3fd6ebca
 8000f6c:	33333334 	.word	0x33333334
 8000f70:	3ff33333 	.word	0x3ff33333

08000f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b093      	sub	sp, #76	; 0x4c
 8000f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7a:	2414      	movs	r4, #20
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	0018      	movs	r0, r3
 8000f80:	2334      	movs	r3, #52	; 0x34
 8000f82:	001a      	movs	r2, r3
 8000f84:	2100      	movs	r1, #0
 8000f86:	f001 fc99 	bl	80028bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2310      	movs	r3, #16
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f001 fc92 	bl	80028bc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f98:	0021      	movs	r1, r4
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2210      	movs	r2, #16
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f000 fe07 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000fbe:	f000 f909 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2207      	movs	r2, #7
 8000fc6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2100      	movs	r1, #0
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 f978 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000fe4:	1e03      	subs	r3, r0, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fe8:	f000 f8f4 	bl	80011d4 <Error_Handler>
  }
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b013      	add	sp, #76	; 0x4c
 8000ff2:	bd90      	pop	{r4, r7, pc}

08000ff4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_CAN_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <MX_CAN_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_CAN_Init+0x64>)
 8001000:	2210      	movs	r2, #16
 8001002:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_CAN_Init+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_CAN_Init+0x64>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_CAN_Init+0x64>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_CAN_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_CAN_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MX_CAN_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_CAN_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_CAN_Init+0x64>)
 8001030:	2200      	movs	r2, #0
 8001032:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_CAN_Init+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_CAN_Init+0x64>)
 800103c:	2200      	movs	r2, #0
 800103e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <MX_CAN_Init+0x64>)
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fa6e 	bl	8001524 <HAL_CAN_Init>
 8001048:	1e03      	subs	r3, r0, #0
 800104a:	d001      	beq.n	8001050 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800104c:	f000 f8c2 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	20000028 	.word	0x20000028
 800105c:	40006400 	.word	0x40006400

08001060 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b08d      	sub	sp, #52	; 0x34
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001066:	240c      	movs	r4, #12
 8001068:	193b      	adds	r3, r7, r4
 800106a:	0018      	movs	r0, r3
 800106c:	2324      	movs	r3, #36	; 0x24
 800106e:	001a      	movs	r2, r3
 8001070:	2100      	movs	r1, #0
 8001072:	f001 fc23 	bl	80028bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	0018      	movs	r0, r3
 800107a:	2308      	movs	r3, #8
 800107c:	001a      	movs	r2, r3
 800107e:	2100      	movs	r1, #0
 8001080:	f001 fc1c 	bl	80028bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <MX_TIM3_Init+0xbc>)
 8001086:	4a26      	ldr	r2, [pc, #152]	; (8001120 <MX_TIM3_Init+0xc0>)
 8001088:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <MX_TIM3_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b22      	ldr	r3, [pc, #136]	; (800111c <MX_TIM3_Init+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <MX_TIM3_Init+0xbc>)
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <MX_TIM3_Init+0xc4>)
 800109a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <MX_TIM3_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <MX_TIM3_Init+0xbc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010a8:	0021      	movs	r1, r4
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2201      	movs	r2, #1
 80010ba:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2201      	movs	r2, #1
 80010d2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010e0:	187a      	adds	r2, r7, r1
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_TIM3_Init+0xbc>)
 80010e4:	0011      	movs	r1, r2
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 fa4e 	bl	8002588 <HAL_TIM_Encoder_Init>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80010f0:	f000 f870 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001100:	1d3a      	adds	r2, r7, #4
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_TIM3_Init+0xbc>)
 8001104:	0011      	movs	r1, r2
 8001106:	0018      	movs	r0, r3
 8001108:	f001 fb5c 	bl	80027c4 <HAL_TIMEx_MasterConfigSynchronization>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001110:	f000 f860 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b00d      	add	sp, #52	; 0x34
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	20000050 	.word	0x20000050
 8001120:	40000400 	.word	0x40000400
 8001124:	0000ffff 	.word	0x0000ffff

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b089      	sub	sp, #36	; 0x24
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	240c      	movs	r4, #12
 8001130:	193b      	adds	r3, r7, r4
 8001132:	0018      	movs	r0, r3
 8001134:	2314      	movs	r3, #20
 8001136:	001a      	movs	r2, r3
 8001138:	2100      	movs	r1, #0
 800113a:	f001 fbbf 	bl	80028bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <MX_GPIO_Init+0xa4>)
 8001140:	695a      	ldr	r2, [r3, #20]
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_GPIO_Init+0xa4>)
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	03c9      	lsls	r1, r1, #15
 8001148:	430a      	orrs	r2, r1
 800114a:	615a      	str	r2, [r3, #20]
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_GPIO_Init+0xa4>)
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	2380      	movs	r3, #128	; 0x80
 8001152:	03db      	lsls	r3, r3, #15
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_GPIO_Init+0xa4>)
 800115c:	695a      	ldr	r2, [r3, #20]
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_GPIO_Init+0xa4>)
 8001160:	2180      	movs	r1, #128	; 0x80
 8001162:	0289      	lsls	r1, r1, #10
 8001164:	430a      	orrs	r2, r1
 8001166:	615a      	str	r2, [r3, #20]
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_GPIO_Init+0xa4>)
 800116a:	695a      	ldr	r2, [r3, #20]
 800116c:	2380      	movs	r3, #128	; 0x80
 800116e:	029b      	lsls	r3, r3, #10
 8001170:	4013      	ands	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_GPIO_Init+0xa4>)
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_GPIO_Init+0xa4>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	02c9      	lsls	r1, r1, #11
 8001180:	430a      	orrs	r2, r1
 8001182:	615a      	str	r2, [r3, #20]
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_GPIO_Init+0xa4>)
 8001186:	695a      	ldr	r2, [r3, #20]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	02db      	lsls	r3, r3, #11
 800118c:	4013      	ands	r3, r2
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_GPIO_Port, DEBUG_Pin, GPIO_PIN_RESET);
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_GPIO_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	0018      	movs	r0, r3
 800119a:	f000 fcdd 	bl	8001b58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 800119e:	0021      	movs	r1, r4
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2201      	movs	r2, #1
 80011aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	4a05      	ldr	r2, [pc, #20]	; (80011d0 <MX_GPIO_Init+0xa8>)
 80011bc:	0019      	movs	r1, r3
 80011be:	0010      	movs	r0, r2
 80011c0:	f000 fb62 	bl	8001888 <HAL_GPIO_Init>

}
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b009      	add	sp, #36	; 0x24
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000400 	.word	0x48000400

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_MspInit+0x44>)
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_MspInit+0x44>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_MspInit+0x44>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x44>)
 8001200:	69da      	ldr	r2, [r3, #28]
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_MspInit+0x44>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0549      	lsls	r1, r1, #21
 8001208:	430a      	orrs	r2, r1
 800120a:	61da      	str	r2, [r3, #28]
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_MspInit+0x44>)
 800120e:	69da      	ldr	r2, [r3, #28]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	055b      	lsls	r3, r3, #21
 8001214:	4013      	ands	r3, r2
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b08b      	sub	sp, #44	; 0x2c
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	2414      	movs	r4, #20
 8001232:	193b      	adds	r3, r7, r4
 8001234:	0018      	movs	r0, r3
 8001236:	2314      	movs	r3, #20
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f001 fb3e 	bl	80028bc <memset>
  if(hcan->Instance==CAN)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_CAN_MspInit+0x94>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d133      	bne.n	80012b2 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <HAL_CAN_MspInit+0x98>)
 800124c:	69da      	ldr	r2, [r3, #28]
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <HAL_CAN_MspInit+0x98>)
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	0489      	lsls	r1, r1, #18
 8001254:	430a      	orrs	r2, r1
 8001256:	61da      	str	r2, [r3, #28]
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <HAL_CAN_MspInit+0x98>)
 800125a:	69da      	ldr	r2, [r3, #28]
 800125c:	2380      	movs	r3, #128	; 0x80
 800125e:	049b      	lsls	r3, r3, #18
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <HAL_CAN_MspInit+0x98>)
 8001268:	695a      	ldr	r2, [r3, #20]
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <HAL_CAN_MspInit+0x98>)
 800126c:	2180      	movs	r1, #128	; 0x80
 800126e:	0289      	lsls	r1, r1, #10
 8001270:	430a      	orrs	r2, r1
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_CAN_MspInit+0x98>)
 8001276:	695a      	ldr	r2, [r3, #20]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	4013      	ands	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	22c0      	movs	r2, #192	; 0xc0
 8001286:	0152      	lsls	r2, r2, #5
 8001288:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	0021      	movs	r1, r4
 800128c:	187b      	adds	r3, r7, r1
 800128e:	2202      	movs	r2, #2
 8001290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	187b      	adds	r3, r7, r1
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	187b      	adds	r3, r7, r1
 800129a:	2203      	movs	r2, #3
 800129c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800129e:	187b      	adds	r3, r7, r1
 80012a0:	2204      	movs	r2, #4
 80012a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	187a      	adds	r2, r7, r1
 80012a6:	2390      	movs	r3, #144	; 0x90
 80012a8:	05db      	lsls	r3, r3, #23
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 faeb 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b00b      	add	sp, #44	; 0x2c
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	40006400 	.word	0x40006400
 80012c0:	40021000 	.word	0x40021000

080012c4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b08b      	sub	sp, #44	; 0x2c
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	2414      	movs	r4, #20
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	0018      	movs	r0, r3
 80012d2:	2314      	movs	r3, #20
 80012d4:	001a      	movs	r2, r3
 80012d6:	2100      	movs	r1, #0
 80012d8:	f001 faf0 	bl	80028bc <memset>
  if(htim_encoder->Instance==TIM3)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1b      	ldr	r2, [pc, #108]	; (8001350 <HAL_TIM_Encoder_MspInit+0x8c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d130      	bne.n	8001348 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012e6:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <HAL_TIM_Encoder_MspInit+0x90>)
 80012e8:	69da      	ldr	r2, [r3, #28]
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <HAL_TIM_Encoder_MspInit+0x90>)
 80012ec:	2102      	movs	r1, #2
 80012ee:	430a      	orrs	r2, r1
 80012f0:	61da      	str	r2, [r3, #28]
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_TIM_Encoder_MspInit+0x90>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2202      	movs	r2, #2
 80012f8:	4013      	ands	r3, r2
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <HAL_TIM_Encoder_MspInit+0x90>)
 8001300:	695a      	ldr	r2, [r3, #20]
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <HAL_TIM_Encoder_MspInit+0x90>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0289      	lsls	r1, r1, #10
 8001308:	430a      	orrs	r2, r1
 800130a:	615a      	str	r2, [r3, #20]
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_TIM_Encoder_MspInit+0x90>)
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	029b      	lsls	r3, r3, #10
 8001314:	4013      	ands	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800131a:	0021      	movs	r1, r4
 800131c:	187b      	adds	r3, r7, r1
 800131e:	22c0      	movs	r2, #192	; 0xc0
 8001320:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2202      	movs	r2, #2
 8001326:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001334:	187b      	adds	r3, r7, r1
 8001336:	2201      	movs	r2, #1
 8001338:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	187a      	adds	r2, r7, r1
 800133c:	2390      	movs	r3, #144	; 0x90
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	0011      	movs	r1, r2
 8001342:	0018      	movs	r0, r3
 8001344:	f000 faa0 	bl	8001888 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	b00b      	add	sp, #44	; 0x2c
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	40000400 	.word	0x40000400
 8001354:	40021000 	.word	0x40021000

08001358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800135c:	e7fe      	b.n	800135c <NMI_Handler+0x4>

0800135e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001362:	e7fe      	b.n	8001362 <HardFault_Handler+0x4>

08001364 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001368:	46c0      	nop			; (mov r8, r8)
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137c:	f000 f892 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	4813      	ldr	r0, [pc, #76]	; (80013e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <LoopForever+0x6>)
    LDR R1, [R0]
 8001396:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001398:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <LoopForever+0xa>)
    CMP R1, R2
 800139c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800139e:	d105      	bne.n	80013ac <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80013a0:	4812      	ldr	r0, [pc, #72]	; (80013ec <LoopForever+0xe>)
    LDR R1,=0x00000001
 80013a2:	4913      	ldr	r1, [pc, #76]	; (80013f0 <LoopForever+0x12>)
    STR R1, [R0]
 80013a4:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80013a6:	4813      	ldr	r0, [pc, #76]	; (80013f4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80013a8:	4913      	ldr	r1, [pc, #76]	; (80013f8 <LoopForever+0x1a>)
    STR R1, [R0]
 80013aa:	6001      	str	r1, [r0, #0]

080013ac <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013ac:	4813      	ldr	r0, [pc, #76]	; (80013fc <LoopForever+0x1e>)
  ldr r1, =_edata
 80013ae:	4914      	ldr	r1, [pc, #80]	; (8001400 <LoopForever+0x22>)
  ldr r2, =_sidata
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <LoopForever+0x26>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b4:	e002      	b.n	80013bc <LoopCopyDataInit>

080013b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ba:	3304      	adds	r3, #4

080013bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c0:	d3f9      	bcc.n	80013b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <LoopForever+0x2a>)
  ldr r4, =_ebss
 80013c4:	4c11      	ldr	r4, [pc, #68]	; (800140c <LoopForever+0x2e>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c8:	e001      	b.n	80013ce <LoopFillZerobss>

080013ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013cc:	3204      	adds	r2, #4

080013ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d0:	d3fb      	bcc.n	80013ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013d2:	f7ff ffd8 	bl	8001386 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80013d6:	f001 fa4d 	bl	8002874 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fd4b 	bl	8000e74 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   r0, =_estack
 80013e0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80013e4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80013e8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80013ec:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80013f0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80013f4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80013f8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001404:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 8001408:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800140c:	200000a0 	.word	0x200000a0

08001410 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC1_IRQHandler>
	...

08001414 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_Init+0x24>)
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_Init+0x24>)
 800141e:	2110      	movs	r1, #16
 8001420:	430a      	orrs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f809 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800142a:	f7ff fed9 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	40022000 	.word	0x40022000

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_InitTick+0x5c>)
 8001446:	681c      	ldr	r4, [r3, #0]
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <HAL_InitTick+0x60>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	0019      	movs	r1, r3
 800144e:	23fa      	movs	r3, #250	; 0xfa
 8001450:	0098      	lsls	r0, r3, #2
 8001452:	f7fe fe59 	bl	8000108 <__udivsi3>
 8001456:	0003      	movs	r3, r0
 8001458:	0019      	movs	r1, r3
 800145a:	0020      	movs	r0, r4
 800145c:	f7fe fe54 	bl	8000108 <__udivsi3>
 8001460:	0003      	movs	r3, r0
 8001462:	0018      	movs	r0, r3
 8001464:	f000 fa03 	bl	800186e <HAL_SYSTICK_Config>
 8001468:	1e03      	subs	r3, r0, #0
 800146a:	d001      	beq.n	8001470 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e00f      	b.n	8001490 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d80b      	bhi.n	800148e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	2301      	movs	r3, #1
 800147a:	425b      	negs	r3, r3
 800147c:	2200      	movs	r2, #0
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f9e0 	bl	8001844 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_InitTick+0x64>)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b003      	add	sp, #12
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_IncTick+0x1c>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <HAL_IncTick+0x20>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	18d2      	adds	r2, r2, r3
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <HAL_IncTick+0x20>)
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	20000008 	.word	0x20000008
 80014c4:	2000009c 	.word	0x2000009c

080014c8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b02      	ldr	r3, [pc, #8]	; (80014d8 <HAL_GetTick+0x10>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	2000009c 	.word	0x2000009c

080014dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e4:	f7ff fff0 	bl	80014c8 <HAL_GetTick>
 80014e8:	0003      	movs	r3, r0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <HAL_Delay+0x44>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	001a      	movs	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	189b      	adds	r3, r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001502:	46c0      	nop			; (mov r8, r8)
 8001504:	f7ff ffe0 	bl	80014c8 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f7      	bhi.n	8001504 <HAL_Delay+0x28>
  {
  }
}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	46bd      	mov	sp, r7
 800151a:	b004      	add	sp, #16
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	20000008 	.word	0x20000008

08001524 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0f0      	b.n	8001718 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2220      	movs	r2, #32
 800153a:	5c9b      	ldrb	r3, [r3, r2]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff fe6f 	bl	8001228 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2102      	movs	r1, #2
 8001556:	438a      	bics	r2, r1
 8001558:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800155a:	f7ff ffb5 	bl	80014c8 <HAL_GetTick>
 800155e:	0003      	movs	r3, r0
 8001560:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001562:	e013      	b.n	800158c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001564:	f7ff ffb0 	bl	80014c8 <HAL_GetTick>
 8001568:	0002      	movs	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b0a      	cmp	r3, #10
 8001570:	d90c      	bls.n	800158c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	0292      	lsls	r2, r2, #10
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	2105      	movs	r1, #5
 8001586:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0c5      	b.n	8001718 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d1e5      	bne.n	8001564 <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a8:	f7ff ff8e 	bl	80014c8 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015b0:	e013      	b.n	80015da <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015b2:	f7ff ff89 	bl	80014c8 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b0a      	cmp	r3, #10
 80015be:	d90c      	bls.n	80015da <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	0292      	lsls	r2, r2, #10
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2220      	movs	r2, #32
 80015d2:	2105      	movs	r1, #5
 80015d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e09e      	b.n	8001718 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	d0e5      	beq.n	80015b2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7e1b      	ldrb	r3, [r3, #24]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	e007      	b.n	8001610 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	438a      	bics	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e5b      	ldrb	r3, [r3, #25]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d108      	bne.n	800162a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2140      	movs	r1, #64	; 0x40
 8001624:	430a      	orrs	r2, r1
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	e007      	b.n	800163a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	438a      	bics	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e9b      	ldrb	r3, [r3, #26]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2120      	movs	r1, #32
 800164e:	430a      	orrs	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	e007      	b.n	8001664 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2120      	movs	r1, #32
 8001660:	438a      	bics	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7edb      	ldrb	r3, [r3, #27]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2110      	movs	r1, #16
 8001678:	438a      	bics	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	e007      	b.n	800168e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2110      	movs	r1, #16
 800168a:	430a      	orrs	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7f1b      	ldrb	r3, [r3, #28]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2108      	movs	r1, #8
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2108      	movs	r1, #8
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7f5b      	ldrb	r3, [r3, #29]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2104      	movs	r1, #4
 80016cc:	430a      	orrs	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2104      	movs	r1, #4
 80016de:	438a      	bics	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	431a      	orrs	r2, r3
 80016f8:	0011      	movs	r1, r2
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	1e5a      	subs	r2, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2220      	movs	r2, #32
 8001712:	2101      	movs	r1, #1
 8001714:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	0018      	movs	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	b004      	add	sp, #16
 800171e:	bd80      	pop	{r7, pc}

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	0002      	movs	r2, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b7f      	cmp	r3, #127	; 0x7f
 8001734:	d828      	bhi.n	8001788 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001736:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <__NVIC_SetPriority+0xd4>)
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b25b      	sxtb	r3, r3
 800173e:	089b      	lsrs	r3, r3, #2
 8001740:	33c0      	adds	r3, #192	; 0xc0
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	589b      	ldr	r3, [r3, r2]
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	0011      	movs	r1, r2
 800174c:	2203      	movs	r2, #3
 800174e:	400a      	ands	r2, r1
 8001750:	00d2      	lsls	r2, r2, #3
 8001752:	21ff      	movs	r1, #255	; 0xff
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	43d2      	mvns	r2, r2
 800175a:	401a      	ands	r2, r3
 800175c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	22ff      	movs	r2, #255	; 0xff
 8001764:	401a      	ands	r2, r3
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4003      	ands	r3, r0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001774:	481f      	ldr	r0, [pc, #124]	; (80017f4 <__NVIC_SetPriority+0xd4>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b25b      	sxtb	r3, r3
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	430a      	orrs	r2, r1
 8001780:	33c0      	adds	r3, #192	; 0xc0
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001786:	e031      	b.n	80017ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <__NVIC_SetPriority+0xd8>)
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	0019      	movs	r1, r3
 8001790:	230f      	movs	r3, #15
 8001792:	400b      	ands	r3, r1
 8001794:	3b08      	subs	r3, #8
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3306      	adds	r3, #6
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	18d3      	adds	r3, r2, r3
 800179e:	3304      	adds	r3, #4
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	1dfa      	adds	r2, r7, #7
 80017a4:	7812      	ldrb	r2, [r2, #0]
 80017a6:	0011      	movs	r1, r2
 80017a8:	2203      	movs	r2, #3
 80017aa:	400a      	ands	r2, r1
 80017ac:	00d2      	lsls	r2, r2, #3
 80017ae:	21ff      	movs	r1, #255	; 0xff
 80017b0:	4091      	lsls	r1, r2
 80017b2:	000a      	movs	r2, r1
 80017b4:	43d2      	mvns	r2, r2
 80017b6:	401a      	ands	r2, r3
 80017b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	22ff      	movs	r2, #255	; 0xff
 80017c0:	401a      	ands	r2, r3
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	0018      	movs	r0, r3
 80017c8:	2303      	movs	r3, #3
 80017ca:	4003      	ands	r3, r0
 80017cc:	00db      	lsls	r3, r3, #3
 80017ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d0:	4809      	ldr	r0, [pc, #36]	; (80017f8 <__NVIC_SetPriority+0xd8>)
 80017d2:	1dfb      	adds	r3, r7, #7
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	001c      	movs	r4, r3
 80017d8:	230f      	movs	r3, #15
 80017da:	4023      	ands	r3, r4
 80017dc:	3b08      	subs	r3, #8
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	430a      	orrs	r2, r1
 80017e2:	3306      	adds	r3, #6
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	18c3      	adds	r3, r0, r3
 80017e8:	3304      	adds	r3, #4
 80017ea:	601a      	str	r2, [r3, #0]
}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b003      	add	sp, #12
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	045b      	lsls	r3, r3, #17
 800180c:	429a      	cmp	r2, r3
 800180e:	d301      	bcc.n	8001814 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001810:	2301      	movs	r3, #1
 8001812:	e010      	b.n	8001836 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <SysTick_Config+0x44>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	3a01      	subs	r2, #1
 800181a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181c:	2301      	movs	r3, #1
 800181e:	425b      	negs	r3, r3
 8001820:	2103      	movs	r1, #3
 8001822:	0018      	movs	r0, r3
 8001824:	f7ff ff7c 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x44>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x44>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	0018      	movs	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60b9      	str	r1, [r7, #8]
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	210f      	movs	r1, #15
 8001850:	187b      	adds	r3, r7, r1
 8001852:	1c02      	adds	r2, r0, #0
 8001854:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	187b      	adds	r3, r7, r1
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	b25b      	sxtb	r3, r3
 800185e:	0011      	movs	r1, r2
 8001860:	0018      	movs	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0018      	movs	r0, r3
 800187a:	f7ff ffbf 	bl	80017fc <SysTick_Config>
 800187e:	0003      	movs	r3, r0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001896:	e149      	b.n	8001b2c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2101      	movs	r1, #1
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4091      	lsls	r1, r2
 80018a2:	000a      	movs	r2, r1
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <HAL_GPIO_Init+0x28>
 80018ae:	e13a      	b.n	8001b26 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d00b      	beq.n	80018d0 <HAL_GPIO_Init+0x48>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b12      	cmp	r3, #18
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	409a      	lsls	r2, r3
 80018de:	0013      	movs	r3, r2
 80018e0:	43da      	mvns	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	409a      	lsls	r2, r3
 80018f2:	0013      	movs	r3, r2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	409a      	lsls	r2, r3
 800190c:	0013      	movs	r3, r2
 800190e:	43da      	mvns	r2, r3
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4013      	ands	r3, r2
 8001914:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	2201      	movs	r2, #1
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
 8001924:	0013      	movs	r3, r2
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0xea>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b12      	cmp	r3, #18
 8001970:	d123      	bne.n	80019ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	08da      	lsrs	r2, r3, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	3208      	adds	r2, #8
 800197a:	0092      	lsls	r2, r2, #2
 800197c:	58d3      	ldr	r3, [r2, r3]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2107      	movs	r1, #7
 800199e:	400b      	ands	r3, r1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	08da      	lsrs	r2, r3, #3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	3208      	adds	r2, #8
 80019b4:	0092      	lsls	r2, r2, #2
 80019b6:	6939      	ldr	r1, [r7, #16]
 80019b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	2203      	movs	r2, #3
 80019c6:	409a      	lsls	r2, r3
 80019c8:	0013      	movs	r3, r2
 80019ca:	43da      	mvns	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4013      	ands	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2203      	movs	r2, #3
 80019d8:	401a      	ands	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	409a      	lsls	r2, r3
 80019e0:	0013      	movs	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	055b      	lsls	r3, r3, #21
 80019f6:	4013      	ands	r3, r2
 80019f8:	d100      	bne.n	80019fc <HAL_GPIO_Init+0x174>
 80019fa:	e094      	b.n	8001b26 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 80019fe:	699a      	ldr	r2, [r3, #24]
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a02:	2101      	movs	r1, #1
 8001a04:	430a      	orrs	r2, r1
 8001a06:	619a      	str	r2, [r3, #24]
 8001a08:	4b4e      	ldr	r3, [pc, #312]	; (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	4013      	ands	r3, r2
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a14:	4a4c      	ldr	r2, [pc, #304]	; (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	589b      	ldr	r3, [r3, r2]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	2203      	movs	r2, #3
 8001a26:	4013      	ands	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	43da      	mvns	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	2390      	movs	r3, #144	; 0x90
 8001a3c:	05db      	lsls	r3, r3, #23
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d00d      	beq.n	8001a5e <HAL_GPIO_Init+0x1d6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a41      	ldr	r2, [pc, #260]	; (8001b4c <HAL_GPIO_Init+0x2c4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d007      	beq.n	8001a5a <HAL_GPIO_Init+0x1d2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a40      	ldr	r2, [pc, #256]	; (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d101      	bne.n	8001a56 <HAL_GPIO_Init+0x1ce>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e004      	b.n	8001a60 <HAL_GPIO_Init+0x1d8>
 8001a56:	2305      	movs	r3, #5
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_Init+0x1d8>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x1d8>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	2103      	movs	r1, #3
 8001a64:	400a      	ands	r2, r1
 8001a66:	0092      	lsls	r2, r2, #2
 8001a68:	4093      	lsls	r3, r2
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	089b      	lsrs	r3, r3, #2
 8001a76:	3302      	adds	r3, #2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7e:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	43da      	mvns	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	025b      	lsls	r3, r3, #9
 8001a96:	4013      	ands	r3, r2
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001aa2:	4b2c      	ldr	r3, [pc, #176]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001aa8:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	029b      	lsls	r3, r3, #10
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ad2:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	43da      	mvns	r2, r3
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	035b      	lsls	r3, r3, #13
 8001aea:	4013      	ands	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	43da      	mvns	r2, r3
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	039b      	lsls	r3, r3, #14
 8001b14:	4013      	ands	r3, r2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	1e13      	subs	r3, r2, #0
 8001b36:	d000      	beq.n	8001b3a <HAL_GPIO_Init+0x2b2>
 8001b38:	e6ae      	b.n	8001898 <HAL_GPIO_Init+0x10>
  } 
}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b006      	add	sp, #24
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010000 	.word	0x40010000
 8001b4c:	48000400 	.word	0x48000400
 8001b50:	48000800 	.word	0x48000800
 8001b54:	40010400 	.word	0x40010400

08001b58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	0008      	movs	r0, r1
 8001b62:	0011      	movs	r1, r2
 8001b64:	1cbb      	adds	r3, r7, #2
 8001b66:	1c02      	adds	r2, r0, #0
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	1c7b      	adds	r3, r7, #1
 8001b6c:	1c0a      	adds	r2, r1, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	1c7b      	adds	r3, r7, #1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d004      	beq.n	8001b82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b78:	1cbb      	adds	r3, r7, #2
 8001b7a:	881a      	ldrh	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b80:	e003      	b.n	8001b8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b82:	1cbb      	adds	r3, r7, #2
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	000a      	movs	r2, r1
 8001b9c:	1cbb      	adds	r3, r7, #2
 8001b9e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ba6:	1cbb      	adds	r3, r7, #2
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	4013      	ands	r3, r2
 8001bae:	041a      	lsls	r2, r3, #16
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	1cb9      	adds	r1, r7, #2
 8001bb6:	8809      	ldrh	r1, [r1, #0]
 8001bb8:	400b      	ands	r3, r1
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
}
 8001bc0:	46c0      	nop			; (mov r8, r8)
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d102      	bne.n	8001bdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f000 fb76 	bl	80022c8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d100      	bne.n	8001be8 <HAL_RCC_OscConfig+0x20>
 8001be6:	e08e      	b.n	8001d06 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be8:	4bc5      	ldr	r3, [pc, #788]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	220c      	movs	r2, #12
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d00e      	beq.n	8001c12 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf4:	4bc2      	ldr	r3, [pc, #776]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	220c      	movs	r2, #12
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d117      	bne.n	8001c30 <HAL_RCC_OscConfig+0x68>
 8001c00:	4bbf      	ldr	r3, [pc, #764]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	23c0      	movs	r3, #192	; 0xc0
 8001c06:	025b      	lsls	r3, r3, #9
 8001c08:	401a      	ands	r2, r3
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	025b      	lsls	r3, r3, #9
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d10e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	4bbb      	ldr	r3, [pc, #748]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	029b      	lsls	r3, r3, #10
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d100      	bne.n	8001c20 <HAL_RCC_OscConfig+0x58>
 8001c1e:	e071      	b.n	8001d04 <HAL_RCC_OscConfig+0x13c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d000      	beq.n	8001c2a <HAL_RCC_OscConfig+0x62>
 8001c28:	e06c      	b.n	8001d04 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f000 fb4c 	bl	80022c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_OscConfig+0x80>
 8001c38:	4bb1      	ldr	r3, [pc, #708]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4bb0      	ldr	r3, [pc, #704]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	2180      	movs	r1, #128	; 0x80
 8001c40:	0249      	lsls	r1, r1, #9
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	e02f      	b.n	8001ca8 <HAL_RCC_OscConfig+0xe0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10c      	bne.n	8001c6a <HAL_RCC_OscConfig+0xa2>
 8001c50:	4bab      	ldr	r3, [pc, #684]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4baa      	ldr	r3, [pc, #680]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c56:	49ab      	ldr	r1, [pc, #684]	; (8001f04 <HAL_RCC_OscConfig+0x33c>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4ba8      	ldr	r3, [pc, #672]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4ba7      	ldr	r3, [pc, #668]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c62:	49a9      	ldr	r1, [pc, #676]	; (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e01e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xe0>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b05      	cmp	r3, #5
 8001c70:	d10e      	bne.n	8001c90 <HAL_RCC_OscConfig+0xc8>
 8001c72:	4ba3      	ldr	r3, [pc, #652]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4ba2      	ldr	r3, [pc, #648]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	02c9      	lsls	r1, r1, #11
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	4b9f      	ldr	r3, [pc, #636]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b9e      	ldr	r3, [pc, #632]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c86:	2180      	movs	r1, #128	; 0x80
 8001c88:	0249      	lsls	r1, r1, #9
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00b      	b.n	8001ca8 <HAL_RCC_OscConfig+0xe0>
 8001c90:	4b9b      	ldr	r3, [pc, #620]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b9a      	ldr	r3, [pc, #616]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c96:	499b      	ldr	r1, [pc, #620]	; (8001f04 <HAL_RCC_OscConfig+0x33c>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	4b98      	ldr	r3, [pc, #608]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b97      	ldr	r3, [pc, #604]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001ca2:	4999      	ldr	r1, [pc, #612]	; (8001f08 <HAL_RCC_OscConfig+0x340>)
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fc0a 	bl	80014c8 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cba:	f7ff fc05 	bl	80014c8 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b64      	cmp	r3, #100	; 0x64
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e2fd      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ccc:	4b8c      	ldr	r3, [pc, #560]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	029b      	lsls	r3, r3, #10
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0xf2>
 8001cd8:	e015      	b.n	8001d06 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cda:	f7ff fbf5 	bl	80014c8 <HAL_GetTick>
 8001cde:	0003      	movs	r3, r0
 8001ce0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fbf0 	bl	80014c8 <HAL_GetTick>
 8001ce8:	0002      	movs	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e2e8      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b82      	ldr	r3, [pc, #520]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	029b      	lsls	r3, r3, #10
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x11c>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCC_OscConfig+0x14a>
 8001d10:	e06c      	b.n	8001dec <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d12:	4b7b      	ldr	r3, [pc, #492]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	220c      	movs	r2, #12
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d1c:	4b78      	ldr	r3, [pc, #480]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	220c      	movs	r2, #12
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d11f      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1a0>
 8001d28:	4b75      	ldr	r3, [pc, #468]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	23c0      	movs	r3, #192	; 0xc0
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	401a      	ands	r2, r3
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	4013      	ands	r3, r2
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x188>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e2bb      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d50:	4b6b      	ldr	r3, [pc, #428]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	22f8      	movs	r2, #248	; 0xf8
 8001d56:	4393      	bics	r3, r2
 8001d58:	0019      	movs	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00da      	lsls	r2, r3, #3
 8001d60:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d62:	430a      	orrs	r2, r1
 8001d64:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e041      	b.n	8001dec <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d024      	beq.n	8001dba <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d76:	2101      	movs	r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fba4 	bl	80014c8 <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d86:	f7ff fb9f 	bl	80014c8 <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e297      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	4b59      	ldr	r3, [pc, #356]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d0f1      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da2:	4b57      	ldr	r3, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	22f8      	movs	r2, #248	; 0xf8
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	00da      	lsls	r2, r3, #3
 8001db2:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e018      	b.n	8001dec <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dba:	4b51      	ldr	r3, [pc, #324]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b50      	ldr	r3, [pc, #320]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	438a      	bics	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fb7f 	bl	80014c8 <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff fb7a 	bl	80014c8 <HAL_GetTick>
 8001dd4:	0002      	movs	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e272      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2202      	movs	r2, #2
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f1      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4013      	ands	r3, r2
 8001df4:	d036      	beq.n	8001e64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d019      	beq.n	8001e32 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e02:	4b3f      	ldr	r3, [pc, #252]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	430a      	orrs	r2, r1
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb5d 	bl	80014c8 <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff fb58 	bl	80014c8 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e250      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d0f1      	beq.n	8001e14 <HAL_RCC_OscConfig+0x24c>
 8001e30:	e018      	b.n	8001e64 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b33      	ldr	r3, [pc, #204]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e36:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e38:	2101      	movs	r1, #1
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3e:	f7ff fb43 	bl	80014c8 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e48:	f7ff fb3e 	bl	80014c8 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e236      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	2202      	movs	r2, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d1f1      	bne.n	8001e48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d100      	bne.n	8001e70 <HAL_RCC_OscConfig+0x2a8>
 8001e6e:	e0b5      	b.n	8001fdc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e70:	201f      	movs	r0, #31
 8001e72:	183b      	adds	r3, r7, r0
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e7a:	69da      	ldr	r2, [r3, #28]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	055b      	lsls	r3, r3, #21
 8001e80:	4013      	ands	r3, r2
 8001e82:	d110      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e86:	69da      	ldr	r2, [r3, #28]
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	0549      	lsls	r1, r1, #21
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	61da      	str	r2, [r3, #28]
 8001e92:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	055b      	lsls	r3, r3, #21
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ea0:	183b      	adds	r3, r7, r0
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_RCC_OscConfig+0x344>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d11a      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <HAL_RCC_OscConfig+0x344>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_RCC_OscConfig+0x344>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0049      	lsls	r1, r1, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fb02 	bl	80014c8 <HAL_GetTick>
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eca:	f7ff fafd 	bl	80014c8 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b64      	cmp	r3, #100	; 0x64
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1f5      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x344>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d10f      	bne.n	8001f10 <HAL_RCC_OscConfig+0x348>
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	4b02      	ldr	r3, [pc, #8]	; (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	621a      	str	r2, [r3, #32]
 8001efc:	e036      	b.n	8001f6c <HAL_RCC_OscConfig+0x3a4>
 8001efe:	46c0      	nop			; (mov r8, r8)
 8001f00:	40021000 	.word	0x40021000
 8001f04:	fffeffff 	.word	0xfffeffff
 8001f08:	fffbffff 	.word	0xfffbffff
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10c      	bne.n	8001f32 <HAL_RCC_OscConfig+0x36a>
 8001f18:	4bca      	ldr	r3, [pc, #808]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	4bc9      	ldr	r3, [pc, #804]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	438a      	bics	r2, r1
 8001f22:	621a      	str	r2, [r3, #32]
 8001f24:	4bc7      	ldr	r3, [pc, #796]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	4bc6      	ldr	r3, [pc, #792]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f2a:	2104      	movs	r1, #4
 8001f2c:	438a      	bics	r2, r1
 8001f2e:	621a      	str	r2, [r3, #32]
 8001f30:	e01c      	b.n	8001f6c <HAL_RCC_OscConfig+0x3a4>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b05      	cmp	r3, #5
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x38c>
 8001f3a:	4bc2      	ldr	r3, [pc, #776]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f3c:	6a1a      	ldr	r2, [r3, #32]
 8001f3e:	4bc1      	ldr	r3, [pc, #772]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f40:	2104      	movs	r1, #4
 8001f42:	430a      	orrs	r2, r1
 8001f44:	621a      	str	r2, [r3, #32]
 8001f46:	4bbf      	ldr	r3, [pc, #764]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	4bbe      	ldr	r3, [pc, #760]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	621a      	str	r2, [r3, #32]
 8001f52:	e00b      	b.n	8001f6c <HAL_RCC_OscConfig+0x3a4>
 8001f54:	4bbb      	ldr	r3, [pc, #748]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	4bba      	ldr	r3, [pc, #744]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	621a      	str	r2, [r3, #32]
 8001f60:	4bb8      	ldr	r3, [pc, #736]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	4bb7      	ldr	r3, [pc, #732]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f66:	2104      	movs	r1, #4
 8001f68:	438a      	bics	r2, r1
 8001f6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d014      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f74:	f7ff faa8 	bl	80014c8 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f7c:	e009      	b.n	8001f92 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f7e:	f7ff faa3 	bl	80014c8 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4aaf      	ldr	r2, [pc, #700]	; (8002248 <HAL_RCC_OscConfig+0x680>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e19a      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f92:	4bac      	ldr	r3, [pc, #688]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x3b6>
 8001f9c:	e013      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fa93 	bl	80014c8 <HAL_GetTick>
 8001fa2:	0003      	movs	r3, r0
 8001fa4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa6:	e009      	b.n	8001fbc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff fa8e 	bl	80014c8 <HAL_GetTick>
 8001fac:	0002      	movs	r2, r0
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	4aa5      	ldr	r2, [pc, #660]	; (8002248 <HAL_RCC_OscConfig+0x680>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e185      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fbc:	4ba1      	ldr	r3, [pc, #644]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d1f0      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fc6:	231f      	movs	r3, #31
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b9c      	ldr	r3, [pc, #624]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	4b9b      	ldr	r3, [pc, #620]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001fd6:	499d      	ldr	r1, [pc, #628]	; (800224c <HAL_RCC_OscConfig+0x684>)
 8001fd8:	400a      	ands	r2, r1
 8001fda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d12a      	bne.n	8002044 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fee:	4b95      	ldr	r3, [pc, #596]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff2:	4b94      	ldr	r3, [pc, #592]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001ffa:	4b92      	ldr	r3, [pc, #584]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8001ffc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ffe:	4b91      	ldr	r3, [pc, #580]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002000:	2101      	movs	r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7ff fa5f 	bl	80014c8 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002010:	f7ff fa5a 	bl	80014c8 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e152      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002022:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002026:	2202      	movs	r2, #2
 8002028:	4013      	ands	r3, r2
 800202a:	d0f1      	beq.n	8002010 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800202c:	4b85      	ldr	r3, [pc, #532]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002030:	22f8      	movs	r2, #248	; 0xf8
 8002032:	4393      	bics	r3, r2
 8002034:	0019      	movs	r1, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	00da      	lsls	r2, r3, #3
 800203c:	4b81      	ldr	r3, [pc, #516]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800203e:	430a      	orrs	r2, r1
 8002040:	635a      	str	r2, [r3, #52]	; 0x34
 8002042:	e034      	b.n	80020ae <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	3305      	adds	r3, #5
 800204a:	d111      	bne.n	8002070 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800204c:	4b7d      	ldr	r3, [pc, #500]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800204e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002050:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002052:	2104      	movs	r1, #4
 8002054:	438a      	bics	r2, r1
 8002056:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002058:	4b7a      	ldr	r3, [pc, #488]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	22f8      	movs	r2, #248	; 0xf8
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	00da      	lsls	r2, r3, #3
 8002068:	4b76      	ldr	r3, [pc, #472]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800206a:	430a      	orrs	r2, r1
 800206c:	635a      	str	r2, [r3, #52]	; 0x34
 800206e:	e01e      	b.n	80020ae <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002070:	4b74      	ldr	r3, [pc, #464]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002074:	4b73      	ldr	r3, [pc, #460]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002076:	2104      	movs	r1, #4
 8002078:	430a      	orrs	r2, r1
 800207a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800207c:	4b71      	ldr	r3, [pc, #452]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800207e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002080:	4b70      	ldr	r3, [pc, #448]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002088:	f7ff fa1e 	bl	80014c8 <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002092:	f7ff fa19 	bl	80014c8 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e111      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020a4:	4b67      	ldr	r3, [pc, #412]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d1f1      	bne.n	8002092 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2220      	movs	r2, #32
 80020b4:	4013      	ands	r3, r2
 80020b6:	d05c      	beq.n	8002172 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020b8:	4b62      	ldr	r3, [pc, #392]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	220c      	movs	r2, #12
 80020be:	4013      	ands	r3, r2
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	d00e      	beq.n	80020e2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020c4:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	220c      	movs	r2, #12
 80020ca:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d114      	bne.n	80020fa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80020d0:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	23c0      	movs	r3, #192	; 0xc0
 80020d6:	025b      	lsls	r3, r3, #9
 80020d8:	401a      	ands	r2, r3
 80020da:	23c0      	movs	r3, #192	; 0xc0
 80020dc:	025b      	lsls	r3, r3, #9
 80020de:	429a      	cmp	r2, r3
 80020e0:	d10b      	bne.n	80020fa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020e2:	4b58      	ldr	r3, [pc, #352]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	025b      	lsls	r3, r3, #9
 80020ea:	4013      	ands	r3, r2
 80020ec:	d040      	beq.n	8002170 <HAL_RCC_OscConfig+0x5a8>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d03c      	beq.n	8002170 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0e6      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01b      	beq.n	800213a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002102:	4b50      	ldr	r3, [pc, #320]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002106:	4b4f      	ldr	r3, [pc, #316]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002108:	2180      	movs	r1, #128	; 0x80
 800210a:	0249      	lsls	r1, r1, #9
 800210c:	430a      	orrs	r2, r1
 800210e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff f9da 	bl	80014c8 <HAL_GetTick>
 8002114:	0003      	movs	r3, r0
 8002116:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211a:	f7ff f9d5 	bl	80014c8 <HAL_GetTick>
 800211e:	0002      	movs	r2, r0
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0cd      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800212c:	4b45      	ldr	r3, [pc, #276]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800212e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	025b      	lsls	r3, r3, #9
 8002134:	4013      	ands	r3, r2
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x552>
 8002138:	e01b      	b.n	8002172 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800213a:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800213c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800213e:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002140:	4943      	ldr	r1, [pc, #268]	; (8002250 <HAL_RCC_OscConfig+0x688>)
 8002142:	400a      	ands	r2, r1
 8002144:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002146:	f7ff f9bf 	bl	80014c8 <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002150:	f7ff f9ba 	bl	80014c8 <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e0b2      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002162:	4b38      	ldr	r3, [pc, #224]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	025b      	lsls	r3, r3, #9
 800216a:	4013      	ands	r3, r2
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x588>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002170:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	2b00      	cmp	r3, #0
 8002178:	d100      	bne.n	800217c <HAL_RCC_OscConfig+0x5b4>
 800217a:	e0a4      	b.n	80022c6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	220c      	movs	r2, #12
 8002182:	4013      	ands	r3, r2
 8002184:	2b08      	cmp	r3, #8
 8002186:	d100      	bne.n	800218a <HAL_RCC_OscConfig+0x5c2>
 8002188:	e078      	b.n	800227c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b02      	cmp	r3, #2
 8002190:	d14c      	bne.n	800222c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002198:	492e      	ldr	r1, [pc, #184]	; (8002254 <HAL_RCC_OscConfig+0x68c>)
 800219a:	400a      	ands	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7ff f993 	bl	80014c8 <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f98e 	bl	80014c8 <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e086      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ba:	4b22      	ldr	r3, [pc, #136]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	049b      	lsls	r3, r3, #18
 80021c2:	4013      	ands	r3, r2
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	220f      	movs	r2, #15
 80021cc:	4393      	bics	r3, r2
 80021ce:	0019      	movs	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021d6:	430a      	orrs	r2, r1
 80021d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_RCC_OscConfig+0x690>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	431a      	orrs	r2, r3
 80021ee:	4b15      	ldr	r3, [pc, #84]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0449      	lsls	r1, r1, #17
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff f961 	bl	80014c8 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220c:	f7ff f95c 	bl	80014c8 <HAL_GetTick>
 8002210:	0002      	movs	r2, r0
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e054      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	2380      	movs	r3, #128	; 0x80
 8002224:	049b      	lsls	r3, r3, #18
 8002226:	4013      	ands	r3, r2
 8002228:	d0f0      	beq.n	800220c <HAL_RCC_OscConfig+0x644>
 800222a:	e04c      	b.n	80022c6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <HAL_RCC_OscConfig+0x67c>)
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <HAL_RCC_OscConfig+0x68c>)
 8002234:	400a      	ands	r2, r1
 8002236:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002238:	f7ff f946 	bl	80014c8 <HAL_GetTick>
 800223c:	0003      	movs	r3, r0
 800223e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002240:	e015      	b.n	800226e <HAL_RCC_OscConfig+0x6a6>
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	40021000 	.word	0x40021000
 8002248:	00001388 	.word	0x00001388
 800224c:	efffffff 	.word	0xefffffff
 8002250:	fffeffff 	.word	0xfffeffff
 8002254:	feffffff 	.word	0xfeffffff
 8002258:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f934 	bl	80014c8 <HAL_GetTick>
 8002260:	0002      	movs	r2, r0
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e02c      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_RCC_OscConfig+0x708>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	049b      	lsls	r3, r3, #18
 8002276:	4013      	ands	r3, r2
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x694>
 800227a:	e024      	b.n	80022c6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e01f      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_OscConfig+0x708>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_RCC_OscConfig+0x708>)
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	23c0      	movs	r3, #192	; 0xc0
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d10e      	bne.n	80022c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	220f      	movs	r2, #15
 80022a8:	401a      	ands	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	23f0      	movs	r3, #240	; 0xf0
 80022b6:	039b      	lsls	r3, r3, #14
 80022b8:	401a      	ands	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	0018      	movs	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b008      	add	sp, #32
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40021000 	.word	0x40021000

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0bf      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b61      	ldr	r3, [pc, #388]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2201      	movs	r2, #1
 80022ee:	4013      	ands	r3, r2
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d911      	bls.n	800231a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b5e      	ldr	r3, [pc, #376]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4393      	bics	r3, r2
 80022fe:	0019      	movs	r1, r3
 8002300:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2201      	movs	r2, #1
 800230e:	4013      	ands	r3, r2
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e0a6      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d015      	beq.n	8002350 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2204      	movs	r2, #4
 800232a:	4013      	ands	r3, r2
 800232c:	d006      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800232e:	4b51      	ldr	r3, [pc, #324]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 8002334:	21e0      	movs	r1, #224	; 0xe0
 8002336:	00c9      	lsls	r1, r1, #3
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233c:	4b4d      	ldr	r3, [pc, #308]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	22f0      	movs	r2, #240	; 0xf0
 8002342:	4393      	bics	r3, r2
 8002344:	0019      	movs	r1, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	4b4a      	ldr	r3, [pc, #296]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d04c      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	2380      	movs	r3, #128	; 0x80
 8002368:	029b      	lsls	r3, r3, #10
 800236a:	4013      	ands	r3, r2
 800236c:	d120      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e07a      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b3e      	ldr	r3, [pc, #248]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	049b      	lsls	r3, r3, #18
 8002382:	4013      	ands	r3, r2
 8002384:	d114      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e06e      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b03      	cmp	r3, #3
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002392:	4b38      	ldr	r3, [pc, #224]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 8002394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	025b      	lsls	r3, r3, #9
 800239a:	4013      	ands	r3, r2
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e062      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e05b      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b0:	4b30      	ldr	r3, [pc, #192]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2203      	movs	r2, #3
 80023b6:	4393      	bics	r3, r2
 80023b8:	0019      	movs	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff f880 	bl	80014c8 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023cc:	e009      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ce:	f7ff f87b 	bl	80014c8 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	4a27      	ldr	r2, [pc, #156]	; (8002478 <HAL_RCC_ClockConfig+0x1a4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e042      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	220c      	movs	r2, #12
 80023e8:	401a      	ands	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1ec      	bne.n	80023ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2201      	movs	r2, #1
 80023fa:	4013      	ands	r3, r2
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d211      	bcs.n	8002426 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2201      	movs	r2, #1
 8002408:	4393      	bics	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	4b18      	ldr	r3, [pc, #96]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002414:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x19c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2201      	movs	r2, #1
 800241a:	4013      	ands	r3, r2
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d001      	beq.n	8002426 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e020      	b.n	8002468 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2204      	movs	r2, #4
 800242c:	4013      	ands	r3, r2
 800242e:	d009      	beq.n	8002444 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a11      	ldr	r2, [pc, #68]	; (800247c <HAL_RCC_ClockConfig+0x1a8>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 8002440:	430a      	orrs	r2, r1
 8002442:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002444:	f000 f820 	bl	8002488 <HAL_RCC_GetSysClockFreq>
 8002448:	0001      	movs	r1, r0
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1a0>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	091b      	lsrs	r3, r3, #4
 8002450:	220f      	movs	r2, #15
 8002452:	4013      	ands	r3, r2
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_RCC_ClockConfig+0x1ac>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	000a      	movs	r2, r1
 800245a:	40da      	lsrs	r2, r3
 800245c:	4b09      	ldr	r3, [pc, #36]	; (8002484 <HAL_RCC_ClockConfig+0x1b0>)
 800245e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002460:	2000      	movs	r0, #0
 8002462:	f7fe ffeb 	bl	800143c <HAL_InitTick>
  
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	0018      	movs	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	b004      	add	sp, #16
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40022000 	.word	0x40022000
 8002474:	40021000 	.word	0x40021000
 8002478:	00001388 	.word	0x00001388
 800247c:	fffff8ff 	.word	0xfffff8ff
 8002480:	08002984 	.word	0x08002984
 8002484:	20000000 	.word	0x20000000

08002488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002488:	b590      	push	{r4, r7, lr}
 800248a:	b08f      	sub	sp, #60	; 0x3c
 800248c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800248e:	2314      	movs	r3, #20
 8002490:	18fb      	adds	r3, r7, r3
 8002492:	4a38      	ldr	r2, [pc, #224]	; (8002574 <HAL_RCC_GetSysClockFreq+0xec>)
 8002494:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002496:	c313      	stmia	r3!, {r0, r1, r4}
 8002498:	6812      	ldr	r2, [r2, #0]
 800249a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	4a36      	ldr	r2, [pc, #216]	; (8002578 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024a2:	c313      	stmia	r3!, {r0, r1, r4}
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b0:	2300      	movs	r3, #0
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80024bc:	4b2f      	ldr	r3, [pc, #188]	; (800257c <HAL_RCC_GetSysClockFreq+0xf4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	220c      	movs	r2, #12
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b0c      	cmp	r3, #12
 80024ca:	d047      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0xd4>
 80024cc:	d849      	bhi.n	8002562 <HAL_RCC_GetSysClockFreq+0xda>
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x50>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x56>
 80024d6:	e044      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024dc:	e044      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	220f      	movs	r2, #15
 80024e4:	4013      	ands	r3, r2
 80024e6:	2214      	movs	r2, #20
 80024e8:	18ba      	adds	r2, r7, r2
 80024ea:	5cd3      	ldrb	r3, [r2, r3]
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_GetSysClockFreq+0xf4>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	220f      	movs	r2, #15
 80024f4:	4013      	ands	r3, r2
 80024f6:	1d3a      	adds	r2, r7, #4
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fe:	23c0      	movs	r3, #192	; 0xc0
 8002500:	025b      	lsls	r3, r3, #9
 8002502:	401a      	ands	r2, r3
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	025b      	lsls	r3, r3, #9
 8002508:	429a      	cmp	r2, r3
 800250a:	d109      	bne.n	8002520 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800250c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250e:	481c      	ldr	r0, [pc, #112]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002510:	f7fd fdfa 	bl	8000108 <__udivsi3>
 8002514:	0003      	movs	r3, r0
 8002516:	001a      	movs	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	4353      	muls	r3, r2
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
 800251e:	e01a      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	23c0      	movs	r3, #192	; 0xc0
 8002524:	025b      	lsls	r3, r3, #9
 8002526:	401a      	ands	r2, r3
 8002528:	23c0      	movs	r3, #192	; 0xc0
 800252a:	025b      	lsls	r3, r3, #9
 800252c:	429a      	cmp	r2, r3
 800252e:	d109      	bne.n	8002544 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002532:	4814      	ldr	r0, [pc, #80]	; (8002584 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002534:	f7fd fde8 	bl	8000108 <__udivsi3>
 8002538:	0003      	movs	r3, r0
 800253a:	001a      	movs	r2, r3
 800253c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253e:	4353      	muls	r3, r2
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
 8002542:	e008      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002544:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002546:	480e      	ldr	r0, [pc, #56]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002548:	f7fd fdde 	bl	8000108 <__udivsi3>
 800254c:	0003      	movs	r3, r0
 800254e:	001a      	movs	r2, r3
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	4353      	muls	r3, r2
 8002554:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800255a:	e005      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <HAL_RCC_GetSysClockFreq+0xfc>)
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002566:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800256a:	0018      	movs	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	b00f      	add	sp, #60	; 0x3c
 8002570:	bd90      	pop	{r4, r7, pc}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	080028e4 	.word	0x080028e4
 8002578:	080028f4 	.word	0x080028f4
 800257c:	40021000 	.word	0x40021000
 8002580:	007a1200 	.word	0x007a1200
 8002584:	02dc6c00 	.word	0x02dc6c00

08002588 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e090      	b.n	80026be <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	223d      	movs	r2, #61	; 0x3d
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	223c      	movs	r2, #60	; 0x3c
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f7fe fe86 	bl	80012c4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	223d      	movs	r2, #61	; 0x3d
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	493f      	ldr	r1, [pc, #252]	; (80026c8 <HAL_TIM_Encoder_Init+0x140>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	0019      	movs	r1, r3
 80025da:	0010      	movs	r0, r2
 80025dc:	f000 f87c 	bl	80026d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4a31      	ldr	r2, [pc, #196]	; (80026cc <HAL_TIM_Encoder_Init+0x144>)
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4313      	orrs	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4a2c      	ldr	r2, [pc, #176]	; (80026d0 <HAL_TIM_Encoder_Init+0x148>)
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4a2b      	ldr	r2, [pc, #172]	; (80026d4 <HAL_TIM_Encoder_Init+0x14c>)
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	69db      	ldr	r3, [r3, #28]
 8002634:	021b      	lsls	r3, r3, #8
 8002636:	4313      	orrs	r3, r2
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	011a      	lsls	r2, r3, #4
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	031b      	lsls	r3, r3, #12
 800264a:	4313      	orrs	r3, r2
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2222      	movs	r2, #34	; 0x22
 8002656:	4393      	bics	r3, r2
 8002658:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2288      	movs	r2, #136	; 0x88
 800265e:	4393      	bics	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	4313      	orrs	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4313      	orrs	r3, r2
 8002672:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2246      	movs	r2, #70	; 0x46
 8002690:	2101      	movs	r1, #1
 8002692:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	223e      	movs	r2, #62	; 0x3e
 8002698:	2101      	movs	r1, #1
 800269a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	223f      	movs	r2, #63	; 0x3f
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2242      	movs	r2, #66	; 0x42
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2243      	movs	r2, #67	; 0x43
 80026b0:	2101      	movs	r1, #1
 80026b2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223d      	movs	r2, #61	; 0x3d
 80026b8:	2101      	movs	r1, #1
 80026ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b006      	add	sp, #24
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	ffffbff8 	.word	0xffffbff8
 80026cc:	fffffcfc 	.word	0xfffffcfc
 80026d0:	fffff3f3 	.word	0xfffff3f3
 80026d4:	ffff0f0f 	.word	0xffff0f0f

080026d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a30      	ldr	r2, [pc, #192]	; (80027ac <TIM_Base_SetConfig+0xd4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d008      	beq.n	8002702 <TIM_Base_SetConfig+0x2a>
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	05db      	lsls	r3, r3, #23
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d003      	beq.n	8002702 <TIM_Base_SetConfig+0x2a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2c      	ldr	r2, [pc, #176]	; (80027b0 <TIM_Base_SetConfig+0xd8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d108      	bne.n	8002714 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2270      	movs	r2, #112	; 0x70
 8002706:	4393      	bics	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <TIM_Base_SetConfig+0xd4>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d014      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	05db      	lsls	r3, r3, #23
 8002722:	429a      	cmp	r2, r3
 8002724:	d00f      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a21      	ldr	r2, [pc, #132]	; (80027b0 <TIM_Base_SetConfig+0xd8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a20      	ldr	r2, [pc, #128]	; (80027b4 <TIM_Base_SetConfig+0xdc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a1f      	ldr	r2, [pc, #124]	; (80027b8 <TIM_Base_SetConfig+0xe0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <TIM_Base_SetConfig+0x6e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1e      	ldr	r2, [pc, #120]	; (80027bc <TIM_Base_SetConfig+0xe4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d108      	bne.n	8002758 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <TIM_Base_SetConfig+0xe8>)
 800274a:	4013      	ands	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	4393      	bics	r3, r2
 800275e:	001a      	movs	r2, r3
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <TIM_Base_SetConfig+0xd4>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <TIM_Base_SetConfig+0xbe>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0b      	ldr	r2, [pc, #44]	; (80027b8 <TIM_Base_SetConfig+0xe0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_Base_SetConfig+0xbe>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <TIM_Base_SetConfig+0xe4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d103      	bne.n	800279e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	615a      	str	r2, [r3, #20]
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b004      	add	sp, #16
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40002000 	.word	0x40002000
 80027b8:	40014400 	.word	0x40014400
 80027bc:	40014800 	.word	0x40014800
 80027c0:	fffffcff 	.word	0xfffffcff

080027c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	223c      	movs	r2, #60	; 0x3c
 80027d2:	5c9b      	ldrb	r3, [r3, r2]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027d8:	2302      	movs	r3, #2
 80027da:	e042      	b.n	8002862 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	223c      	movs	r2, #60	; 0x3c
 80027e0:	2101      	movs	r1, #1
 80027e2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	223d      	movs	r2, #61	; 0x3d
 80027e8:	2102      	movs	r1, #2
 80027ea:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2270      	movs	r2, #112	; 0x70
 8002800:	4393      	bics	r3, r2
 8002802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00a      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	05db      	lsls	r3, r3, #23
 8002828:	429a      	cmp	r2, r3
 800282a:	d004      	beq.n	8002836 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d10c      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	4393      	bics	r3, r2
 800283c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	4313      	orrs	r3, r2
 8002846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	223d      	movs	r2, #61	; 0x3d
 8002854:	2101      	movs	r1, #1
 8002856:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	223c      	movs	r2, #60	; 0x3c
 800285c:	2100      	movs	r1, #0
 800285e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b004      	add	sp, #16
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	40012c00 	.word	0x40012c00
 8002870:	40000400 	.word	0x40000400

08002874 <__libc_init_array>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2600      	movs	r6, #0
 8002878:	4d0c      	ldr	r5, [pc, #48]	; (80028ac <__libc_init_array+0x38>)
 800287a:	4c0d      	ldr	r4, [pc, #52]	; (80028b0 <__libc_init_array+0x3c>)
 800287c:	1b64      	subs	r4, r4, r5
 800287e:	10a4      	asrs	r4, r4, #2
 8002880:	42a6      	cmp	r6, r4
 8002882:	d109      	bne.n	8002898 <__libc_init_array+0x24>
 8002884:	2600      	movs	r6, #0
 8002886:	f000 f821 	bl	80028cc <_init>
 800288a:	4d0a      	ldr	r5, [pc, #40]	; (80028b4 <__libc_init_array+0x40>)
 800288c:	4c0a      	ldr	r4, [pc, #40]	; (80028b8 <__libc_init_array+0x44>)
 800288e:	1b64      	subs	r4, r4, r5
 8002890:	10a4      	asrs	r4, r4, #2
 8002892:	42a6      	cmp	r6, r4
 8002894:	d105      	bne.n	80028a2 <__libc_init_array+0x2e>
 8002896:	bd70      	pop	{r4, r5, r6, pc}
 8002898:	00b3      	lsls	r3, r6, #2
 800289a:	58eb      	ldr	r3, [r5, r3]
 800289c:	4798      	blx	r3
 800289e:	3601      	adds	r6, #1
 80028a0:	e7ee      	b.n	8002880 <__libc_init_array+0xc>
 80028a2:	00b3      	lsls	r3, r6, #2
 80028a4:	58eb      	ldr	r3, [r5, r3]
 80028a6:	4798      	blx	r3
 80028a8:	3601      	adds	r6, #1
 80028aa:	e7f2      	b.n	8002892 <__libc_init_array+0x1e>
 80028ac:	08002994 	.word	0x08002994
 80028b0:	08002994 	.word	0x08002994
 80028b4:	08002994 	.word	0x08002994
 80028b8:	08002998 	.word	0x08002998

080028bc <memset>:
 80028bc:	0003      	movs	r3, r0
 80028be:	1882      	adds	r2, r0, r2
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d100      	bne.n	80028c6 <memset+0xa>
 80028c4:	4770      	bx	lr
 80028c6:	7019      	strb	r1, [r3, #0]
 80028c8:	3301      	adds	r3, #1
 80028ca:	e7f9      	b.n	80028c0 <memset+0x4>

080028cc <_init>:
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028d2:	bc08      	pop	{r3}
 80028d4:	469e      	mov	lr, r3
 80028d6:	4770      	bx	lr

080028d8 <_fini>:
 80028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028de:	bc08      	pop	{r3}
 80028e0:	469e      	mov	lr, r3
 80028e2:	4770      	bx	lr
