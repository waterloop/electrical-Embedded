
Yamper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003528  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080035e8  080035e8  000135e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003698  08003698  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003698  08003698  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003698  08003698  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800369c  0800369c  0001369c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080036a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  080036ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  080036ac  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aecf  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a61  00000000  00000000  0002af03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002d3d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018677  00000000  00000000  0002dd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b691  00000000  00000000  000463e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e9e3  00000000  00000000  00051a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e045b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  000e04b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035d0 	.word	0x080035d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080035d0 	.word	0x080035d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ddiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	4645      	mov	r5, r8
 8000228:	46de      	mov	lr, fp
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	4681      	mov	r9, r0
 800022e:	0005      	movs	r5, r0
 8000230:	030c      	lsls	r4, r1, #12
 8000232:	0048      	lsls	r0, r1, #1
 8000234:	4692      	mov	sl, r2
 8000236:	001f      	movs	r7, r3
 8000238:	b085      	sub	sp, #20
 800023a:	0b24      	lsrs	r4, r4, #12
 800023c:	0d40      	lsrs	r0, r0, #21
 800023e:	0fce      	lsrs	r6, r1, #31
 8000240:	2800      	cmp	r0, #0
 8000242:	d059      	beq.n	80002f8 <__aeabi_ddiv+0xd8>
 8000244:	4b87      	ldr	r3, [pc, #540]	; (8000464 <__aeabi_ddiv+0x244>)
 8000246:	4298      	cmp	r0, r3
 8000248:	d100      	bne.n	800024c <__aeabi_ddiv+0x2c>
 800024a:	e098      	b.n	800037e <__aeabi_ddiv+0x15e>
 800024c:	0f6b      	lsrs	r3, r5, #29
 800024e:	00e4      	lsls	r4, r4, #3
 8000250:	431c      	orrs	r4, r3
 8000252:	2380      	movs	r3, #128	; 0x80
 8000254:	041b      	lsls	r3, r3, #16
 8000256:	4323      	orrs	r3, r4
 8000258:	4698      	mov	r8, r3
 800025a:	4b83      	ldr	r3, [pc, #524]	; (8000468 <__aeabi_ddiv+0x248>)
 800025c:	00ed      	lsls	r5, r5, #3
 800025e:	469b      	mov	fp, r3
 8000260:	2300      	movs	r3, #0
 8000262:	4699      	mov	r9, r3
 8000264:	4483      	add	fp, r0
 8000266:	9300      	str	r3, [sp, #0]
 8000268:	033c      	lsls	r4, r7, #12
 800026a:	007b      	lsls	r3, r7, #1
 800026c:	4650      	mov	r0, sl
 800026e:	0b24      	lsrs	r4, r4, #12
 8000270:	0d5b      	lsrs	r3, r3, #21
 8000272:	0fff      	lsrs	r7, r7, #31
 8000274:	2b00      	cmp	r3, #0
 8000276:	d067      	beq.n	8000348 <__aeabi_ddiv+0x128>
 8000278:	4a7a      	ldr	r2, [pc, #488]	; (8000464 <__aeabi_ddiv+0x244>)
 800027a:	4293      	cmp	r3, r2
 800027c:	d018      	beq.n	80002b0 <__aeabi_ddiv+0x90>
 800027e:	497a      	ldr	r1, [pc, #488]	; (8000468 <__aeabi_ddiv+0x248>)
 8000280:	0f42      	lsrs	r2, r0, #29
 8000282:	468c      	mov	ip, r1
 8000284:	00e4      	lsls	r4, r4, #3
 8000286:	4659      	mov	r1, fp
 8000288:	4314      	orrs	r4, r2
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	4463      	add	r3, ip
 800028e:	0412      	lsls	r2, r2, #16
 8000290:	1acb      	subs	r3, r1, r3
 8000292:	4314      	orrs	r4, r2
 8000294:	469b      	mov	fp, r3
 8000296:	00c2      	lsls	r2, r0, #3
 8000298:	2000      	movs	r0, #0
 800029a:	0033      	movs	r3, r6
 800029c:	407b      	eors	r3, r7
 800029e:	469a      	mov	sl, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	2b0f      	cmp	r3, #15
 80002a4:	d900      	bls.n	80002a8 <__aeabi_ddiv+0x88>
 80002a6:	e0ef      	b.n	8000488 <__aeabi_ddiv+0x268>
 80002a8:	4970      	ldr	r1, [pc, #448]	; (800046c <__aeabi_ddiv+0x24c>)
 80002aa:	009b      	lsls	r3, r3, #2
 80002ac:	58cb      	ldr	r3, [r1, r3]
 80002ae:	469f      	mov	pc, r3
 80002b0:	4b6f      	ldr	r3, [pc, #444]	; (8000470 <__aeabi_ddiv+0x250>)
 80002b2:	4652      	mov	r2, sl
 80002b4:	469c      	mov	ip, r3
 80002b6:	4322      	orrs	r2, r4
 80002b8:	44e3      	add	fp, ip
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d000      	beq.n	80002c0 <__aeabi_ddiv+0xa0>
 80002be:	e095      	b.n	80003ec <__aeabi_ddiv+0x1cc>
 80002c0:	4649      	mov	r1, r9
 80002c2:	2302      	movs	r3, #2
 80002c4:	4319      	orrs	r1, r3
 80002c6:	4689      	mov	r9, r1
 80002c8:	2400      	movs	r4, #0
 80002ca:	2002      	movs	r0, #2
 80002cc:	e7e5      	b.n	800029a <__aeabi_ddiv+0x7a>
 80002ce:	2300      	movs	r3, #0
 80002d0:	2400      	movs	r4, #0
 80002d2:	2500      	movs	r5, #0
 80002d4:	4652      	mov	r2, sl
 80002d6:	051b      	lsls	r3, r3, #20
 80002d8:	4323      	orrs	r3, r4
 80002da:	07d2      	lsls	r2, r2, #31
 80002dc:	4313      	orrs	r3, r2
 80002de:	0028      	movs	r0, r5
 80002e0:	0019      	movs	r1, r3
 80002e2:	b005      	add	sp, #20
 80002e4:	bcf0      	pop	{r4, r5, r6, r7}
 80002e6:	46bb      	mov	fp, r7
 80002e8:	46b2      	mov	sl, r6
 80002ea:	46a9      	mov	r9, r5
 80002ec:	46a0      	mov	r8, r4
 80002ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f0:	2400      	movs	r4, #0
 80002f2:	2500      	movs	r5, #0
 80002f4:	4b5b      	ldr	r3, [pc, #364]	; (8000464 <__aeabi_ddiv+0x244>)
 80002f6:	e7ed      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80002f8:	464b      	mov	r3, r9
 80002fa:	4323      	orrs	r3, r4
 80002fc:	4698      	mov	r8, r3
 80002fe:	d100      	bne.n	8000302 <__aeabi_ddiv+0xe2>
 8000300:	e089      	b.n	8000416 <__aeabi_ddiv+0x1f6>
 8000302:	2c00      	cmp	r4, #0
 8000304:	d100      	bne.n	8000308 <__aeabi_ddiv+0xe8>
 8000306:	e1e0      	b.n	80006ca <__aeabi_ddiv+0x4aa>
 8000308:	0020      	movs	r0, r4
 800030a:	f000 fd95 	bl	8000e38 <__clzsi2>
 800030e:	0001      	movs	r1, r0
 8000310:	0002      	movs	r2, r0
 8000312:	390b      	subs	r1, #11
 8000314:	231d      	movs	r3, #29
 8000316:	1a5b      	subs	r3, r3, r1
 8000318:	4649      	mov	r1, r9
 800031a:	0010      	movs	r0, r2
 800031c:	40d9      	lsrs	r1, r3
 800031e:	3808      	subs	r0, #8
 8000320:	4084      	lsls	r4, r0
 8000322:	000b      	movs	r3, r1
 8000324:	464d      	mov	r5, r9
 8000326:	4323      	orrs	r3, r4
 8000328:	4698      	mov	r8, r3
 800032a:	4085      	lsls	r5, r0
 800032c:	4851      	ldr	r0, [pc, #324]	; (8000474 <__aeabi_ddiv+0x254>)
 800032e:	033c      	lsls	r4, r7, #12
 8000330:	1a83      	subs	r3, r0, r2
 8000332:	469b      	mov	fp, r3
 8000334:	2300      	movs	r3, #0
 8000336:	4699      	mov	r9, r3
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	007b      	lsls	r3, r7, #1
 800033c:	4650      	mov	r0, sl
 800033e:	0b24      	lsrs	r4, r4, #12
 8000340:	0d5b      	lsrs	r3, r3, #21
 8000342:	0fff      	lsrs	r7, r7, #31
 8000344:	2b00      	cmp	r3, #0
 8000346:	d197      	bne.n	8000278 <__aeabi_ddiv+0x58>
 8000348:	4652      	mov	r2, sl
 800034a:	4322      	orrs	r2, r4
 800034c:	d055      	beq.n	80003fa <__aeabi_ddiv+0x1da>
 800034e:	2c00      	cmp	r4, #0
 8000350:	d100      	bne.n	8000354 <__aeabi_ddiv+0x134>
 8000352:	e1ca      	b.n	80006ea <__aeabi_ddiv+0x4ca>
 8000354:	0020      	movs	r0, r4
 8000356:	f000 fd6f 	bl	8000e38 <__clzsi2>
 800035a:	0002      	movs	r2, r0
 800035c:	3a0b      	subs	r2, #11
 800035e:	231d      	movs	r3, #29
 8000360:	0001      	movs	r1, r0
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	3908      	subs	r1, #8
 8000368:	40da      	lsrs	r2, r3
 800036a:	408c      	lsls	r4, r1
 800036c:	4314      	orrs	r4, r2
 800036e:	4652      	mov	r2, sl
 8000370:	408a      	lsls	r2, r1
 8000372:	4b41      	ldr	r3, [pc, #260]	; (8000478 <__aeabi_ddiv+0x258>)
 8000374:	4458      	add	r0, fp
 8000376:	469b      	mov	fp, r3
 8000378:	4483      	add	fp, r0
 800037a:	2000      	movs	r0, #0
 800037c:	e78d      	b.n	800029a <__aeabi_ddiv+0x7a>
 800037e:	464b      	mov	r3, r9
 8000380:	4323      	orrs	r3, r4
 8000382:	4698      	mov	r8, r3
 8000384:	d140      	bne.n	8000408 <__aeabi_ddiv+0x1e8>
 8000386:	2308      	movs	r3, #8
 8000388:	4699      	mov	r9, r3
 800038a:	3b06      	subs	r3, #6
 800038c:	2500      	movs	r5, #0
 800038e:	4683      	mov	fp, r0
 8000390:	9300      	str	r3, [sp, #0]
 8000392:	e769      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000394:	46b2      	mov	sl, r6
 8000396:	9b00      	ldr	r3, [sp, #0]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d0a9      	beq.n	80002f0 <__aeabi_ddiv+0xd0>
 800039c:	2b03      	cmp	r3, #3
 800039e:	d100      	bne.n	80003a2 <__aeabi_ddiv+0x182>
 80003a0:	e211      	b.n	80007c6 <__aeabi_ddiv+0x5a6>
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d093      	beq.n	80002ce <__aeabi_ddiv+0xae>
 80003a6:	4a35      	ldr	r2, [pc, #212]	; (800047c <__aeabi_ddiv+0x25c>)
 80003a8:	445a      	add	r2, fp
 80003aa:	2a00      	cmp	r2, #0
 80003ac:	dc00      	bgt.n	80003b0 <__aeabi_ddiv+0x190>
 80003ae:	e13c      	b.n	800062a <__aeabi_ddiv+0x40a>
 80003b0:	076b      	lsls	r3, r5, #29
 80003b2:	d000      	beq.n	80003b6 <__aeabi_ddiv+0x196>
 80003b4:	e1a7      	b.n	8000706 <__aeabi_ddiv+0x4e6>
 80003b6:	08ed      	lsrs	r5, r5, #3
 80003b8:	4643      	mov	r3, r8
 80003ba:	01db      	lsls	r3, r3, #7
 80003bc:	d506      	bpl.n	80003cc <__aeabi_ddiv+0x1ac>
 80003be:	4642      	mov	r2, r8
 80003c0:	4b2f      	ldr	r3, [pc, #188]	; (8000480 <__aeabi_ddiv+0x260>)
 80003c2:	401a      	ands	r2, r3
 80003c4:	4690      	mov	r8, r2
 80003c6:	2280      	movs	r2, #128	; 0x80
 80003c8:	00d2      	lsls	r2, r2, #3
 80003ca:	445a      	add	r2, fp
 80003cc:	4b2d      	ldr	r3, [pc, #180]	; (8000484 <__aeabi_ddiv+0x264>)
 80003ce:	429a      	cmp	r2, r3
 80003d0:	dc8e      	bgt.n	80002f0 <__aeabi_ddiv+0xd0>
 80003d2:	4643      	mov	r3, r8
 80003d4:	0552      	lsls	r2, r2, #21
 80003d6:	0758      	lsls	r0, r3, #29
 80003d8:	025c      	lsls	r4, r3, #9
 80003da:	4305      	orrs	r5, r0
 80003dc:	0b24      	lsrs	r4, r4, #12
 80003de:	0d53      	lsrs	r3, r2, #21
 80003e0:	e778      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80003e2:	46ba      	mov	sl, r7
 80003e4:	46a0      	mov	r8, r4
 80003e6:	0015      	movs	r5, r2
 80003e8:	9000      	str	r0, [sp, #0]
 80003ea:	e7d4      	b.n	8000396 <__aeabi_ddiv+0x176>
 80003ec:	464a      	mov	r2, r9
 80003ee:	2303      	movs	r3, #3
 80003f0:	431a      	orrs	r2, r3
 80003f2:	4691      	mov	r9, r2
 80003f4:	2003      	movs	r0, #3
 80003f6:	4652      	mov	r2, sl
 80003f8:	e74f      	b.n	800029a <__aeabi_ddiv+0x7a>
 80003fa:	4649      	mov	r1, r9
 80003fc:	2301      	movs	r3, #1
 80003fe:	4319      	orrs	r1, r3
 8000400:	4689      	mov	r9, r1
 8000402:	2400      	movs	r4, #0
 8000404:	2001      	movs	r0, #1
 8000406:	e748      	b.n	800029a <__aeabi_ddiv+0x7a>
 8000408:	230c      	movs	r3, #12
 800040a:	4699      	mov	r9, r3
 800040c:	3b09      	subs	r3, #9
 800040e:	46a0      	mov	r8, r4
 8000410:	4683      	mov	fp, r0
 8000412:	9300      	str	r3, [sp, #0]
 8000414:	e728      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000416:	2304      	movs	r3, #4
 8000418:	4699      	mov	r9, r3
 800041a:	2300      	movs	r3, #0
 800041c:	469b      	mov	fp, r3
 800041e:	3301      	adds	r3, #1
 8000420:	2500      	movs	r5, #0
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	e720      	b.n	8000268 <__aeabi_ddiv+0x48>
 8000426:	2300      	movs	r3, #0
 8000428:	2480      	movs	r4, #128	; 0x80
 800042a:	469a      	mov	sl, r3
 800042c:	2500      	movs	r5, #0
 800042e:	4b0d      	ldr	r3, [pc, #52]	; (8000464 <__aeabi_ddiv+0x244>)
 8000430:	0324      	lsls	r4, r4, #12
 8000432:	e74f      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000434:	2380      	movs	r3, #128	; 0x80
 8000436:	4641      	mov	r1, r8
 8000438:	031b      	lsls	r3, r3, #12
 800043a:	4219      	tst	r1, r3
 800043c:	d008      	beq.n	8000450 <__aeabi_ddiv+0x230>
 800043e:	421c      	tst	r4, r3
 8000440:	d106      	bne.n	8000450 <__aeabi_ddiv+0x230>
 8000442:	431c      	orrs	r4, r3
 8000444:	0324      	lsls	r4, r4, #12
 8000446:	46ba      	mov	sl, r7
 8000448:	0015      	movs	r5, r2
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <__aeabi_ddiv+0x244>)
 800044c:	0b24      	lsrs	r4, r4, #12
 800044e:	e741      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000450:	2480      	movs	r4, #128	; 0x80
 8000452:	4643      	mov	r3, r8
 8000454:	0324      	lsls	r4, r4, #12
 8000456:	431c      	orrs	r4, r3
 8000458:	0324      	lsls	r4, r4, #12
 800045a:	46b2      	mov	sl, r6
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <__aeabi_ddiv+0x244>)
 800045e:	0b24      	lsrs	r4, r4, #12
 8000460:	e738      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	000007ff 	.word	0x000007ff
 8000468:	fffffc01 	.word	0xfffffc01
 800046c:	08003608 	.word	0x08003608
 8000470:	fffff801 	.word	0xfffff801
 8000474:	fffffc0d 	.word	0xfffffc0d
 8000478:	000003f3 	.word	0x000003f3
 800047c:	000003ff 	.word	0x000003ff
 8000480:	feffffff 	.word	0xfeffffff
 8000484:	000007fe 	.word	0x000007fe
 8000488:	4544      	cmp	r4, r8
 800048a:	d200      	bcs.n	800048e <__aeabi_ddiv+0x26e>
 800048c:	e116      	b.n	80006bc <__aeabi_ddiv+0x49c>
 800048e:	d100      	bne.n	8000492 <__aeabi_ddiv+0x272>
 8000490:	e111      	b.n	80006b6 <__aeabi_ddiv+0x496>
 8000492:	2301      	movs	r3, #1
 8000494:	425b      	negs	r3, r3
 8000496:	469c      	mov	ip, r3
 8000498:	002e      	movs	r6, r5
 800049a:	4640      	mov	r0, r8
 800049c:	2500      	movs	r5, #0
 800049e:	44e3      	add	fp, ip
 80004a0:	0223      	lsls	r3, r4, #8
 80004a2:	0e14      	lsrs	r4, r2, #24
 80004a4:	431c      	orrs	r4, r3
 80004a6:	0c1b      	lsrs	r3, r3, #16
 80004a8:	4699      	mov	r9, r3
 80004aa:	0423      	lsls	r3, r4, #16
 80004ac:	0c1f      	lsrs	r7, r3, #16
 80004ae:	0212      	lsls	r2, r2, #8
 80004b0:	4649      	mov	r1, r9
 80004b2:	9200      	str	r2, [sp, #0]
 80004b4:	9701      	str	r7, [sp, #4]
 80004b6:	f7ff fead 	bl	8000214 <__aeabi_uidivmod>
 80004ba:	0002      	movs	r2, r0
 80004bc:	437a      	muls	r2, r7
 80004be:	040b      	lsls	r3, r1, #16
 80004c0:	0c31      	lsrs	r1, r6, #16
 80004c2:	4680      	mov	r8, r0
 80004c4:	4319      	orrs	r1, r3
 80004c6:	428a      	cmp	r2, r1
 80004c8:	d90b      	bls.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	469c      	mov	ip, r3
 80004d0:	1909      	adds	r1, r1, r4
 80004d2:	44e0      	add	r8, ip
 80004d4:	428c      	cmp	r4, r1
 80004d6:	d804      	bhi.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004d8:	428a      	cmp	r2, r1
 80004da:	d902      	bls.n	80004e2 <__aeabi_ddiv+0x2c2>
 80004dc:	1e83      	subs	r3, r0, #2
 80004de:	4698      	mov	r8, r3
 80004e0:	1909      	adds	r1, r1, r4
 80004e2:	1a88      	subs	r0, r1, r2
 80004e4:	4649      	mov	r1, r9
 80004e6:	f7ff fe95 	bl	8000214 <__aeabi_uidivmod>
 80004ea:	0409      	lsls	r1, r1, #16
 80004ec:	468c      	mov	ip, r1
 80004ee:	0431      	lsls	r1, r6, #16
 80004f0:	4666      	mov	r6, ip
 80004f2:	9a01      	ldr	r2, [sp, #4]
 80004f4:	0c09      	lsrs	r1, r1, #16
 80004f6:	4342      	muls	r2, r0
 80004f8:	0003      	movs	r3, r0
 80004fa:	4331      	orrs	r1, r6
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d904      	bls.n	800050a <__aeabi_ddiv+0x2ea>
 8000500:	1909      	adds	r1, r1, r4
 8000502:	3b01      	subs	r3, #1
 8000504:	428c      	cmp	r4, r1
 8000506:	d800      	bhi.n	800050a <__aeabi_ddiv+0x2ea>
 8000508:	e111      	b.n	800072e <__aeabi_ddiv+0x50e>
 800050a:	1a89      	subs	r1, r1, r2
 800050c:	4642      	mov	r2, r8
 800050e:	9e00      	ldr	r6, [sp, #0]
 8000510:	0412      	lsls	r2, r2, #16
 8000512:	431a      	orrs	r2, r3
 8000514:	0c33      	lsrs	r3, r6, #16
 8000516:	001f      	movs	r7, r3
 8000518:	0c10      	lsrs	r0, r2, #16
 800051a:	4690      	mov	r8, r2
 800051c:	9302      	str	r3, [sp, #8]
 800051e:	0413      	lsls	r3, r2, #16
 8000520:	0432      	lsls	r2, r6, #16
 8000522:	0c16      	lsrs	r6, r2, #16
 8000524:	0032      	movs	r2, r6
 8000526:	0c1b      	lsrs	r3, r3, #16
 8000528:	435a      	muls	r2, r3
 800052a:	9603      	str	r6, [sp, #12]
 800052c:	437b      	muls	r3, r7
 800052e:	4346      	muls	r6, r0
 8000530:	4378      	muls	r0, r7
 8000532:	0c17      	lsrs	r7, r2, #16
 8000534:	46bc      	mov	ip, r7
 8000536:	199b      	adds	r3, r3, r6
 8000538:	4463      	add	r3, ip
 800053a:	429e      	cmp	r6, r3
 800053c:	d903      	bls.n	8000546 <__aeabi_ddiv+0x326>
 800053e:	2680      	movs	r6, #128	; 0x80
 8000540:	0276      	lsls	r6, r6, #9
 8000542:	46b4      	mov	ip, r6
 8000544:	4460      	add	r0, ip
 8000546:	0c1e      	lsrs	r6, r3, #16
 8000548:	1830      	adds	r0, r6, r0
 800054a:	0416      	lsls	r6, r2, #16
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	0c36      	lsrs	r6, r6, #16
 8000550:	199e      	adds	r6, r3, r6
 8000552:	4281      	cmp	r1, r0
 8000554:	d200      	bcs.n	8000558 <__aeabi_ddiv+0x338>
 8000556:	e09c      	b.n	8000692 <__aeabi_ddiv+0x472>
 8000558:	d100      	bne.n	800055c <__aeabi_ddiv+0x33c>
 800055a:	e097      	b.n	800068c <__aeabi_ddiv+0x46c>
 800055c:	1bae      	subs	r6, r5, r6
 800055e:	1a09      	subs	r1, r1, r0
 8000560:	42b5      	cmp	r5, r6
 8000562:	4180      	sbcs	r0, r0
 8000564:	4240      	negs	r0, r0
 8000566:	1a08      	subs	r0, r1, r0
 8000568:	4284      	cmp	r4, r0
 800056a:	d100      	bne.n	800056e <__aeabi_ddiv+0x34e>
 800056c:	e111      	b.n	8000792 <__aeabi_ddiv+0x572>
 800056e:	4649      	mov	r1, r9
 8000570:	f7ff fe50 	bl	8000214 <__aeabi_uidivmod>
 8000574:	9a01      	ldr	r2, [sp, #4]
 8000576:	040b      	lsls	r3, r1, #16
 8000578:	4342      	muls	r2, r0
 800057a:	0c31      	lsrs	r1, r6, #16
 800057c:	0005      	movs	r5, r0
 800057e:	4319      	orrs	r1, r3
 8000580:	428a      	cmp	r2, r1
 8000582:	d907      	bls.n	8000594 <__aeabi_ddiv+0x374>
 8000584:	1909      	adds	r1, r1, r4
 8000586:	3d01      	subs	r5, #1
 8000588:	428c      	cmp	r4, r1
 800058a:	d803      	bhi.n	8000594 <__aeabi_ddiv+0x374>
 800058c:	428a      	cmp	r2, r1
 800058e:	d901      	bls.n	8000594 <__aeabi_ddiv+0x374>
 8000590:	1e85      	subs	r5, r0, #2
 8000592:	1909      	adds	r1, r1, r4
 8000594:	1a88      	subs	r0, r1, r2
 8000596:	4649      	mov	r1, r9
 8000598:	f7ff fe3c 	bl	8000214 <__aeabi_uidivmod>
 800059c:	0409      	lsls	r1, r1, #16
 800059e:	468c      	mov	ip, r1
 80005a0:	0431      	lsls	r1, r6, #16
 80005a2:	4666      	mov	r6, ip
 80005a4:	9a01      	ldr	r2, [sp, #4]
 80005a6:	0c09      	lsrs	r1, r1, #16
 80005a8:	4342      	muls	r2, r0
 80005aa:	0003      	movs	r3, r0
 80005ac:	4331      	orrs	r1, r6
 80005ae:	428a      	cmp	r2, r1
 80005b0:	d907      	bls.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005b2:	1909      	adds	r1, r1, r4
 80005b4:	3b01      	subs	r3, #1
 80005b6:	428c      	cmp	r4, r1
 80005b8:	d803      	bhi.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005ba:	428a      	cmp	r2, r1
 80005bc:	d901      	bls.n	80005c2 <__aeabi_ddiv+0x3a2>
 80005be:	1e83      	subs	r3, r0, #2
 80005c0:	1909      	adds	r1, r1, r4
 80005c2:	9e03      	ldr	r6, [sp, #12]
 80005c4:	1a89      	subs	r1, r1, r2
 80005c6:	0032      	movs	r2, r6
 80005c8:	042d      	lsls	r5, r5, #16
 80005ca:	431d      	orrs	r5, r3
 80005cc:	9f02      	ldr	r7, [sp, #8]
 80005ce:	042b      	lsls	r3, r5, #16
 80005d0:	0c1b      	lsrs	r3, r3, #16
 80005d2:	435a      	muls	r2, r3
 80005d4:	437b      	muls	r3, r7
 80005d6:	469c      	mov	ip, r3
 80005d8:	0c28      	lsrs	r0, r5, #16
 80005da:	4346      	muls	r6, r0
 80005dc:	0c13      	lsrs	r3, r2, #16
 80005de:	44b4      	add	ip, r6
 80005e0:	4463      	add	r3, ip
 80005e2:	4378      	muls	r0, r7
 80005e4:	429e      	cmp	r6, r3
 80005e6:	d903      	bls.n	80005f0 <__aeabi_ddiv+0x3d0>
 80005e8:	2680      	movs	r6, #128	; 0x80
 80005ea:	0276      	lsls	r6, r6, #9
 80005ec:	46b4      	mov	ip, r6
 80005ee:	4460      	add	r0, ip
 80005f0:	0c1e      	lsrs	r6, r3, #16
 80005f2:	0412      	lsls	r2, r2, #16
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	0c12      	lsrs	r2, r2, #16
 80005f8:	1830      	adds	r0, r6, r0
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	4281      	cmp	r1, r0
 80005fe:	d306      	bcc.n	800060e <__aeabi_ddiv+0x3ee>
 8000600:	d002      	beq.n	8000608 <__aeabi_ddiv+0x3e8>
 8000602:	2301      	movs	r3, #1
 8000604:	431d      	orrs	r5, r3
 8000606:	e6ce      	b.n	80003a6 <__aeabi_ddiv+0x186>
 8000608:	2b00      	cmp	r3, #0
 800060a:	d100      	bne.n	800060e <__aeabi_ddiv+0x3ee>
 800060c:	e6cb      	b.n	80003a6 <__aeabi_ddiv+0x186>
 800060e:	1861      	adds	r1, r4, r1
 8000610:	1e6e      	subs	r6, r5, #1
 8000612:	42a1      	cmp	r1, r4
 8000614:	d200      	bcs.n	8000618 <__aeabi_ddiv+0x3f8>
 8000616:	e0a4      	b.n	8000762 <__aeabi_ddiv+0x542>
 8000618:	4281      	cmp	r1, r0
 800061a:	d200      	bcs.n	800061e <__aeabi_ddiv+0x3fe>
 800061c:	e0c9      	b.n	80007b2 <__aeabi_ddiv+0x592>
 800061e:	d100      	bne.n	8000622 <__aeabi_ddiv+0x402>
 8000620:	e0d9      	b.n	80007d6 <__aeabi_ddiv+0x5b6>
 8000622:	0035      	movs	r5, r6
 8000624:	e7ed      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 8000626:	2501      	movs	r5, #1
 8000628:	426d      	negs	r5, r5
 800062a:	2101      	movs	r1, #1
 800062c:	1a89      	subs	r1, r1, r2
 800062e:	2938      	cmp	r1, #56	; 0x38
 8000630:	dd00      	ble.n	8000634 <__aeabi_ddiv+0x414>
 8000632:	e64c      	b.n	80002ce <__aeabi_ddiv+0xae>
 8000634:	291f      	cmp	r1, #31
 8000636:	dc00      	bgt.n	800063a <__aeabi_ddiv+0x41a>
 8000638:	e07f      	b.n	800073a <__aeabi_ddiv+0x51a>
 800063a:	231f      	movs	r3, #31
 800063c:	425b      	negs	r3, r3
 800063e:	1a9a      	subs	r2, r3, r2
 8000640:	4643      	mov	r3, r8
 8000642:	40d3      	lsrs	r3, r2
 8000644:	2920      	cmp	r1, #32
 8000646:	d004      	beq.n	8000652 <__aeabi_ddiv+0x432>
 8000648:	4644      	mov	r4, r8
 800064a:	4a65      	ldr	r2, [pc, #404]	; (80007e0 <__aeabi_ddiv+0x5c0>)
 800064c:	445a      	add	r2, fp
 800064e:	4094      	lsls	r4, r2
 8000650:	4325      	orrs	r5, r4
 8000652:	1e6a      	subs	r2, r5, #1
 8000654:	4195      	sbcs	r5, r2
 8000656:	2207      	movs	r2, #7
 8000658:	432b      	orrs	r3, r5
 800065a:	0015      	movs	r5, r2
 800065c:	2400      	movs	r4, #0
 800065e:	401d      	ands	r5, r3
 8000660:	421a      	tst	r2, r3
 8000662:	d100      	bne.n	8000666 <__aeabi_ddiv+0x446>
 8000664:	e0a1      	b.n	80007aa <__aeabi_ddiv+0x58a>
 8000666:	220f      	movs	r2, #15
 8000668:	2400      	movs	r4, #0
 800066a:	401a      	ands	r2, r3
 800066c:	2a04      	cmp	r2, #4
 800066e:	d100      	bne.n	8000672 <__aeabi_ddiv+0x452>
 8000670:	e098      	b.n	80007a4 <__aeabi_ddiv+0x584>
 8000672:	1d1a      	adds	r2, r3, #4
 8000674:	429a      	cmp	r2, r3
 8000676:	419b      	sbcs	r3, r3
 8000678:	425b      	negs	r3, r3
 800067a:	18e4      	adds	r4, r4, r3
 800067c:	0013      	movs	r3, r2
 800067e:	0222      	lsls	r2, r4, #8
 8000680:	d400      	bmi.n	8000684 <__aeabi_ddiv+0x464>
 8000682:	e08f      	b.n	80007a4 <__aeabi_ddiv+0x584>
 8000684:	2301      	movs	r3, #1
 8000686:	2400      	movs	r4, #0
 8000688:	2500      	movs	r5, #0
 800068a:	e623      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 800068c:	42b5      	cmp	r5, r6
 800068e:	d300      	bcc.n	8000692 <__aeabi_ddiv+0x472>
 8000690:	e764      	b.n	800055c <__aeabi_ddiv+0x33c>
 8000692:	4643      	mov	r3, r8
 8000694:	1e5a      	subs	r2, r3, #1
 8000696:	9b00      	ldr	r3, [sp, #0]
 8000698:	469c      	mov	ip, r3
 800069a:	4465      	add	r5, ip
 800069c:	001f      	movs	r7, r3
 800069e:	429d      	cmp	r5, r3
 80006a0:	419b      	sbcs	r3, r3
 80006a2:	425b      	negs	r3, r3
 80006a4:	191b      	adds	r3, r3, r4
 80006a6:	18c9      	adds	r1, r1, r3
 80006a8:	428c      	cmp	r4, r1
 80006aa:	d23a      	bcs.n	8000722 <__aeabi_ddiv+0x502>
 80006ac:	4288      	cmp	r0, r1
 80006ae:	d863      	bhi.n	8000778 <__aeabi_ddiv+0x558>
 80006b0:	d060      	beq.n	8000774 <__aeabi_ddiv+0x554>
 80006b2:	4690      	mov	r8, r2
 80006b4:	e752      	b.n	800055c <__aeabi_ddiv+0x33c>
 80006b6:	42aa      	cmp	r2, r5
 80006b8:	d900      	bls.n	80006bc <__aeabi_ddiv+0x49c>
 80006ba:	e6ea      	b.n	8000492 <__aeabi_ddiv+0x272>
 80006bc:	4643      	mov	r3, r8
 80006be:	07de      	lsls	r6, r3, #31
 80006c0:	0858      	lsrs	r0, r3, #1
 80006c2:	086b      	lsrs	r3, r5, #1
 80006c4:	431e      	orrs	r6, r3
 80006c6:	07ed      	lsls	r5, r5, #31
 80006c8:	e6ea      	b.n	80004a0 <__aeabi_ddiv+0x280>
 80006ca:	4648      	mov	r0, r9
 80006cc:	f000 fbb4 	bl	8000e38 <__clzsi2>
 80006d0:	0001      	movs	r1, r0
 80006d2:	0002      	movs	r2, r0
 80006d4:	3115      	adds	r1, #21
 80006d6:	3220      	adds	r2, #32
 80006d8:	291c      	cmp	r1, #28
 80006da:	dc00      	bgt.n	80006de <__aeabi_ddiv+0x4be>
 80006dc:	e61a      	b.n	8000314 <__aeabi_ddiv+0xf4>
 80006de:	464b      	mov	r3, r9
 80006e0:	3808      	subs	r0, #8
 80006e2:	4083      	lsls	r3, r0
 80006e4:	2500      	movs	r5, #0
 80006e6:	4698      	mov	r8, r3
 80006e8:	e620      	b.n	800032c <__aeabi_ddiv+0x10c>
 80006ea:	f000 fba5 	bl	8000e38 <__clzsi2>
 80006ee:	0003      	movs	r3, r0
 80006f0:	001a      	movs	r2, r3
 80006f2:	3215      	adds	r2, #21
 80006f4:	3020      	adds	r0, #32
 80006f6:	2a1c      	cmp	r2, #28
 80006f8:	dc00      	bgt.n	80006fc <__aeabi_ddiv+0x4dc>
 80006fa:	e630      	b.n	800035e <__aeabi_ddiv+0x13e>
 80006fc:	4654      	mov	r4, sl
 80006fe:	3b08      	subs	r3, #8
 8000700:	2200      	movs	r2, #0
 8000702:	409c      	lsls	r4, r3
 8000704:	e635      	b.n	8000372 <__aeabi_ddiv+0x152>
 8000706:	230f      	movs	r3, #15
 8000708:	402b      	ands	r3, r5
 800070a:	2b04      	cmp	r3, #4
 800070c:	d100      	bne.n	8000710 <__aeabi_ddiv+0x4f0>
 800070e:	e652      	b.n	80003b6 <__aeabi_ddiv+0x196>
 8000710:	2305      	movs	r3, #5
 8000712:	425b      	negs	r3, r3
 8000714:	42ab      	cmp	r3, r5
 8000716:	419b      	sbcs	r3, r3
 8000718:	3504      	adds	r5, #4
 800071a:	425b      	negs	r3, r3
 800071c:	08ed      	lsrs	r5, r5, #3
 800071e:	4498      	add	r8, r3
 8000720:	e64a      	b.n	80003b8 <__aeabi_ddiv+0x198>
 8000722:	428c      	cmp	r4, r1
 8000724:	d1c5      	bne.n	80006b2 <__aeabi_ddiv+0x492>
 8000726:	42af      	cmp	r7, r5
 8000728:	d9c0      	bls.n	80006ac <__aeabi_ddiv+0x48c>
 800072a:	4690      	mov	r8, r2
 800072c:	e716      	b.n	800055c <__aeabi_ddiv+0x33c>
 800072e:	428a      	cmp	r2, r1
 8000730:	d800      	bhi.n	8000734 <__aeabi_ddiv+0x514>
 8000732:	e6ea      	b.n	800050a <__aeabi_ddiv+0x2ea>
 8000734:	1e83      	subs	r3, r0, #2
 8000736:	1909      	adds	r1, r1, r4
 8000738:	e6e7      	b.n	800050a <__aeabi_ddiv+0x2ea>
 800073a:	4a2a      	ldr	r2, [pc, #168]	; (80007e4 <__aeabi_ddiv+0x5c4>)
 800073c:	0028      	movs	r0, r5
 800073e:	445a      	add	r2, fp
 8000740:	4643      	mov	r3, r8
 8000742:	4095      	lsls	r5, r2
 8000744:	4093      	lsls	r3, r2
 8000746:	40c8      	lsrs	r0, r1
 8000748:	1e6a      	subs	r2, r5, #1
 800074a:	4195      	sbcs	r5, r2
 800074c:	4644      	mov	r4, r8
 800074e:	4303      	orrs	r3, r0
 8000750:	432b      	orrs	r3, r5
 8000752:	40cc      	lsrs	r4, r1
 8000754:	075a      	lsls	r2, r3, #29
 8000756:	d092      	beq.n	800067e <__aeabi_ddiv+0x45e>
 8000758:	220f      	movs	r2, #15
 800075a:	401a      	ands	r2, r3
 800075c:	2a04      	cmp	r2, #4
 800075e:	d188      	bne.n	8000672 <__aeabi_ddiv+0x452>
 8000760:	e78d      	b.n	800067e <__aeabi_ddiv+0x45e>
 8000762:	0035      	movs	r5, r6
 8000764:	4281      	cmp	r1, r0
 8000766:	d000      	beq.n	800076a <__aeabi_ddiv+0x54a>
 8000768:	e74b      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 800076a:	9a00      	ldr	r2, [sp, #0]
 800076c:	4293      	cmp	r3, r2
 800076e:	d000      	beq.n	8000772 <__aeabi_ddiv+0x552>
 8000770:	e747      	b.n	8000602 <__aeabi_ddiv+0x3e2>
 8000772:	e618      	b.n	80003a6 <__aeabi_ddiv+0x186>
 8000774:	42ae      	cmp	r6, r5
 8000776:	d99c      	bls.n	80006b2 <__aeabi_ddiv+0x492>
 8000778:	2302      	movs	r3, #2
 800077a:	425b      	negs	r3, r3
 800077c:	469c      	mov	ip, r3
 800077e:	9b00      	ldr	r3, [sp, #0]
 8000780:	44e0      	add	r8, ip
 8000782:	469c      	mov	ip, r3
 8000784:	4465      	add	r5, ip
 8000786:	429d      	cmp	r5, r3
 8000788:	419b      	sbcs	r3, r3
 800078a:	425b      	negs	r3, r3
 800078c:	191b      	adds	r3, r3, r4
 800078e:	18c9      	adds	r1, r1, r3
 8000790:	e6e4      	b.n	800055c <__aeabi_ddiv+0x33c>
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <__aeabi_ddiv+0x5c8>)
 8000794:	445a      	add	r2, fp
 8000796:	2a00      	cmp	r2, #0
 8000798:	dc00      	bgt.n	800079c <__aeabi_ddiv+0x57c>
 800079a:	e744      	b.n	8000626 <__aeabi_ddiv+0x406>
 800079c:	2301      	movs	r3, #1
 800079e:	2500      	movs	r5, #0
 80007a0:	4498      	add	r8, r3
 80007a2:	e609      	b.n	80003b8 <__aeabi_ddiv+0x198>
 80007a4:	0765      	lsls	r5, r4, #29
 80007a6:	0264      	lsls	r4, r4, #9
 80007a8:	0b24      	lsrs	r4, r4, #12
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	431d      	orrs	r5, r3
 80007ae:	2300      	movs	r3, #0
 80007b0:	e590      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80007b2:	9e00      	ldr	r6, [sp, #0]
 80007b4:	3d02      	subs	r5, #2
 80007b6:	0072      	lsls	r2, r6, #1
 80007b8:	42b2      	cmp	r2, r6
 80007ba:	41bf      	sbcs	r7, r7
 80007bc:	427f      	negs	r7, r7
 80007be:	193c      	adds	r4, r7, r4
 80007c0:	1909      	adds	r1, r1, r4
 80007c2:	9200      	str	r2, [sp, #0]
 80007c4:	e7ce      	b.n	8000764 <__aeabi_ddiv+0x544>
 80007c6:	2480      	movs	r4, #128	; 0x80
 80007c8:	4643      	mov	r3, r8
 80007ca:	0324      	lsls	r4, r4, #12
 80007cc:	431c      	orrs	r4, r3
 80007ce:	0324      	lsls	r4, r4, #12
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <__aeabi_ddiv+0x5cc>)
 80007d2:	0b24      	lsrs	r4, r4, #12
 80007d4:	e57e      	b.n	80002d4 <__aeabi_ddiv+0xb4>
 80007d6:	9a00      	ldr	r2, [sp, #0]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d3ea      	bcc.n	80007b2 <__aeabi_ddiv+0x592>
 80007dc:	0035      	movs	r5, r6
 80007de:	e7c4      	b.n	800076a <__aeabi_ddiv+0x54a>
 80007e0:	0000043e 	.word	0x0000043e
 80007e4:	0000041e 	.word	0x0000041e
 80007e8:	000003ff 	.word	0x000003ff
 80007ec:	000007ff 	.word	0x000007ff

080007f0 <__aeabi_dmul>:
 80007f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f2:	4657      	mov	r7, sl
 80007f4:	464e      	mov	r6, r9
 80007f6:	4645      	mov	r5, r8
 80007f8:	46de      	mov	lr, fp
 80007fa:	b5e0      	push	{r5, r6, r7, lr}
 80007fc:	4698      	mov	r8, r3
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004b      	lsls	r3, r1, #1
 8000802:	0006      	movs	r6, r0
 8000804:	4692      	mov	sl, r2
 8000806:	b087      	sub	sp, #28
 8000808:	0b24      	lsrs	r4, r4, #12
 800080a:	0d5b      	lsrs	r3, r3, #21
 800080c:	0fcf      	lsrs	r7, r1, #31
 800080e:	2b00      	cmp	r3, #0
 8000810:	d06c      	beq.n	80008ec <__aeabi_dmul+0xfc>
 8000812:	4add      	ldr	r2, [pc, #884]	; (8000b88 <__aeabi_dmul+0x398>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d100      	bne.n	800081a <__aeabi_dmul+0x2a>
 8000818:	e086      	b.n	8000928 <__aeabi_dmul+0x138>
 800081a:	0f42      	lsrs	r2, r0, #29
 800081c:	00e4      	lsls	r4, r4, #3
 800081e:	4314      	orrs	r4, r2
 8000820:	2280      	movs	r2, #128	; 0x80
 8000822:	0412      	lsls	r2, r2, #16
 8000824:	4314      	orrs	r4, r2
 8000826:	4ad9      	ldr	r2, [pc, #868]	; (8000b8c <__aeabi_dmul+0x39c>)
 8000828:	00c5      	lsls	r5, r0, #3
 800082a:	4694      	mov	ip, r2
 800082c:	4463      	add	r3, ip
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	4699      	mov	r9, r3
 8000834:	469b      	mov	fp, r3
 8000836:	4643      	mov	r3, r8
 8000838:	4642      	mov	r2, r8
 800083a:	031e      	lsls	r6, r3, #12
 800083c:	0fd2      	lsrs	r2, r2, #31
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	4650      	mov	r0, sl
 8000842:	4690      	mov	r8, r2
 8000844:	0b36      	lsrs	r6, r6, #12
 8000846:	0d5b      	lsrs	r3, r3, #21
 8000848:	d100      	bne.n	800084c <__aeabi_dmul+0x5c>
 800084a:	e078      	b.n	800093e <__aeabi_dmul+0x14e>
 800084c:	4ace      	ldr	r2, [pc, #824]	; (8000b88 <__aeabi_dmul+0x398>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d01d      	beq.n	800088e <__aeabi_dmul+0x9e>
 8000852:	49ce      	ldr	r1, [pc, #824]	; (8000b8c <__aeabi_dmul+0x39c>)
 8000854:	0f42      	lsrs	r2, r0, #29
 8000856:	468c      	mov	ip, r1
 8000858:	9900      	ldr	r1, [sp, #0]
 800085a:	4463      	add	r3, ip
 800085c:	00f6      	lsls	r6, r6, #3
 800085e:	468c      	mov	ip, r1
 8000860:	4316      	orrs	r6, r2
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	449c      	add	ip, r3
 8000866:	0412      	lsls	r2, r2, #16
 8000868:	4663      	mov	r3, ip
 800086a:	4316      	orrs	r6, r2
 800086c:	00c2      	lsls	r2, r0, #3
 800086e:	2000      	movs	r0, #0
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	9900      	ldr	r1, [sp, #0]
 8000874:	4643      	mov	r3, r8
 8000876:	3101      	adds	r1, #1
 8000878:	468c      	mov	ip, r1
 800087a:	4649      	mov	r1, r9
 800087c:	407b      	eors	r3, r7
 800087e:	9301      	str	r3, [sp, #4]
 8000880:	290f      	cmp	r1, #15
 8000882:	d900      	bls.n	8000886 <__aeabi_dmul+0x96>
 8000884:	e07e      	b.n	8000984 <__aeabi_dmul+0x194>
 8000886:	4bc2      	ldr	r3, [pc, #776]	; (8000b90 <__aeabi_dmul+0x3a0>)
 8000888:	0089      	lsls	r1, r1, #2
 800088a:	5859      	ldr	r1, [r3, r1]
 800088c:	468f      	mov	pc, r1
 800088e:	4652      	mov	r2, sl
 8000890:	9b00      	ldr	r3, [sp, #0]
 8000892:	4332      	orrs	r2, r6
 8000894:	d000      	beq.n	8000898 <__aeabi_dmul+0xa8>
 8000896:	e156      	b.n	8000b46 <__aeabi_dmul+0x356>
 8000898:	49bb      	ldr	r1, [pc, #748]	; (8000b88 <__aeabi_dmul+0x398>)
 800089a:	2600      	movs	r6, #0
 800089c:	468c      	mov	ip, r1
 800089e:	4463      	add	r3, ip
 80008a0:	4649      	mov	r1, r9
 80008a2:	9300      	str	r3, [sp, #0]
 80008a4:	2302      	movs	r3, #2
 80008a6:	4319      	orrs	r1, r3
 80008a8:	4689      	mov	r9, r1
 80008aa:	2002      	movs	r0, #2
 80008ac:	e7e1      	b.n	8000872 <__aeabi_dmul+0x82>
 80008ae:	4643      	mov	r3, r8
 80008b0:	9301      	str	r3, [sp, #4]
 80008b2:	0034      	movs	r4, r6
 80008b4:	0015      	movs	r5, r2
 80008b6:	4683      	mov	fp, r0
 80008b8:	465b      	mov	r3, fp
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d05e      	beq.n	800097c <__aeabi_dmul+0x18c>
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d100      	bne.n	80008c4 <__aeabi_dmul+0xd4>
 80008c2:	e1f3      	b.n	8000cac <__aeabi_dmul+0x4bc>
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d000      	beq.n	80008ca <__aeabi_dmul+0xda>
 80008c8:	e118      	b.n	8000afc <__aeabi_dmul+0x30c>
 80008ca:	2200      	movs	r2, #0
 80008cc:	2400      	movs	r4, #0
 80008ce:	2500      	movs	r5, #0
 80008d0:	9b01      	ldr	r3, [sp, #4]
 80008d2:	0512      	lsls	r2, r2, #20
 80008d4:	4322      	orrs	r2, r4
 80008d6:	07db      	lsls	r3, r3, #31
 80008d8:	431a      	orrs	r2, r3
 80008da:	0028      	movs	r0, r5
 80008dc:	0011      	movs	r1, r2
 80008de:	b007      	add	sp, #28
 80008e0:	bcf0      	pop	{r4, r5, r6, r7}
 80008e2:	46bb      	mov	fp, r7
 80008e4:	46b2      	mov	sl, r6
 80008e6:	46a9      	mov	r9, r5
 80008e8:	46a0      	mov	r8, r4
 80008ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ec:	0025      	movs	r5, r4
 80008ee:	4305      	orrs	r5, r0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_dmul+0x104>
 80008f2:	e141      	b.n	8000b78 <__aeabi_dmul+0x388>
 80008f4:	2c00      	cmp	r4, #0
 80008f6:	d100      	bne.n	80008fa <__aeabi_dmul+0x10a>
 80008f8:	e1ad      	b.n	8000c56 <__aeabi_dmul+0x466>
 80008fa:	0020      	movs	r0, r4
 80008fc:	f000 fa9c 	bl	8000e38 <__clzsi2>
 8000900:	0001      	movs	r1, r0
 8000902:	0002      	movs	r2, r0
 8000904:	390b      	subs	r1, #11
 8000906:	231d      	movs	r3, #29
 8000908:	0010      	movs	r0, r2
 800090a:	1a5b      	subs	r3, r3, r1
 800090c:	0031      	movs	r1, r6
 800090e:	0035      	movs	r5, r6
 8000910:	3808      	subs	r0, #8
 8000912:	4084      	lsls	r4, r0
 8000914:	40d9      	lsrs	r1, r3
 8000916:	4085      	lsls	r5, r0
 8000918:	430c      	orrs	r4, r1
 800091a:	489e      	ldr	r0, [pc, #632]	; (8000b94 <__aeabi_dmul+0x3a4>)
 800091c:	1a83      	subs	r3, r0, r2
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	4699      	mov	r9, r3
 8000924:	469b      	mov	fp, r3
 8000926:	e786      	b.n	8000836 <__aeabi_dmul+0x46>
 8000928:	0005      	movs	r5, r0
 800092a:	4325      	orrs	r5, r4
 800092c:	d000      	beq.n	8000930 <__aeabi_dmul+0x140>
 800092e:	e11c      	b.n	8000b6a <__aeabi_dmul+0x37a>
 8000930:	2208      	movs	r2, #8
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	2302      	movs	r3, #2
 8000936:	2400      	movs	r4, #0
 8000938:	4691      	mov	r9, r2
 800093a:	469b      	mov	fp, r3
 800093c:	e77b      	b.n	8000836 <__aeabi_dmul+0x46>
 800093e:	4652      	mov	r2, sl
 8000940:	4332      	orrs	r2, r6
 8000942:	d100      	bne.n	8000946 <__aeabi_dmul+0x156>
 8000944:	e10a      	b.n	8000b5c <__aeabi_dmul+0x36c>
 8000946:	2e00      	cmp	r6, #0
 8000948:	d100      	bne.n	800094c <__aeabi_dmul+0x15c>
 800094a:	e176      	b.n	8000c3a <__aeabi_dmul+0x44a>
 800094c:	0030      	movs	r0, r6
 800094e:	f000 fa73 	bl	8000e38 <__clzsi2>
 8000952:	0002      	movs	r2, r0
 8000954:	3a0b      	subs	r2, #11
 8000956:	231d      	movs	r3, #29
 8000958:	0001      	movs	r1, r0
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	4652      	mov	r2, sl
 800095e:	3908      	subs	r1, #8
 8000960:	40da      	lsrs	r2, r3
 8000962:	408e      	lsls	r6, r1
 8000964:	4316      	orrs	r6, r2
 8000966:	4652      	mov	r2, sl
 8000968:	408a      	lsls	r2, r1
 800096a:	9b00      	ldr	r3, [sp, #0]
 800096c:	4989      	ldr	r1, [pc, #548]	; (8000b94 <__aeabi_dmul+0x3a4>)
 800096e:	1a18      	subs	r0, r3, r0
 8000970:	0003      	movs	r3, r0
 8000972:	468c      	mov	ip, r1
 8000974:	4463      	add	r3, ip
 8000976:	2000      	movs	r0, #0
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	e77a      	b.n	8000872 <__aeabi_dmul+0x82>
 800097c:	2400      	movs	r4, #0
 800097e:	2500      	movs	r5, #0
 8000980:	4a81      	ldr	r2, [pc, #516]	; (8000b88 <__aeabi_dmul+0x398>)
 8000982:	e7a5      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000984:	0c2f      	lsrs	r7, r5, #16
 8000986:	042d      	lsls	r5, r5, #16
 8000988:	0c2d      	lsrs	r5, r5, #16
 800098a:	002b      	movs	r3, r5
 800098c:	0c11      	lsrs	r1, r2, #16
 800098e:	0412      	lsls	r2, r2, #16
 8000990:	0c12      	lsrs	r2, r2, #16
 8000992:	4353      	muls	r3, r2
 8000994:	4698      	mov	r8, r3
 8000996:	0013      	movs	r3, r2
 8000998:	0028      	movs	r0, r5
 800099a:	437b      	muls	r3, r7
 800099c:	4699      	mov	r9, r3
 800099e:	4348      	muls	r0, r1
 80009a0:	4448      	add	r0, r9
 80009a2:	4683      	mov	fp, r0
 80009a4:	4640      	mov	r0, r8
 80009a6:	000b      	movs	r3, r1
 80009a8:	0c00      	lsrs	r0, r0, #16
 80009aa:	4682      	mov	sl, r0
 80009ac:	4658      	mov	r0, fp
 80009ae:	437b      	muls	r3, r7
 80009b0:	4450      	add	r0, sl
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	4581      	cmp	r9, r0
 80009b6:	d906      	bls.n	80009c6 <__aeabi_dmul+0x1d6>
 80009b8:	469a      	mov	sl, r3
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	025b      	lsls	r3, r3, #9
 80009be:	4699      	mov	r9, r3
 80009c0:	44ca      	add	sl, r9
 80009c2:	4653      	mov	r3, sl
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	0c03      	lsrs	r3, r0, #16
 80009c8:	469b      	mov	fp, r3
 80009ca:	4643      	mov	r3, r8
 80009cc:	041b      	lsls	r3, r3, #16
 80009ce:	0400      	lsls	r0, r0, #16
 80009d0:	0c1b      	lsrs	r3, r3, #16
 80009d2:	4698      	mov	r8, r3
 80009d4:	0003      	movs	r3, r0
 80009d6:	4443      	add	r3, r8
 80009d8:	9304      	str	r3, [sp, #16]
 80009da:	0c33      	lsrs	r3, r6, #16
 80009dc:	4699      	mov	r9, r3
 80009de:	002b      	movs	r3, r5
 80009e0:	0436      	lsls	r6, r6, #16
 80009e2:	0c36      	lsrs	r6, r6, #16
 80009e4:	4373      	muls	r3, r6
 80009e6:	4698      	mov	r8, r3
 80009e8:	0033      	movs	r3, r6
 80009ea:	437b      	muls	r3, r7
 80009ec:	469a      	mov	sl, r3
 80009ee:	464b      	mov	r3, r9
 80009f0:	435d      	muls	r5, r3
 80009f2:	435f      	muls	r7, r3
 80009f4:	4643      	mov	r3, r8
 80009f6:	4455      	add	r5, sl
 80009f8:	0c18      	lsrs	r0, r3, #16
 80009fa:	1940      	adds	r0, r0, r5
 80009fc:	4582      	cmp	sl, r0
 80009fe:	d903      	bls.n	8000a08 <__aeabi_dmul+0x218>
 8000a00:	2380      	movs	r3, #128	; 0x80
 8000a02:	025b      	lsls	r3, r3, #9
 8000a04:	469a      	mov	sl, r3
 8000a06:	4457      	add	r7, sl
 8000a08:	0c05      	lsrs	r5, r0, #16
 8000a0a:	19eb      	adds	r3, r5, r7
 8000a0c:	9305      	str	r3, [sp, #20]
 8000a0e:	4643      	mov	r3, r8
 8000a10:	041d      	lsls	r5, r3, #16
 8000a12:	0c2d      	lsrs	r5, r5, #16
 8000a14:	0400      	lsls	r0, r0, #16
 8000a16:	1940      	adds	r0, r0, r5
 8000a18:	0c25      	lsrs	r5, r4, #16
 8000a1a:	0424      	lsls	r4, r4, #16
 8000a1c:	0c24      	lsrs	r4, r4, #16
 8000a1e:	0027      	movs	r7, r4
 8000a20:	4357      	muls	r7, r2
 8000a22:	436a      	muls	r2, r5
 8000a24:	4690      	mov	r8, r2
 8000a26:	002a      	movs	r2, r5
 8000a28:	0c3b      	lsrs	r3, r7, #16
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	434a      	muls	r2, r1
 8000a2e:	4361      	muls	r1, r4
 8000a30:	4441      	add	r1, r8
 8000a32:	4451      	add	r1, sl
 8000a34:	4483      	add	fp, r0
 8000a36:	4588      	cmp	r8, r1
 8000a38:	d903      	bls.n	8000a42 <__aeabi_dmul+0x252>
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	025b      	lsls	r3, r3, #9
 8000a3e:	4698      	mov	r8, r3
 8000a40:	4442      	add	r2, r8
 8000a42:	043f      	lsls	r7, r7, #16
 8000a44:	0c0b      	lsrs	r3, r1, #16
 8000a46:	0c3f      	lsrs	r7, r7, #16
 8000a48:	0409      	lsls	r1, r1, #16
 8000a4a:	19c9      	adds	r1, r1, r7
 8000a4c:	0027      	movs	r7, r4
 8000a4e:	4698      	mov	r8, r3
 8000a50:	464b      	mov	r3, r9
 8000a52:	4377      	muls	r7, r6
 8000a54:	435c      	muls	r4, r3
 8000a56:	436e      	muls	r6, r5
 8000a58:	435d      	muls	r5, r3
 8000a5a:	0c3b      	lsrs	r3, r7, #16
 8000a5c:	4699      	mov	r9, r3
 8000a5e:	19a4      	adds	r4, r4, r6
 8000a60:	444c      	add	r4, r9
 8000a62:	4442      	add	r2, r8
 8000a64:	9503      	str	r5, [sp, #12]
 8000a66:	42a6      	cmp	r6, r4
 8000a68:	d904      	bls.n	8000a74 <__aeabi_dmul+0x284>
 8000a6a:	2380      	movs	r3, #128	; 0x80
 8000a6c:	025b      	lsls	r3, r3, #9
 8000a6e:	4698      	mov	r8, r3
 8000a70:	4445      	add	r5, r8
 8000a72:	9503      	str	r5, [sp, #12]
 8000a74:	9b02      	ldr	r3, [sp, #8]
 8000a76:	043f      	lsls	r7, r7, #16
 8000a78:	445b      	add	r3, fp
 8000a7a:	001e      	movs	r6, r3
 8000a7c:	4283      	cmp	r3, r0
 8000a7e:	4180      	sbcs	r0, r0
 8000a80:	0423      	lsls	r3, r4, #16
 8000a82:	4698      	mov	r8, r3
 8000a84:	9b05      	ldr	r3, [sp, #20]
 8000a86:	0c3f      	lsrs	r7, r7, #16
 8000a88:	4447      	add	r7, r8
 8000a8a:	4698      	mov	r8, r3
 8000a8c:	1876      	adds	r6, r6, r1
 8000a8e:	428e      	cmp	r6, r1
 8000a90:	4189      	sbcs	r1, r1
 8000a92:	4447      	add	r7, r8
 8000a94:	4240      	negs	r0, r0
 8000a96:	183d      	adds	r5, r7, r0
 8000a98:	46a8      	mov	r8, r5
 8000a9a:	4693      	mov	fp, r2
 8000a9c:	4249      	negs	r1, r1
 8000a9e:	468a      	mov	sl, r1
 8000aa0:	44c3      	add	fp, r8
 8000aa2:	429f      	cmp	r7, r3
 8000aa4:	41bf      	sbcs	r7, r7
 8000aa6:	4580      	cmp	r8, r0
 8000aa8:	4180      	sbcs	r0, r0
 8000aaa:	9b03      	ldr	r3, [sp, #12]
 8000aac:	44da      	add	sl, fp
 8000aae:	4698      	mov	r8, r3
 8000ab0:	4653      	mov	r3, sl
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	427f      	negs	r7, r7
 8000ab6:	4307      	orrs	r7, r0
 8000ab8:	0c24      	lsrs	r4, r4, #16
 8000aba:	4593      	cmp	fp, r2
 8000abc:	4192      	sbcs	r2, r2
 8000abe:	458a      	cmp	sl, r1
 8000ac0:	4189      	sbcs	r1, r1
 8000ac2:	193f      	adds	r7, r7, r4
 8000ac4:	0ddc      	lsrs	r4, r3, #23
 8000ac6:	9b04      	ldr	r3, [sp, #16]
 8000ac8:	0275      	lsls	r5, r6, #9
 8000aca:	431d      	orrs	r5, r3
 8000acc:	1e68      	subs	r0, r5, #1
 8000ace:	4185      	sbcs	r5, r0
 8000ad0:	4653      	mov	r3, sl
 8000ad2:	4252      	negs	r2, r2
 8000ad4:	4249      	negs	r1, r1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	18bf      	adds	r7, r7, r2
 8000ada:	4447      	add	r7, r8
 8000adc:	0df6      	lsrs	r6, r6, #23
 8000ade:	027f      	lsls	r7, r7, #9
 8000ae0:	4335      	orrs	r5, r6
 8000ae2:	025a      	lsls	r2, r3, #9
 8000ae4:	433c      	orrs	r4, r7
 8000ae6:	4315      	orrs	r5, r2
 8000ae8:	01fb      	lsls	r3, r7, #7
 8000aea:	d400      	bmi.n	8000aee <__aeabi_dmul+0x2fe>
 8000aec:	e0c1      	b.n	8000c72 <__aeabi_dmul+0x482>
 8000aee:	2101      	movs	r1, #1
 8000af0:	086a      	lsrs	r2, r5, #1
 8000af2:	400d      	ands	r5, r1
 8000af4:	4315      	orrs	r5, r2
 8000af6:	07e2      	lsls	r2, r4, #31
 8000af8:	4315      	orrs	r5, r2
 8000afa:	0864      	lsrs	r4, r4, #1
 8000afc:	4926      	ldr	r1, [pc, #152]	; (8000b98 <__aeabi_dmul+0x3a8>)
 8000afe:	4461      	add	r1, ip
 8000b00:	2900      	cmp	r1, #0
 8000b02:	dd56      	ble.n	8000bb2 <__aeabi_dmul+0x3c2>
 8000b04:	076b      	lsls	r3, r5, #29
 8000b06:	d009      	beq.n	8000b1c <__aeabi_dmul+0x32c>
 8000b08:	220f      	movs	r2, #15
 8000b0a:	402a      	ands	r2, r5
 8000b0c:	2a04      	cmp	r2, #4
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_dmul+0x32c>
 8000b10:	1d2a      	adds	r2, r5, #4
 8000b12:	42aa      	cmp	r2, r5
 8000b14:	41ad      	sbcs	r5, r5
 8000b16:	426d      	negs	r5, r5
 8000b18:	1964      	adds	r4, r4, r5
 8000b1a:	0015      	movs	r5, r2
 8000b1c:	01e3      	lsls	r3, r4, #7
 8000b1e:	d504      	bpl.n	8000b2a <__aeabi_dmul+0x33a>
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	4a1e      	ldr	r2, [pc, #120]	; (8000b9c <__aeabi_dmul+0x3ac>)
 8000b24:	00c9      	lsls	r1, r1, #3
 8000b26:	4014      	ands	r4, r2
 8000b28:	4461      	add	r1, ip
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <__aeabi_dmul+0x3b0>)
 8000b2c:	4291      	cmp	r1, r2
 8000b2e:	dd00      	ble.n	8000b32 <__aeabi_dmul+0x342>
 8000b30:	e724      	b.n	800097c <__aeabi_dmul+0x18c>
 8000b32:	0762      	lsls	r2, r4, #29
 8000b34:	08ed      	lsrs	r5, r5, #3
 8000b36:	0264      	lsls	r4, r4, #9
 8000b38:	0549      	lsls	r1, r1, #21
 8000b3a:	4315      	orrs	r5, r2
 8000b3c:	0b24      	lsrs	r4, r4, #12
 8000b3e:	0d4a      	lsrs	r2, r1, #21
 8000b40:	e6c6      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000b42:	9701      	str	r7, [sp, #4]
 8000b44:	e6b8      	b.n	80008b8 <__aeabi_dmul+0xc8>
 8000b46:	4a10      	ldr	r2, [pc, #64]	; (8000b88 <__aeabi_dmul+0x398>)
 8000b48:	2003      	movs	r0, #3
 8000b4a:	4694      	mov	ip, r2
 8000b4c:	4463      	add	r3, ip
 8000b4e:	464a      	mov	r2, r9
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4691      	mov	r9, r2
 8000b58:	4652      	mov	r2, sl
 8000b5a:	e68a      	b.n	8000872 <__aeabi_dmul+0x82>
 8000b5c:	4649      	mov	r1, r9
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4319      	orrs	r1, r3
 8000b62:	4689      	mov	r9, r1
 8000b64:	2600      	movs	r6, #0
 8000b66:	2001      	movs	r0, #1
 8000b68:	e683      	b.n	8000872 <__aeabi_dmul+0x82>
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	2303      	movs	r3, #3
 8000b70:	0005      	movs	r5, r0
 8000b72:	4691      	mov	r9, r2
 8000b74:	469b      	mov	fp, r3
 8000b76:	e65e      	b.n	8000836 <__aeabi_dmul+0x46>
 8000b78:	2304      	movs	r3, #4
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	9300      	str	r3, [sp, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	2400      	movs	r4, #0
 8000b84:	469b      	mov	fp, r3
 8000b86:	e656      	b.n	8000836 <__aeabi_dmul+0x46>
 8000b88:	000007ff 	.word	0x000007ff
 8000b8c:	fffffc01 	.word	0xfffffc01
 8000b90:	08003648 	.word	0x08003648
 8000b94:	fffffc0d 	.word	0xfffffc0d
 8000b98:	000003ff 	.word	0x000003ff
 8000b9c:	feffffff 	.word	0xfeffffff
 8000ba0:	000007fe 	.word	0x000007fe
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2480      	movs	r4, #128	; 0x80
 8000ba8:	2500      	movs	r5, #0
 8000baa:	4a44      	ldr	r2, [pc, #272]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000bac:	9301      	str	r3, [sp, #4]
 8000bae:	0324      	lsls	r4, r4, #12
 8000bb0:	e68e      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	1a40      	subs	r0, r0, r1
 8000bb6:	2838      	cmp	r0, #56	; 0x38
 8000bb8:	dd00      	ble.n	8000bbc <__aeabi_dmul+0x3cc>
 8000bba:	e686      	b.n	80008ca <__aeabi_dmul+0xda>
 8000bbc:	281f      	cmp	r0, #31
 8000bbe:	dd5b      	ble.n	8000c78 <__aeabi_dmul+0x488>
 8000bc0:	221f      	movs	r2, #31
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	1a51      	subs	r1, r2, r1
 8000bc8:	40cb      	lsrs	r3, r1
 8000bca:	0019      	movs	r1, r3
 8000bcc:	2820      	cmp	r0, #32
 8000bce:	d003      	beq.n	8000bd8 <__aeabi_dmul+0x3e8>
 8000bd0:	4a3b      	ldr	r2, [pc, #236]	; (8000cc0 <__aeabi_dmul+0x4d0>)
 8000bd2:	4462      	add	r2, ip
 8000bd4:	4094      	lsls	r4, r2
 8000bd6:	4325      	orrs	r5, r4
 8000bd8:	1e6a      	subs	r2, r5, #1
 8000bda:	4195      	sbcs	r5, r2
 8000bdc:	002a      	movs	r2, r5
 8000bde:	430a      	orrs	r2, r1
 8000be0:	2107      	movs	r1, #7
 8000be2:	000d      	movs	r5, r1
 8000be4:	2400      	movs	r4, #0
 8000be6:	4015      	ands	r5, r2
 8000be8:	4211      	tst	r1, r2
 8000bea:	d05b      	beq.n	8000ca4 <__aeabi_dmul+0x4b4>
 8000bec:	210f      	movs	r1, #15
 8000bee:	2400      	movs	r4, #0
 8000bf0:	4011      	ands	r1, r2
 8000bf2:	2904      	cmp	r1, #4
 8000bf4:	d053      	beq.n	8000c9e <__aeabi_dmul+0x4ae>
 8000bf6:	1d11      	adds	r1, r2, #4
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	4192      	sbcs	r2, r2
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	18a4      	adds	r4, r4, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	0223      	lsls	r3, r4, #8
 8000c04:	d54b      	bpl.n	8000c9e <__aeabi_dmul+0x4ae>
 8000c06:	2201      	movs	r2, #1
 8000c08:	2400      	movs	r4, #0
 8000c0a:	2500      	movs	r5, #0
 8000c0c:	e660      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c0e:	2380      	movs	r3, #128	; 0x80
 8000c10:	031b      	lsls	r3, r3, #12
 8000c12:	421c      	tst	r4, r3
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dmul+0x43a>
 8000c16:	421e      	tst	r6, r3
 8000c18:	d107      	bne.n	8000c2a <__aeabi_dmul+0x43a>
 8000c1a:	4333      	orrs	r3, r6
 8000c1c:	031c      	lsls	r4, r3, #12
 8000c1e:	4643      	mov	r3, r8
 8000c20:	0015      	movs	r5, r2
 8000c22:	0b24      	lsrs	r4, r4, #12
 8000c24:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000c26:	9301      	str	r3, [sp, #4]
 8000c28:	e652      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0312      	lsls	r2, r2, #12
 8000c2e:	4314      	orrs	r4, r2
 8000c30:	0324      	lsls	r4, r4, #12
 8000c32:	4a22      	ldr	r2, [pc, #136]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000c34:	0b24      	lsrs	r4, r4, #12
 8000c36:	9701      	str	r7, [sp, #4]
 8000c38:	e64a      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000c3a:	f000 f8fd 	bl	8000e38 <__clzsi2>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	001a      	movs	r2, r3
 8000c42:	3215      	adds	r2, #21
 8000c44:	3020      	adds	r0, #32
 8000c46:	2a1c      	cmp	r2, #28
 8000c48:	dc00      	bgt.n	8000c4c <__aeabi_dmul+0x45c>
 8000c4a:	e684      	b.n	8000956 <__aeabi_dmul+0x166>
 8000c4c:	4656      	mov	r6, sl
 8000c4e:	3b08      	subs	r3, #8
 8000c50:	2200      	movs	r2, #0
 8000c52:	409e      	lsls	r6, r3
 8000c54:	e689      	b.n	800096a <__aeabi_dmul+0x17a>
 8000c56:	f000 f8ef 	bl	8000e38 <__clzsi2>
 8000c5a:	0001      	movs	r1, r0
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	3115      	adds	r1, #21
 8000c60:	3220      	adds	r2, #32
 8000c62:	291c      	cmp	r1, #28
 8000c64:	dc00      	bgt.n	8000c68 <__aeabi_dmul+0x478>
 8000c66:	e64e      	b.n	8000906 <__aeabi_dmul+0x116>
 8000c68:	0034      	movs	r4, r6
 8000c6a:	3808      	subs	r0, #8
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	4084      	lsls	r4, r0
 8000c70:	e653      	b.n	800091a <__aeabi_dmul+0x12a>
 8000c72:	9b00      	ldr	r3, [sp, #0]
 8000c74:	469c      	mov	ip, r3
 8000c76:	e741      	b.n	8000afc <__aeabi_dmul+0x30c>
 8000c78:	4912      	ldr	r1, [pc, #72]	; (8000cc4 <__aeabi_dmul+0x4d4>)
 8000c7a:	0022      	movs	r2, r4
 8000c7c:	4461      	add	r1, ip
 8000c7e:	002e      	movs	r6, r5
 8000c80:	408d      	lsls	r5, r1
 8000c82:	408a      	lsls	r2, r1
 8000c84:	40c6      	lsrs	r6, r0
 8000c86:	1e69      	subs	r1, r5, #1
 8000c88:	418d      	sbcs	r5, r1
 8000c8a:	4332      	orrs	r2, r6
 8000c8c:	432a      	orrs	r2, r5
 8000c8e:	40c4      	lsrs	r4, r0
 8000c90:	0753      	lsls	r3, r2, #29
 8000c92:	d0b6      	beq.n	8000c02 <__aeabi_dmul+0x412>
 8000c94:	210f      	movs	r1, #15
 8000c96:	4011      	ands	r1, r2
 8000c98:	2904      	cmp	r1, #4
 8000c9a:	d1ac      	bne.n	8000bf6 <__aeabi_dmul+0x406>
 8000c9c:	e7b1      	b.n	8000c02 <__aeabi_dmul+0x412>
 8000c9e:	0765      	lsls	r5, r4, #29
 8000ca0:	0264      	lsls	r4, r4, #9
 8000ca2:	0b24      	lsrs	r4, r4, #12
 8000ca4:	08d2      	lsrs	r2, r2, #3
 8000ca6:	4315      	orrs	r5, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e611      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	0312      	lsls	r2, r2, #12
 8000cb0:	4314      	orrs	r4, r2
 8000cb2:	0324      	lsls	r4, r4, #12
 8000cb4:	4a01      	ldr	r2, [pc, #4]	; (8000cbc <__aeabi_dmul+0x4cc>)
 8000cb6:	0b24      	lsrs	r4, r4, #12
 8000cb8:	e60a      	b.n	80008d0 <__aeabi_dmul+0xe0>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	000007ff 	.word	0x000007ff
 8000cc0:	0000043e 	.word	0x0000043e
 8000cc4:	0000041e 	.word	0x0000041e

08000cc8 <__aeabi_i2d>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	2800      	cmp	r0, #0
 8000ccc:	d016      	beq.n	8000cfc <__aeabi_i2d+0x34>
 8000cce:	17c3      	asrs	r3, r0, #31
 8000cd0:	18c5      	adds	r5, r0, r3
 8000cd2:	405d      	eors	r5, r3
 8000cd4:	0fc4      	lsrs	r4, r0, #31
 8000cd6:	0028      	movs	r0, r5
 8000cd8:	f000 f8ae 	bl	8000e38 <__clzsi2>
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <__aeabi_i2d+0x5c>)
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	280a      	cmp	r0, #10
 8000ce2:	dc16      	bgt.n	8000d12 <__aeabi_i2d+0x4a>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	002e      	movs	r6, r5
 8000ce8:	3315      	adds	r3, #21
 8000cea:	409e      	lsls	r6, r3
 8000cec:	230b      	movs	r3, #11
 8000cee:	1a18      	subs	r0, r3, r0
 8000cf0:	40c5      	lsrs	r5, r0
 8000cf2:	0553      	lsls	r3, r2, #21
 8000cf4:	032d      	lsls	r5, r5, #12
 8000cf6:	0b2d      	lsrs	r5, r5, #12
 8000cf8:	0d5b      	lsrs	r3, r3, #21
 8000cfa:	e003      	b.n	8000d04 <__aeabi_i2d+0x3c>
 8000cfc:	2400      	movs	r4, #0
 8000cfe:	2300      	movs	r3, #0
 8000d00:	2500      	movs	r5, #0
 8000d02:	2600      	movs	r6, #0
 8000d04:	051b      	lsls	r3, r3, #20
 8000d06:	432b      	orrs	r3, r5
 8000d08:	07e4      	lsls	r4, r4, #31
 8000d0a:	4323      	orrs	r3, r4
 8000d0c:	0030      	movs	r0, r6
 8000d0e:	0019      	movs	r1, r3
 8000d10:	bd70      	pop	{r4, r5, r6, pc}
 8000d12:	380b      	subs	r0, #11
 8000d14:	4085      	lsls	r5, r0
 8000d16:	0553      	lsls	r3, r2, #21
 8000d18:	032d      	lsls	r5, r5, #12
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	0b2d      	lsrs	r5, r5, #12
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	e7f0      	b.n	8000d04 <__aeabi_i2d+0x3c>
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	0000041e 	.word	0x0000041e

08000d28 <__aeabi_d2f>:
 8000d28:	0002      	movs	r2, r0
 8000d2a:	004b      	lsls	r3, r1, #1
 8000d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2e:	0308      	lsls	r0, r1, #12
 8000d30:	0d5b      	lsrs	r3, r3, #21
 8000d32:	4e3d      	ldr	r6, [pc, #244]	; (8000e28 <__aeabi_d2f+0x100>)
 8000d34:	0fcc      	lsrs	r4, r1, #31
 8000d36:	0a40      	lsrs	r0, r0, #9
 8000d38:	0f51      	lsrs	r1, r2, #29
 8000d3a:	1c5f      	adds	r7, r3, #1
 8000d3c:	4308      	orrs	r0, r1
 8000d3e:	00d5      	lsls	r5, r2, #3
 8000d40:	4237      	tst	r7, r6
 8000d42:	d00a      	beq.n	8000d5a <__aeabi_d2f+0x32>
 8000d44:	4939      	ldr	r1, [pc, #228]	; (8000e2c <__aeabi_d2f+0x104>)
 8000d46:	185e      	adds	r6, r3, r1
 8000d48:	2efe      	cmp	r6, #254	; 0xfe
 8000d4a:	dd16      	ble.n	8000d7a <__aeabi_d2f+0x52>
 8000d4c:	23ff      	movs	r3, #255	; 0xff
 8000d4e:	2100      	movs	r1, #0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	430b      	orrs	r3, r1
 8000d54:	07e0      	lsls	r0, r4, #31
 8000d56:	4318      	orrs	r0, r3
 8000d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d106      	bne.n	8000d6c <__aeabi_d2f+0x44>
 8000d5e:	4328      	orrs	r0, r5
 8000d60:	d027      	beq.n	8000db2 <__aeabi_d2f+0x8a>
 8000d62:	2105      	movs	r1, #5
 8000d64:	0189      	lsls	r1, r1, #6
 8000d66:	0a49      	lsrs	r1, r1, #9
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	e7f1      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000d6c:	4305      	orrs	r5, r0
 8000d6e:	d0ed      	beq.n	8000d4c <__aeabi_d2f+0x24>
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	03c9      	lsls	r1, r1, #15
 8000d74:	23ff      	movs	r3, #255	; 0xff
 8000d76:	4301      	orrs	r1, r0
 8000d78:	e7ea      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000d7a:	2e00      	cmp	r6, #0
 8000d7c:	dd1c      	ble.n	8000db8 <__aeabi_d2f+0x90>
 8000d7e:	0192      	lsls	r2, r2, #6
 8000d80:	0011      	movs	r1, r2
 8000d82:	1e4a      	subs	r2, r1, #1
 8000d84:	4191      	sbcs	r1, r2
 8000d86:	00c0      	lsls	r0, r0, #3
 8000d88:	0f6d      	lsrs	r5, r5, #29
 8000d8a:	4301      	orrs	r1, r0
 8000d8c:	4329      	orrs	r1, r5
 8000d8e:	074b      	lsls	r3, r1, #29
 8000d90:	d048      	beq.n	8000e24 <__aeabi_d2f+0xfc>
 8000d92:	230f      	movs	r3, #15
 8000d94:	400b      	ands	r3, r1
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_d2f+0x74>
 8000d9a:	3104      	adds	r1, #4
 8000d9c:	2380      	movs	r3, #128	; 0x80
 8000d9e:	04db      	lsls	r3, r3, #19
 8000da0:	400b      	ands	r3, r1
 8000da2:	d03f      	beq.n	8000e24 <__aeabi_d2f+0xfc>
 8000da4:	1c72      	adds	r2, r6, #1
 8000da6:	2efe      	cmp	r6, #254	; 0xfe
 8000da8:	d0d0      	beq.n	8000d4c <__aeabi_d2f+0x24>
 8000daa:	0189      	lsls	r1, r1, #6
 8000dac:	0a49      	lsrs	r1, r1, #9
 8000dae:	b2d3      	uxtb	r3, r2
 8000db0:	e7ce      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000db2:	2300      	movs	r3, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	e7cb      	b.n	8000d50 <__aeabi_d2f+0x28>
 8000db8:	0032      	movs	r2, r6
 8000dba:	3217      	adds	r2, #23
 8000dbc:	db22      	blt.n	8000e04 <__aeabi_d2f+0xdc>
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	221e      	movs	r2, #30
 8000dc2:	0409      	lsls	r1, r1, #16
 8000dc4:	4308      	orrs	r0, r1
 8000dc6:	1b92      	subs	r2, r2, r6
 8000dc8:	2a1f      	cmp	r2, #31
 8000dca:	dd1d      	ble.n	8000e08 <__aeabi_d2f+0xe0>
 8000dcc:	2102      	movs	r1, #2
 8000dce:	4249      	negs	r1, r1
 8000dd0:	1b8e      	subs	r6, r1, r6
 8000dd2:	0001      	movs	r1, r0
 8000dd4:	40f1      	lsrs	r1, r6
 8000dd6:	000e      	movs	r6, r1
 8000dd8:	2a20      	cmp	r2, #32
 8000dda:	d004      	beq.n	8000de6 <__aeabi_d2f+0xbe>
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <__aeabi_d2f+0x108>)
 8000dde:	4694      	mov	ip, r2
 8000de0:	4463      	add	r3, ip
 8000de2:	4098      	lsls	r0, r3
 8000de4:	4305      	orrs	r5, r0
 8000de6:	0029      	movs	r1, r5
 8000de8:	1e4d      	subs	r5, r1, #1
 8000dea:	41a9      	sbcs	r1, r5
 8000dec:	4331      	orrs	r1, r6
 8000dee:	2600      	movs	r6, #0
 8000df0:	074b      	lsls	r3, r1, #29
 8000df2:	d1ce      	bne.n	8000d92 <__aeabi_d2f+0x6a>
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	000b      	movs	r3, r1
 8000df8:	04c0      	lsls	r0, r0, #19
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4003      	ands	r3, r0
 8000dfe:	4201      	tst	r1, r0
 8000e00:	d1d3      	bne.n	8000daa <__aeabi_d2f+0x82>
 8000e02:	e7af      	b.n	8000d64 <__aeabi_d2f+0x3c>
 8000e04:	2300      	movs	r3, #0
 8000e06:	e7ac      	b.n	8000d62 <__aeabi_d2f+0x3a>
 8000e08:	490a      	ldr	r1, [pc, #40]	; (8000e34 <__aeabi_d2f+0x10c>)
 8000e0a:	468c      	mov	ip, r1
 8000e0c:	0029      	movs	r1, r5
 8000e0e:	4463      	add	r3, ip
 8000e10:	40d1      	lsrs	r1, r2
 8000e12:	409d      	lsls	r5, r3
 8000e14:	000a      	movs	r2, r1
 8000e16:	0029      	movs	r1, r5
 8000e18:	4098      	lsls	r0, r3
 8000e1a:	1e4d      	subs	r5, r1, #1
 8000e1c:	41a9      	sbcs	r1, r5
 8000e1e:	4301      	orrs	r1, r0
 8000e20:	4311      	orrs	r1, r2
 8000e22:	e7e4      	b.n	8000dee <__aeabi_d2f+0xc6>
 8000e24:	0033      	movs	r3, r6
 8000e26:	e79d      	b.n	8000d64 <__aeabi_d2f+0x3c>
 8000e28:	000007fe 	.word	0x000007fe
 8000e2c:	fffffc80 	.word	0xfffffc80
 8000e30:	fffffca2 	.word	0xfffffca2
 8000e34:	fffffc82 	.word	0xfffffc82

08000e38 <__clzsi2>:
 8000e38:	211c      	movs	r1, #28
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	4298      	cmp	r0, r3
 8000e40:	d301      	bcc.n	8000e46 <__clzsi2+0xe>
 8000e42:	0c00      	lsrs	r0, r0, #16
 8000e44:	3910      	subs	r1, #16
 8000e46:	0a1b      	lsrs	r3, r3, #8
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	d301      	bcc.n	8000e50 <__clzsi2+0x18>
 8000e4c:	0a00      	lsrs	r0, r0, #8
 8000e4e:	3908      	subs	r1, #8
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	4298      	cmp	r0, r3
 8000e54:	d301      	bcc.n	8000e5a <__clzsi2+0x22>
 8000e56:	0900      	lsrs	r0, r0, #4
 8000e58:	3904      	subs	r1, #4
 8000e5a:	a202      	add	r2, pc, #8	; (adr r2, 8000e64 <__clzsi2+0x2c>)
 8000e5c:	5c10      	ldrb	r0, [r2, r0]
 8000e5e:	1840      	adds	r0, r0, r1
 8000e60:	4770      	bx	lr
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	02020304 	.word	0x02020304
 8000e68:	01010101 	.word	0x01010101
	...

08000e74 <data2bytes>:
 *	- instead of polling, once can use the RxFifoMsgPendingCallback interrupt that will get called
 *	  when a new message has entered the fifo (recommend setting up the filter properly for this)
 */


void data2bytes(void *val, uint8_t *bytes_array, uint8_t type, uint8_t is_float) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08e      	sub	sp, #56	; 0x38
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	0019      	movs	r1, r3
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	1dbb      	adds	r3, r7, #6
 8000e86:	1c0a      	adds	r2, r1, #0
 8000e88:	701a      	strb	r2, [r3, #0]

	switch (type)
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d040      	beq.n	8000f14 <data2bytes+0xa0>
 8000e92:	dc4d      	bgt.n	8000f30 <data2bytes+0xbc>
 8000e94:	2b04      	cmp	r3, #4
 8000e96:	d01f      	beq.n	8000ed8 <data2bytes+0x64>
 8000e98:	dc4a      	bgt.n	8000f30 <data2bytes+0xbc>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d002      	beq.n	8000ea4 <data2bytes+0x30>
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d00d      	beq.n	8000ebe <data2bytes+0x4a>
			// Assign bytes to input array
			memcpy(bytes_array, z.temp_array, type);
			break;

		default:
			break;
 8000ea2:	e045      	b.n	8000f30 <data2bytes+0xbc>
			u.val_variable = *(uint8_t*)val;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	2130      	movs	r1, #48	; 0x30
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	701a      	strb	r2, [r3, #0]
			memcpy(bytes_array, u.temp_array, type);
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781a      	ldrb	r2, [r3, #0]
 8000eb2:	1879      	adds	r1, r7, r1
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f002 fb78 	bl	80035ac <memcpy>
			break;
 8000ebc:	e039      	b.n	8000f32 <data2bytes+0xbe>
			v.val_variable = *(uint16_t*)val;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	881a      	ldrh	r2, [r3, #0]
 8000ec2:	2128      	movs	r1, #40	; 0x28
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	801a      	strh	r2, [r3, #0]
			memcpy(bytes_array, v.temp_array, type);
 8000ec8:	1dfb      	adds	r3, r7, #7
 8000eca:	781a      	ldrb	r2, [r3, #0]
 8000ecc:	1879      	adds	r1, r7, r1
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f002 fb6b 	bl	80035ac <memcpy>
			break;
 8000ed6:	e02c      	b.n	8000f32 <data2bytes+0xbe>
			if (is_float > 0) {
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d00c      	beq.n	8000efa <data2bytes+0x86>
				w.val_variable = *(float*)val;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2118      	movs	r1, #24
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	601a      	str	r2, [r3, #0]
				memcpy(bytes_array, w.temp_array, type);
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	781a      	ldrb	r2, [r3, #0]
 8000eee:	1879      	adds	r1, r7, r1
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fb5a 	bl	80035ac <memcpy>
			break;
 8000ef8:	e01b      	b.n	8000f32 <data2bytes+0xbe>
				y.val_variable = *(uint32_t*)val;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	2110      	movs	r1, #16
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	601a      	str	r2, [r3, #0]
				memcpy(bytes_array, y.temp_array, type);
 8000f04:	1dfb      	adds	r3, r7, #7
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	1879      	adds	r1, r7, r1
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f002 fb4d 	bl	80035ac <memcpy>
			break;
 8000f12:	e00e      	b.n	8000f32 <data2bytes+0xbe>
			z.val_variable = *(uint64_t*)val;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	623a      	str	r2, [r7, #32]
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
			memcpy(bytes_array, z.temp_array, type);
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	2320      	movs	r3, #32
 8000f24:	18f9      	adds	r1, r7, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f002 fb3f 	bl	80035ac <memcpy>
			break;
 8000f2e:	e000      	b.n	8000f32 <data2bytes+0xbe>
			break;
 8000f30:	46c0      	nop			; (mov r8, r8)

	}

}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b00e      	add	sp, #56	; 0x38
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <add_data>:

void add_data(void *val, uint8_t *bytes_array, uint8_t size, uint8_t is_float, uint8_t start_pos) {
 8000f3a:	b590      	push	{r4, r7, lr}
 8000f3c:	b089      	sub	sp, #36	; 0x24
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	60f8      	str	r0, [r7, #12]
 8000f42:	60b9      	str	r1, [r7, #8]
 8000f44:	0019      	movs	r1, r3
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	1dbb      	adds	r3, r7, #6
 8000f4c:	1c0a      	adds	r2, r1, #0
 8000f4e:	701a      	strb	r2, [r3, #0]

	uint8_t meme[8];
	//turning val into byte_array
	data2bytes(val, meme, size, is_float);
 8000f50:	1dbb      	adds	r3, r7, #6
 8000f52:	781c      	ldrb	r4, [r3, #0]
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	2314      	movs	r3, #20
 8000f5a:	18f9      	adds	r1, r7, r3
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	0023      	movs	r3, r4
 8000f60:	f7ff ff88 	bl	8000e74 <data2bytes>

	//adding val in LSB->MSB to data byte array
	for (uint8_t i = 0; i < size; i++) {
 8000f64:	231f      	movs	r3, #31
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
 8000f6c:	e017      	b.n	8000f9e <add_data+0x64>
		bytes_array[i + start_pos] = meme[size - i];
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	201f      	movs	r0, #31
 8000f74:	183b      	adds	r3, r7, r0
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	1ad2      	subs	r2, r2, r3
 8000f7a:	183b      	adds	r3, r7, r0
 8000f7c:	7819      	ldrb	r1, [r3, #0]
 8000f7e:	2330      	movs	r3, #48	; 0x30
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	18cb      	adds	r3, r1, r3
 8000f86:	0019      	movs	r1, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	185b      	adds	r3, r3, r1
 8000f8c:	2114      	movs	r1, #20
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	5c8a      	ldrb	r2, [r1, r2]
 8000f92:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < size; i++) {
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	183b      	adds	r3, r7, r0
 8000f9a:	3201      	adds	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	231f      	movs	r3, #31
 8000fa0:	18fa      	adds	r2, r7, r3
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3e0      	bcc.n	8000f6e <add_data+0x34>
	}

}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b009      	add	sp, #36	; 0x24
 8000fb4:	bd90      	pop	{r4, r7, pc}
	...

08000fb8 <init_timer>:
void add_data(void *val, uint8_t *bytes_array, uint8_t size, uint8_t is_float, uint8_t start_pos);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_timer(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <init_timer+0x50>)
 8000fbe:	69da      	ldr	r2, [r3, #28]
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <init_timer+0x50>)
 8000fc2:	2102      	movs	r1, #2
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	61da      	str	r2, [r3, #28]

	TIM3->ARR = 0xFFFF;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <init_timer+0x54>)
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <init_timer+0x58>)
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <init_timer+0x54>)
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <init_timer+0x54>)
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	31ff      	adds	r1, #255	; 0xff
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	619a      	str	r2, [r3, #24]
	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <init_timer+0x54>)
 8000fde:	6a1a      	ldr	r2, [r3, #32]
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <init_timer+0x54>)
 8000fe2:	2122      	movs	r1, #34	; 0x22
 8000fe4:	438a      	bics	r2, r1
 8000fe6:	621a      	str	r2, [r3, #32]
	TIM3->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <init_timer+0x54>)
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <init_timer+0x54>)
 8000fee:	2103      	movs	r1, #3
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	609a      	str	r2, [r3, #8]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	; (800100c <init_timer+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <init_timer+0x54>)
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	40021000 	.word	0x40021000
 800100c:	40000400 	.word	0x40000400
 8001010:	0000ffff 	.word	0x0000ffff

08001014 <compute_rpm>:

float compute_rpm(int n) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	return (2*M_PI*R*n)/(N*SAMPLING_PERIOD_S);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff fe53 	bl	8000cc8 <__aeabi_i2d>
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <compute_rpm+0x3c>)
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <compute_rpm+0x40>)
 8001026:	f7ff fbe3 	bl	80007f0 <__aeabi_dmul>
 800102a:	0002      	movs	r2, r0
 800102c:	000b      	movs	r3, r1
 800102e:	0010      	movs	r0, r2
 8001030:	0019      	movs	r1, r3
 8001032:	4a09      	ldr	r2, [pc, #36]	; (8001058 <compute_rpm+0x44>)
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <compute_rpm+0x48>)
 8001036:	f7ff f8f3 	bl	8000220 <__aeabi_ddiv>
 800103a:	0002      	movs	r2, r0
 800103c:	000b      	movs	r3, r1
 800103e:	0010      	movs	r0, r2
 8001040:	0019      	movs	r1, r3
 8001042:	f7ff fe71 	bl	8000d28 <__aeabi_d2f>
 8001046:	1c03      	adds	r3, r0, #0
}
 8001048:	1c18      	adds	r0, r3, #0
 800104a:	46bd      	mov	sp, r7
 800104c:	b002      	add	sp, #8
 800104e:	bd80      	pop	{r7, pc}
 8001050:	96943152 	.word	0x96943152
 8001054:	3fd6ebca 	.word	0x3fd6ebca
 8001058:	33333334 	.word	0x33333334
 800105c:	3ff33333 	.word	0x3ff33333

08001060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b085      	sub	sp, #20
 8001064:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	init_timer();
 8001066:	f7ff ffa7 	bl	8000fb8 <init_timer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f000 fb8f 	bl	800178c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f84f 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 f9a5 	bl	80013c0 <MX_GPIO_Init>
  MX_CAN_Init();
 8001076:	f000 f88b 	bl	8001190 <MX_CAN_Init>
  MX_TIM3_Init();
 800107a:	f000 f917 	bl	80012ac <MX_TIM3_Init>
  MX_TIM1_Init();
 800107e:	f000 f8bd 	bl	80011fc <MX_TIM1_Init>
  MX_TIM14_Init();
 8001082:	f000 f977 	bl	8001374 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan);
 8001086:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <main+0x94>)
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fd05 	bl	8001a98 <HAL_CAN_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <main+0x98>)
 8001090:	0018      	movs	r0, r3
 8001092:	f001 fdfb 	bl	8002c8c <HAL_TIM_Base_Start_IT>
  __HAL_TIM_SET_COUNTER(&htim14, 0);
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <main+0x98>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 800109e:	2064      	movs	r0, #100	; 0x64
 80010a0:	f000 fbd8 	bl	8001854 <HAL_Delay>
	  int count = TIM3->CNT;
 80010a4:	4b15      	ldr	r3, [pc, #84]	; (80010fc <main+0x9c>)
 80010a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a8:	607b      	str	r3, [r7, #4]
	  *velocity = compute_rpm(count);
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <main+0xa0>)
 80010ac:	681c      	ldr	r4, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f7ff ffaf 	bl	8001014 <compute_rpm>
 80010b6:	1c03      	adds	r3, r0, #0
 80010b8:	6023      	str	r3, [r4, #0]
	  add_data(velocity, bytes_array, 32, 1, 0);
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <main+0xa0>)
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	4911      	ldr	r1, [pc, #68]	; (8001104 <main+0xa4>)
 80010c0:	2300      	movs	r3, #0
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2220      	movs	r2, #32
 80010c8:	f7ff ff37 	bl	8000f3a <add_data>
	  HAL_CAN_AddTxMessage(&hcan, &TxHeader, bytes_array, &TxMailbox);  // load message to mailbox
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <main+0xa8>)
 80010ce:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <main+0xa4>)
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <main+0xac>)
 80010d2:	4808      	ldr	r0, [pc, #32]	; (80010f4 <main+0x94>)
 80010d4:	f000 fd26 	bl	8001b24 <HAL_CAN_AddTxMessage>
	  while (HAL_CAN_IsTxMessagePending(&hcan, TxMailbox)); 		//waiting till message gets through
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <main+0xa8>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <main+0x94>)
 80010e0:	0011      	movs	r1, r2
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 fdfc 	bl	8001ce0 <HAL_CAN_IsTxMessagePending>
 80010e8:	1e03      	subs	r3, r0, #0
 80010ea:	d1f6      	bne.n	80010da <main+0x7a>
	  TIM3->CNT=0;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <main+0x9c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
  {
 80010f2:	e7d4      	b.n	800109e <main+0x3e>
 80010f4:	2000002c 	.word	0x2000002c
 80010f8:	200000ec 	.word	0x200000ec
 80010fc:	40000400 	.word	0x40000400
 8001100:	200000a0 	.word	0x200000a0
 8001104:	2000009c 	.word	0x2000009c
 8001108:	20000028 	.word	0x20000028
 800110c:	20000134 	.word	0x20000134

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b093      	sub	sp, #76	; 0x4c
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	2414      	movs	r4, #20
 8001118:	193b      	adds	r3, r7, r4
 800111a:	0018      	movs	r0, r3
 800111c:	2334      	movs	r3, #52	; 0x34
 800111e:	001a      	movs	r2, r3
 8001120:	2100      	movs	r1, #0
 8001122:	f002 fa4c 	bl	80035be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	0018      	movs	r0, r3
 800112a:	2310      	movs	r3, #16
 800112c:	001a      	movs	r2, r3
 800112e:	2100      	movs	r1, #0
 8001130:	f002 fa45 	bl	80035be <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001134:	0021      	movs	r1, r4
 8001136:	187b      	adds	r3, r7, r1
 8001138:	2202      	movs	r2, #2
 800113a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113c:	187b      	adds	r3, r7, r1
 800113e:	2201      	movs	r2, #1
 8001140:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001142:	187b      	adds	r3, r7, r1
 8001144:	2210      	movs	r2, #16
 8001146:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001148:	187b      	adds	r3, r7, r1
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114e:	187b      	adds	r3, r7, r1
 8001150:	0018      	movs	r0, r3
 8001152:	f001 f86b 	bl	800222c <HAL_RCC_OscConfig>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800115a:	f000 f997 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2100      	movs	r1, #0
 800117a:	0018      	movs	r0, r3
 800117c:	f001 fbdc 	bl	8002938 <HAL_RCC_ClockConfig>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001184:	f000 f982 	bl	800148c <Error_Handler>
  }
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	b013      	add	sp, #76	; 0x4c
 800118e:	bd90      	pop	{r4, r7, pc}

08001190 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001194:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_CAN_Init+0x64>)
 8001196:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <MX_CAN_Init+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <MX_CAN_Init+0x64>)
 800119c:	2210      	movs	r2, #16
 800119e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_CAN_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_CAN_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_CAN_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_CAN_Init+0x64>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011b8:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_CAN_Init+0x64>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <MX_CAN_Init+0x64>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_CAN_Init+0x64>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <MX_CAN_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_CAN_Init+0x64>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <MX_CAN_Init+0x64>)
 80011d8:	2200      	movs	r2, #0
 80011da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <MX_CAN_Init+0x64>)
 80011de:	0018      	movs	r0, r3
 80011e0:	f000 fb5c 	bl	800189c <HAL_CAN_Init>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80011e8:	f000 f950 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	2000002c 	.word	0x2000002c
 80011f8:	40006400 	.word	0x40006400

080011fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001202:	2308      	movs	r3, #8
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	0018      	movs	r0, r3
 8001208:	2310      	movs	r3, #16
 800120a:	001a      	movs	r2, r3
 800120c:	2100      	movs	r1, #0
 800120e:	f002 f9d6 	bl	80035be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	003b      	movs	r3, r7
 8001214:	0018      	movs	r0, r3
 8001216:	2308      	movs	r3, #8
 8001218:	001a      	movs	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	f002 f9cf 	bl	80035be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001222:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <MX_TIM1_Init+0xa8>)
 8001224:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <MX_TIM1_Init+0xa4>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001234:	4a1c      	ldr	r2, [pc, #112]	; (80012a8 <MX_TIM1_Init+0xac>)
 8001236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <MX_TIM1_Init+0xa4>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001240:	2200      	movs	r2, #0
 8001242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM1_Init+0xa4>)
 800124c:	0018      	movs	r0, r3
 800124e:	f001 fccd 	bl	8002bec <HAL_TIM_Base_Init>
 8001252:	1e03      	subs	r3, r0, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001256:	f000 f919 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125a:	2108      	movs	r1, #8
 800125c:	187b      	adds	r3, r7, r1
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	0152      	lsls	r2, r2, #5
 8001262:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001264:	187a      	adds	r2, r7, r1
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001268:	0011      	movs	r1, r2
 800126a:	0018      	movs	r0, r3
 800126c:	f001 ff18 	bl	80030a0 <HAL_TIM_ConfigClockSource>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001274:	f000 f90a 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001278:	003b      	movs	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	003b      	movs	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001284:	003a      	movs	r2, r7
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_TIM1_Init+0xa4>)
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f002 f902 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8001290:	1e03      	subs	r3, r0, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001294:	f000 f8fa 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b006      	add	sp, #24
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000a4 	.word	0x200000a4
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	0000ffff 	.word	0x0000ffff

080012ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b08d      	sub	sp, #52	; 0x34
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b2:	240c      	movs	r4, #12
 80012b4:	193b      	adds	r3, r7, r4
 80012b6:	0018      	movs	r0, r3
 80012b8:	2324      	movs	r3, #36	; 0x24
 80012ba:	001a      	movs	r2, r3
 80012bc:	2100      	movs	r1, #0
 80012be:	f002 f97e 	bl	80035be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	0018      	movs	r0, r3
 80012c6:	2308      	movs	r3, #8
 80012c8:	001a      	movs	r2, r3
 80012ca:	2100      	movs	r1, #0
 80012cc:	f002 f977 	bl	80035be <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <MX_TIM3_Init+0xbc>)
 80012d2:	4a26      	ldr	r2, [pc, #152]	; (800136c <MX_TIM3_Init+0xc0>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MX_TIM3_Init+0xbc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_TIM3_Init+0xbc>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_TIM3_Init+0xbc>)
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <MX_TIM3_Init+0xc4>)
 80012e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM3_Init+0xbc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_TIM3_Init+0xbc>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012f4:	0021      	movs	r1, r4
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001302:	187b      	adds	r3, r7, r1
 8001304:	2201      	movs	r2, #1
 8001306:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001308:	187b      	adds	r3, r7, r1
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800130e:	187b      	adds	r3, r7, r1
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2201      	movs	r2, #1
 800131e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001326:	187b      	adds	r3, r7, r1
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800132c:	187a      	adds	r2, r7, r1
 800132e:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <MX_TIM3_Init+0xbc>)
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f001 fcf6 	bl	8002d24 <HAL_TIM_Encoder_Init>
 8001338:	1e03      	subs	r3, r0, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800133c:	f000 f8a6 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <MX_TIM3_Init+0xbc>)
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f002 f89e 	bl	8003494 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	1e03      	subs	r3, r0, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800135c:	f000 f896 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b00d      	add	sp, #52	; 0x34
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	20000054 	.word	0x20000054
 800136c:	40000400 	.word	0x40000400
 8001370:	0000ffff 	.word	0x0000ffff

08001374 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_TIM14_Init+0x40>)
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <MX_TIM14_Init+0x44>)
 800137c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10;
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <MX_TIM14_Init+0x40>)
 8001380:	220a      	movs	r2, #10
 8001382:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <MX_TIM14_Init+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <MX_TIM14_Init+0x40>)
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <MX_TIM14_Init+0x48>)
 800138e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <MX_TIM14_Init+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_TIM14_Init+0x40>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <MX_TIM14_Init+0x40>)
 800139e:	0018      	movs	r0, r3
 80013a0:	f001 fc24 	bl	8002bec <HAL_TIM_Base_Init>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80013a8:	f000 f870 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	200000ec 	.word	0x200000ec
 80013b8:	40002000 	.word	0x40002000
 80013bc:	0000ffff 	.word	0x0000ffff

080013c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	240c      	movs	r4, #12
 80013c8:	193b      	adds	r3, r7, r4
 80013ca:	0018      	movs	r0, r3
 80013cc:	2314      	movs	r3, #20
 80013ce:	001a      	movs	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	f002 f8f4 	bl	80035be <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_GPIO_Init+0xa4>)
 80013d8:	695a      	ldr	r2, [r3, #20]
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_GPIO_Init+0xa4>)
 80013dc:	2180      	movs	r1, #128	; 0x80
 80013de:	03c9      	lsls	r1, r1, #15
 80013e0:	430a      	orrs	r2, r1
 80013e2:	615a      	str	r2, [r3, #20]
 80013e4:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_GPIO_Init+0xa4>)
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	03db      	lsls	r3, r3, #15
 80013ec:	4013      	ands	r3, r2
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_GPIO_Init+0xa4>)
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_GPIO_Init+0xa4>)
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0289      	lsls	r1, r1, #10
 80013fc:	430a      	orrs	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_GPIO_Init+0xa4>)
 8001402:	695a      	ldr	r2, [r3, #20]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	029b      	lsls	r3, r3, #10
 8001408:	4013      	ands	r3, r2
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_GPIO_Init+0xa4>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_GPIO_Init+0xa4>)
 8001414:	2180      	movs	r1, #128	; 0x80
 8001416:	02c9      	lsls	r1, r1, #11
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_GPIO_Init+0xa4>)
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	02db      	lsls	r3, r3, #11
 8001424:	4013      	ands	r3, r2
 8001426:	603b      	str	r3, [r7, #0]
 8001428:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_GPIO_Port, DEBUG_Pin, GPIO_PIN_RESET);
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_GPIO_Init+0xa8>)
 800142c:	2200      	movs	r2, #0
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0018      	movs	r0, r3
 8001432:	f000 fec3 	bl	80021bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 8001436:	0021      	movs	r1, r4
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2201      	movs	r2, #1
 8001442:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	187b      	adds	r3, r7, r1
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2200      	movs	r2, #0
 800144e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8001450:	187b      	adds	r3, r7, r1
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <MX_GPIO_Init+0xa8>)
 8001454:	0019      	movs	r1, r3
 8001456:	0010      	movs	r0, r2
 8001458:	f000 fd48 	bl	8001eec <HAL_GPIO_Init>

}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b009      	add	sp, #36	; 0x24
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	48000400 	.word	0x48000400

0800146c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0018      	movs	r0, r3
 800147a:	f000 febc 	bl	80021f6 <HAL_GPIO_TogglePin>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b002      	add	sp, #8
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	48000400 	.word	0x48000400

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x44>)
 80014a0:	699a      	ldr	r2, [r3, #24]
 80014a2:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_MspInit+0x44>)
 80014a4:	2101      	movs	r1, #1
 80014a6:	430a      	orrs	r2, r1
 80014a8:	619a      	str	r2, [r3, #24]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x44>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x44>)
 80014b8:	69da      	ldr	r2, [r3, #28]
 80014ba:	4b08      	ldr	r3, [pc, #32]	; (80014dc <HAL_MspInit+0x44>)
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0549      	lsls	r1, r1, #21
 80014c0:	430a      	orrs	r2, r1
 80014c2:	61da      	str	r2, [r3, #28]
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <HAL_MspInit+0x44>)
 80014c6:	69da      	ldr	r2, [r3, #28]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	055b      	lsls	r3, r3, #21
 80014cc:	4013      	ands	r3, r2
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	46bd      	mov	sp, r7
 80014d6:	b002      	add	sp, #8
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014e0:	b590      	push	{r4, r7, lr}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	2414      	movs	r4, #20
 80014ea:	193b      	adds	r3, r7, r4
 80014ec:	0018      	movs	r0, r3
 80014ee:	2314      	movs	r3, #20
 80014f0:	001a      	movs	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	f002 f863 	bl	80035be <memset>
  if(hcan->Instance==CAN)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <HAL_CAN_MspInit+0x94>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d133      	bne.n	800156a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001502:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <HAL_CAN_MspInit+0x98>)
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_CAN_MspInit+0x98>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0489      	lsls	r1, r1, #18
 800150c:	430a      	orrs	r2, r1
 800150e:	61da      	str	r2, [r3, #28]
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <HAL_CAN_MspInit+0x98>)
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	049b      	lsls	r3, r3, #18
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
 800151c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_CAN_MspInit+0x98>)
 8001520:	695a      	ldr	r2, [r3, #20]
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_CAN_MspInit+0x98>)
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	0289      	lsls	r1, r1, #10
 8001528:	430a      	orrs	r2, r1
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_CAN_MspInit+0x98>)
 800152e:	695a      	ldr	r2, [r3, #20]
 8001530:	2380      	movs	r3, #128	; 0x80
 8001532:	029b      	lsls	r3, r3, #10
 8001534:	4013      	ands	r3, r2
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800153a:	193b      	adds	r3, r7, r4
 800153c:	22c0      	movs	r2, #192	; 0xc0
 800153e:	0152      	lsls	r2, r2, #5
 8001540:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	0021      	movs	r1, r4
 8001544:	187b      	adds	r3, r7, r1
 8001546:	2202      	movs	r2, #2
 8001548:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2203      	movs	r2, #3
 8001554:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2204      	movs	r2, #4
 800155a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	187a      	adds	r2, r7, r1
 800155e:	2390      	movs	r3, #144	; 0x90
 8001560:	05db      	lsls	r3, r3, #23
 8001562:	0011      	movs	r1, r2
 8001564:	0018      	movs	r0, r3
 8001566:	f000 fcc1 	bl	8001eec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	46bd      	mov	sp, r7
 800156e:	b00b      	add	sp, #44	; 0x2c
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	40006400 	.word	0x40006400
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a18      	ldr	r2, [pc, #96]	; (80015ec <HAL_TIM_Base_MspInit+0x70>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d10e      	bne.n	80015ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_TIM_Base_MspInit+0x74>)
 8001590:	699a      	ldr	r2, [r3, #24]
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_TIM_Base_MspInit+0x74>)
 8001594:	2180      	movs	r1, #128	; 0x80
 8001596:	0109      	lsls	r1, r1, #4
 8001598:	430a      	orrs	r2, r1
 800159a:	619a      	str	r2, [r3, #24]
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_TIM_Base_MspInit+0x74>)
 800159e:	699a      	ldr	r2, [r3, #24]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4013      	ands	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80015aa:	e01a      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM14)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <HAL_TIM_Base_MspInit+0x78>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d115      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_TIM_Base_MspInit+0x74>)
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_TIM_Base_MspInit+0x74>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0049      	lsls	r1, r1, #1
 80015c0:	430a      	orrs	r2, r1
 80015c2:	61da      	str	r2, [r3, #28]
 80015c4:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_TIM_Base_MspInit+0x74>)
 80015c6:	69da      	ldr	r2, [r3, #28]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2013      	movs	r0, #19
 80015d8:	f000 fc56 	bl	8001e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80015dc:	2013      	movs	r0, #19
 80015de:	f000 fc68 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	40012c00 	.word	0x40012c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40002000 	.word	0x40002000

080015f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	2414      	movs	r4, #20
 8001602:	193b      	adds	r3, r7, r4
 8001604:	0018      	movs	r0, r3
 8001606:	2314      	movs	r3, #20
 8001608:	001a      	movs	r2, r3
 800160a:	2100      	movs	r1, #0
 800160c:	f001 ffd7 	bl	80035be <memset>
  if(htim_encoder->Instance==TIM3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d138      	bne.n	800168c <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <HAL_TIM_Encoder_MspInit+0xa0>)
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001620:	2102      	movs	r1, #2
 8001622:	430a      	orrs	r2, r1
 8001624:	61da      	str	r2, [r3, #28]
 8001626:	4b1c      	ldr	r3, [pc, #112]	; (8001698 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	2202      	movs	r2, #2
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001634:	695a      	ldr	r2, [r3, #20]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001638:	2180      	movs	r1, #128	; 0x80
 800163a:	0289      	lsls	r1, r1, #10
 800163c:	430a      	orrs	r2, r1
 800163e:	615a      	str	r2, [r3, #20]
 8001640:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800164e:	0021      	movs	r1, r4
 8001650:	187b      	adds	r3, r7, r1
 8001652:	22c0      	movs	r2, #192	; 0xc0
 8001654:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	187b      	adds	r3, r7, r1
 8001658:	2202      	movs	r2, #2
 800165a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	187b      	adds	r3, r7, r1
 800165e:	2200      	movs	r2, #0
 8001660:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	187b      	adds	r3, r7, r1
 8001664:	2200      	movs	r2, #0
 8001666:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001668:	187b      	adds	r3, r7, r1
 800166a:	2201      	movs	r2, #1
 800166c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	187a      	adds	r2, r7, r1
 8001670:	2390      	movs	r3, #144	; 0x90
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	0011      	movs	r1, r2
 8001676:	0018      	movs	r0, r3
 8001678:	f000 fc38 	bl	8001eec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2010      	movs	r0, #16
 8001682:	f000 fc01 	bl	8001e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001686:	2010      	movs	r0, #16
 8001688:	f000 fc13 	bl	8001eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800168c:	46c0      	nop			; (mov r8, r8)
 800168e:	46bd      	mov	sp, r7
 8001690:	b00b      	add	sp, #44	; 0x2c
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	40000400 	.word	0x40000400
 8001698:	40021000 	.word	0x40021000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <NMI_Handler+0x4>

080016a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a6:	e7fe      	b.n	80016a6 <HardFault_Handler+0x4>

080016a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016ac:	46c0      	nop			; (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 f8ac 	bl	800181c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <TIM3_IRQHandler+0x14>)
 80016d2:	0018      	movs	r0, r3
 80016d4:	f001 fbce 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	20000054 	.word	0x20000054

080016e4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80016e8:	4b03      	ldr	r3, [pc, #12]	; (80016f8 <TIM14_IRQHandler+0x14>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f001 fbc2 	bl	8002e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80016f0:	46c0      	nop			; (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	200000ec 	.word	0x200000ec

080016fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001708:	4813      	ldr	r0, [pc, #76]	; (8001758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800170a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <LoopForever+0x6>)
    LDR R1, [R0]
 800170e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001710:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001712:	4a13      	ldr	r2, [pc, #76]	; (8001760 <LoopForever+0xa>)
    CMP R1, R2
 8001714:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001716:	d105      	bne.n	8001724 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001718:	4812      	ldr	r0, [pc, #72]	; (8001764 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800171a:	4913      	ldr	r1, [pc, #76]	; (8001768 <LoopForever+0x12>)
    STR R1, [R0]
 800171c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800171e:	4813      	ldr	r0, [pc, #76]	; (800176c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001720:	4913      	ldr	r1, [pc, #76]	; (8001770 <LoopForever+0x1a>)
    STR R1, [R0]
 8001722:	6001      	str	r1, [r0, #0]

08001724 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001726:	4914      	ldr	r1, [pc, #80]	; (8001778 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001728:	4a14      	ldr	r2, [pc, #80]	; (800177c <LoopForever+0x26>)
  movs r3, #0
 800172a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800172c:	e002      	b.n	8001734 <LoopCopyDataInit>

0800172e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001732:	3304      	adds	r3, #4

08001734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001738:	d3f9      	bcc.n	800172e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173a:	4a11      	ldr	r2, [pc, #68]	; (8001780 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800173c:	4c11      	ldr	r4, [pc, #68]	; (8001784 <LoopForever+0x2e>)
  movs r3, #0
 800173e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001740:	e001      	b.n	8001746 <LoopFillZerobss>

08001742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001744:	3204      	adds	r2, #4

08001746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001748:	d3fb      	bcc.n	8001742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800174a:	f7ff ffd7 	bl	80016fc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800174e:	f001 ff09 	bl	8003564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001752:	f7ff fc85 	bl	8001060 <main>

08001756 <LoopForever>:

LoopForever:
    b LoopForever
 8001756:	e7fe      	b.n	8001756 <LoopForever>
  ldr   r0, =_estack
 8001758:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800175c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001760:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001764:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001768:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800176c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001770:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800177c:	080036a0 	.word	0x080036a0
  ldr r2, =_sbss
 8001780:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001784:	20000150 	.word	0x20000150

08001788 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_IRQHandler>
	...

0800178c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <HAL_Init+0x24>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_Init+0x24>)
 8001796:	2110      	movs	r1, #16
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800179c:	2000      	movs	r0, #0
 800179e:	f000 f809 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a2:	f7ff fe79 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	0018      	movs	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	40022000 	.word	0x40022000

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_InitTick+0x5c>)
 80017be:	681c      	ldr	r4, [r3, #0]
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <HAL_InitTick+0x60>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	0019      	movs	r1, r3
 80017c6:	23fa      	movs	r3, #250	; 0xfa
 80017c8:	0098      	lsls	r0, r3, #2
 80017ca:	f7fe fc9d 	bl	8000108 <__udivsi3>
 80017ce:	0003      	movs	r3, r0
 80017d0:	0019      	movs	r1, r3
 80017d2:	0020      	movs	r0, r4
 80017d4:	f7fe fc98 	bl	8000108 <__udivsi3>
 80017d8:	0003      	movs	r3, r0
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 fb79 	bl	8001ed2 <HAL_SYSTICK_Config>
 80017e0:	1e03      	subs	r3, r0, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e00f      	b.n	8001808 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d80b      	bhi.n	8001806 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	2301      	movs	r3, #1
 80017f2:	425b      	negs	r3, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 fb46 	bl	8001e88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_InitTick+0x64>)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
 8001804:	e000      	b.n	8001808 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b003      	add	sp, #12
 800180e:	bd90      	pop	{r4, r7, pc}
 8001810:	20000000 	.word	0x20000000
 8001814:	20000008 	.word	0x20000008
 8001818:	20000004 	.word	0x20000004

0800181c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_IncTick+0x1c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	001a      	movs	r2, r3
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_IncTick+0x20>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	18d2      	adds	r2, r2, r3
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <HAL_IncTick+0x20>)
 800182e:	601a      	str	r2, [r3, #0]
}
 8001830:	46c0      	nop			; (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	20000008 	.word	0x20000008
 800183c:	2000014c 	.word	0x2000014c

08001840 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <HAL_GetTick+0x10>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	2000014c 	.word	0x2000014c

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fff0 	bl	8001840 <HAL_GetTick>
 8001860:	0003      	movs	r3, r0
 8001862:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	001a      	movs	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	189b      	adds	r3, r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	f7ff ffe0 	bl	8001840 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	20000008 	.word	0x20000008

0800189c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e0f0      	b.n	8001a90 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2220      	movs	r2, #32
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d103      	bne.n	80018c2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fe0f 	bl	80014e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2102      	movs	r1, #2
 80018ce:	438a      	bics	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d2:	f7ff ffb5 	bl	8001840 <HAL_GetTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018da:	e013      	b.n	8001904 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018dc:	f7ff ffb0 	bl	8001840 <HAL_GetTick>
 80018e0:	0002      	movs	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b0a      	cmp	r3, #10
 80018e8:	d90c      	bls.n	8001904 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ee:	2280      	movs	r2, #128	; 0x80
 80018f0:	0292      	lsls	r2, r2, #10
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	2105      	movs	r1, #5
 80018fe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0c5      	b.n	8001a90 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	d1e5      	bne.n	80018dc <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2101      	movs	r1, #1
 800191c:	430a      	orrs	r2, r1
 800191e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001920:	f7ff ff8e 	bl	8001840 <HAL_GetTick>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001928:	e013      	b.n	8001952 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800192a:	f7ff ff89 	bl	8001840 <HAL_GetTick>
 800192e:	0002      	movs	r2, r0
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b0a      	cmp	r3, #10
 8001936:	d90c      	bls.n	8001952 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	2280      	movs	r2, #128	; 0x80
 800193e:	0292      	lsls	r2, r2, #10
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2220      	movs	r2, #32
 800194a:	2105      	movs	r1, #5
 800194c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e09e      	b.n	8001a90 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	4013      	ands	r3, r2
 800195c:	d0e5      	beq.n	800192a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	7e1b      	ldrb	r3, [r3, #24]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d108      	bne.n	8001978 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e007      	b.n	8001988 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	438a      	bics	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	7e5b      	ldrb	r3, [r3, #25]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2140      	movs	r1, #64	; 0x40
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	e007      	b.n	80019b2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2140      	movs	r1, #64	; 0x40
 80019ae:	438a      	bics	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7e9b      	ldrb	r3, [r3, #26]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d108      	bne.n	80019cc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2120      	movs	r1, #32
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e007      	b.n	80019dc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2120      	movs	r1, #32
 80019d8:	438a      	bics	r2, r1
 80019da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	7edb      	ldrb	r3, [r3, #27]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d108      	bne.n	80019f6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2110      	movs	r1, #16
 80019f0:	438a      	bics	r2, r1
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	e007      	b.n	8001a06 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2110      	movs	r1, #16
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	7f1b      	ldrb	r3, [r3, #28]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d108      	bne.n	8001a20 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2108      	movs	r1, #8
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e007      	b.n	8001a30 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2108      	movs	r1, #8
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7f5b      	ldrb	r3, [r3, #29]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d108      	bne.n	8001a4a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2104      	movs	r1, #4
 8001a44:	430a      	orrs	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	e007      	b.n	8001a5a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2104      	movs	r1, #4
 8001a56:	438a      	bics	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	0011      	movs	r1, r2
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	5c9b      	ldrb	r3, [r3, r2]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d12f      	bne.n	8001b0c <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	438a      	bics	r2, r1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001ac4:	f7ff febc 	bl	8001840 <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001acc:	e013      	b.n	8001af6 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ace:	f7ff feb7 	bl	8001840 <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d90c      	bls.n	8001af6 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	0292      	lsls	r2, r2, #10
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2220      	movs	r2, #32
 8001aee:	2105      	movs	r1, #5
 8001af0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e012      	b.n	8001b1c <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	4013      	ands	r3, r2
 8001b00:	d1e5      	bne.n	8001ace <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e007      	b.n	8001b1c <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	2280      	movs	r2, #128	; 0x80
 8001b12:	0312      	lsls	r2, r2, #12
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b004      	add	sp, #16
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b32:	201f      	movs	r0, #31
 8001b34:	183b      	adds	r3, r7, r0
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	2120      	movs	r1, #32
 8001b3a:	5c52      	ldrb	r2, [r2, r1]
 8001b3c:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d004      	beq.n	8001b58 <HAL_CAN_AddTxMessage+0x34>
 8001b4e:	183b      	adds	r3, r7, r0
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d000      	beq.n	8001b58 <HAL_CAN_AddTxMessage+0x34>
 8001b56:	e0b7      	b.n	8001cc8 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	2380      	movs	r3, #128	; 0x80
 8001b5c:	04db      	lsls	r3, r3, #19
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d10a      	bne.n	8001b78 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	2380      	movs	r3, #128	; 0x80
 8001b66:	051b      	lsls	r3, r3, #20
 8001b68:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001b6a:	d105      	bne.n	8001b78 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	055b      	lsls	r3, r3, #21
 8001b72:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001b74:	d100      	bne.n	8001b78 <HAL_CAN_AddTxMessage+0x54>
 8001b76:	e09e      	b.n	8001cb6 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	0e1b      	lsrs	r3, r3, #24
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4013      	ands	r3, r2
 8001b80:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d908      	bls.n	8001b9a <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	2280      	movs	r2, #128	; 0x80
 8001b8e:	0412      	lsls	r2, r2, #16
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e09e      	b.n	8001cd8 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4311      	orrs	r1, r2
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	3218      	adds	r2, #24
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	50d1      	str	r1, [r2, r3]
 8001bc4:	e00f      	b.n	8001be6 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8001bdc:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	3218      	adds	r2, #24
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3318      	adds	r3, #24
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	18cb      	adds	r3, r1, r3
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	7d1b      	ldrb	r3, [r3, #20]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d112      	bne.n	8001c28 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	3318      	adds	r3, #24
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	18d3      	adds	r3, r2, r3
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3318      	adds	r3, #24
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	18cb      	adds	r3, r1, r3
 8001c24:	3304      	adds	r3, #4
 8001c26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3307      	adds	r3, #7
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	061a      	lsls	r2, r3, #24
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3306      	adds	r3, #6
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	041b      	lsls	r3, r3, #16
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3305      	adds	r3, #5
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	021b      	lsls	r3, r3, #8
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3304      	adds	r3, #4
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	6979      	ldr	r1, [r7, #20]
 8001c54:	23c6      	movs	r3, #198	; 0xc6
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	0109      	lsls	r1, r1, #4
 8001c5a:	1841      	adds	r1, r0, r1
 8001c5c:	18cb      	adds	r3, r1, r3
 8001c5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3303      	adds	r3, #3
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	061a      	lsls	r2, r3, #24
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	041b      	lsls	r3, r3, #16
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3301      	adds	r3, #1
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	0019      	movs	r1, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6818      	ldr	r0, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	6979      	ldr	r1, [r7, #20]
 8001c8a:	23c4      	movs	r3, #196	; 0xc4
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	0109      	lsls	r1, r1, #4
 8001c90:	1841      	adds	r1, r0, r1
 8001c92:	18cb      	adds	r3, r1, r3
 8001c94:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	3218      	adds	r2, #24
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	58d2      	ldr	r2, [r2, r3]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	3218      	adds	r2, #24
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	e010      	b.n	8001cd8 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	2280      	movs	r2, #128	; 0x80
 8001cbc:	0392      	lsls	r2, r2, #14
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e007      	b.n	8001cd8 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	02d2      	lsls	r2, r2, #11
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
  }
}
 8001cd8:	0018      	movs	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b008      	add	sp, #32
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cee:	200b      	movs	r0, #11
 8001cf0:	183b      	adds	r3, r7, r0
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	2120      	movs	r1, #32
 8001cf6:	5c52      	ldrb	r2, [r2, r1]
 8001cf8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	18bb      	adds	r3, r7, r2
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d003      	beq.n	8001d0c <HAL_CAN_IsTxMessagePending+0x2c>
 8001d04:	18bb      	adds	r3, r7, r2
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d10b      	bne.n	8001d24 <HAL_CAN_IsTxMessagePending+0x44>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	0692      	lsls	r2, r2, #26
 8001d16:	401a      	ands	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	069b      	lsls	r3, r3, #26
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d001      	beq.n	8001d24 <HAL_CAN_IsTxMessagePending+0x44>
    {
      status = 1U;
 8001d20:	2301      	movs	r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	0002      	movs	r2, r0
 8001d38:	1dfb      	adds	r3, r7, #7
 8001d3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b7f      	cmp	r3, #127	; 0x7f
 8001d42:	d809      	bhi.n	8001d58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d44:	1dfb      	adds	r3, r7, #7
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	001a      	movs	r2, r3
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	4b04      	ldr	r3, [pc, #16]	; (8001d60 <__NVIC_EnableIRQ+0x30>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	4091      	lsls	r1, r2
 8001d54:	000a      	movs	r2, r1
 8001d56:	601a      	str	r2, [r3, #0]
  }
}
 8001d58:	46c0      	nop			; (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	e000e100 	.word	0xe000e100

08001d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d64:	b590      	push	{r4, r7, lr}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	6039      	str	r1, [r7, #0]
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	1dfb      	adds	r3, r7, #7
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b7f      	cmp	r3, #127	; 0x7f
 8001d78:	d828      	bhi.n	8001dcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <__NVIC_SetPriority+0xd4>)
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	33c0      	adds	r3, #192	; 0xc0
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	589b      	ldr	r3, [r3, r2]
 8001d8a:	1dfa      	adds	r2, r7, #7
 8001d8c:	7812      	ldrb	r2, [r2, #0]
 8001d8e:	0011      	movs	r1, r2
 8001d90:	2203      	movs	r2, #3
 8001d92:	400a      	ands	r2, r1
 8001d94:	00d2      	lsls	r2, r2, #3
 8001d96:	21ff      	movs	r1, #255	; 0xff
 8001d98:	4091      	lsls	r1, r2
 8001d9a:	000a      	movs	r2, r1
 8001d9c:	43d2      	mvns	r2, r2
 8001d9e:	401a      	ands	r2, r3
 8001da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	019b      	lsls	r3, r3, #6
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	401a      	ands	r2, r3
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	0018      	movs	r0, r3
 8001db0:	2303      	movs	r3, #3
 8001db2:	4003      	ands	r3, r0
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db8:	481f      	ldr	r0, [pc, #124]	; (8001e38 <__NVIC_SetPriority+0xd4>)
 8001dba:	1dfb      	adds	r3, r7, #7
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b25b      	sxtb	r3, r3
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	33c0      	adds	r3, #192	; 0xc0
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dca:	e031      	b.n	8001e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <__NVIC_SetPriority+0xd8>)
 8001dce:	1dfb      	adds	r3, r7, #7
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	0019      	movs	r1, r3
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	3b08      	subs	r3, #8
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3306      	adds	r3, #6
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	18d3      	adds	r3, r2, r3
 8001de2:	3304      	adds	r3, #4
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	1dfa      	adds	r2, r7, #7
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	0011      	movs	r1, r2
 8001dec:	2203      	movs	r2, #3
 8001dee:	400a      	ands	r2, r1
 8001df0:	00d2      	lsls	r2, r2, #3
 8001df2:	21ff      	movs	r1, #255	; 0xff
 8001df4:	4091      	lsls	r1, r2
 8001df6:	000a      	movs	r2, r1
 8001df8:	43d2      	mvns	r2, r2
 8001dfa:	401a      	ands	r2, r3
 8001dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	22ff      	movs	r2, #255	; 0xff
 8001e04:	401a      	ands	r2, r3
 8001e06:	1dfb      	adds	r3, r7, #7
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	4003      	ands	r3, r0
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e14:	4809      	ldr	r0, [pc, #36]	; (8001e3c <__NVIC_SetPriority+0xd8>)
 8001e16:	1dfb      	adds	r3, r7, #7
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	001c      	movs	r4, r3
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	4023      	ands	r3, r4
 8001e20:	3b08      	subs	r3, #8
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	430a      	orrs	r2, r1
 8001e26:	3306      	adds	r3, #6
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	18c3      	adds	r3, r0, r3
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	601a      	str	r2, [r3, #0]
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b003      	add	sp, #12
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	e000e100 	.word	0xe000e100
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	045b      	lsls	r3, r3, #17
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d301      	bcc.n	8001e58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e54:	2301      	movs	r3, #1
 8001e56:	e010      	b.n	8001e7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e58:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <SysTick_Config+0x44>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e60:	2301      	movs	r3, #1
 8001e62:	425b      	negs	r3, r3
 8001e64:	2103      	movs	r1, #3
 8001e66:	0018      	movs	r0, r3
 8001e68:	f7ff ff7c 	bl	8001d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <SysTick_Config+0x44>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e72:	4b04      	ldr	r3, [pc, #16]	; (8001e84 <SysTick_Config+0x44>)
 8001e74:	2207      	movs	r2, #7
 8001e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	b002      	add	sp, #8
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	e000e010 	.word	0xe000e010

08001e88 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	210f      	movs	r1, #15
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	1c02      	adds	r2, r0, #0
 8001e98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b25b      	sxtb	r3, r3
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff ff5d 	bl	8001d64 <__NVIC_SetPriority>
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	0002      	movs	r2, r0
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff33 	bl	8001d30 <__NVIC_EnableIRQ>
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ffaf 	bl	8001e40 <SysTick_Config>
 8001ee2:	0003      	movs	r3, r0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b002      	add	sp, #8
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001efa:	e149      	b.n	8002190 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	4091      	lsls	r1, r2
 8001f06:	000a      	movs	r2, r1
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d100      	bne.n	8001f14 <HAL_GPIO_Init+0x28>
 8001f12:	e13a      	b.n	800218a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d00b      	beq.n	8001f34 <HAL_GPIO_Init+0x48>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d007      	beq.n	8001f34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f28:	2b11      	cmp	r3, #17
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b12      	cmp	r3, #18
 8001f32:	d130      	bne.n	8001f96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	2203      	movs	r2, #3
 8001f40:	409a      	lsls	r2, r3
 8001f42:	0013      	movs	r3, r2
 8001f44:	43da      	mvns	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	409a      	lsls	r2, r3
 8001f56:	0013      	movs	r3, r2
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	0013      	movs	r3, r2
 8001f72:	43da      	mvns	r2, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	2201      	movs	r2, #1
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
 8001f88:	0013      	movs	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	0013      	movs	r3, r2
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	0013      	movs	r3, r2
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d003      	beq.n	8001fd6 <HAL_GPIO_Init+0xea>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d123      	bne.n	800201e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	58d3      	ldr	r3, [r2, r3]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	0013      	movs	r3, r2
 8001ff2:	43da      	mvns	r2, r3
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2107      	movs	r1, #7
 8002002:	400b      	ands	r3, r1
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	409a      	lsls	r2, r3
 8002008:	0013      	movs	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	6939      	ldr	r1, [r7, #16]
 800201c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	409a      	lsls	r2, r3
 800202c:	0013      	movs	r3, r2
 800202e:	43da      	mvns	r2, r3
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4013      	ands	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2203      	movs	r2, #3
 800203c:	401a      	ands	r2, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	409a      	lsls	r2, r3
 8002044:	0013      	movs	r3, r2
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	055b      	lsls	r3, r3, #21
 800205a:	4013      	ands	r3, r2
 800205c:	d100      	bne.n	8002060 <HAL_GPIO_Init+0x174>
 800205e:	e094      	b.n	800218a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002060:	4b51      	ldr	r3, [pc, #324]	; (80021a8 <HAL_GPIO_Init+0x2bc>)
 8002062:	699a      	ldr	r2, [r3, #24]
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_GPIO_Init+0x2bc>)
 8002066:	2101      	movs	r1, #1
 8002068:	430a      	orrs	r2, r1
 800206a:	619a      	str	r2, [r3, #24]
 800206c:	4b4e      	ldr	r3, [pc, #312]	; (80021a8 <HAL_GPIO_Init+0x2bc>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2201      	movs	r2, #1
 8002072:	4013      	ands	r3, r2
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002078:	4a4c      	ldr	r2, [pc, #304]	; (80021ac <HAL_GPIO_Init+0x2c0>)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	3302      	adds	r3, #2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	589b      	ldr	r3, [r3, r2]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2203      	movs	r2, #3
 800208a:	4013      	ands	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	220f      	movs	r2, #15
 8002090:	409a      	lsls	r2, r3
 8002092:	0013      	movs	r3, r2
 8002094:	43da      	mvns	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	2390      	movs	r3, #144	; 0x90
 80020a0:	05db      	lsls	r3, r3, #23
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x1d6>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a41      	ldr	r2, [pc, #260]	; (80021b0 <HAL_GPIO_Init+0x2c4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x1d2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <HAL_GPIO_Init+0x2c8>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x1ce>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e004      	b.n	80020c4 <HAL_GPIO_Init+0x1d8>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e002      	b.n	80020c4 <HAL_GPIO_Init+0x1d8>
 80020be:	2301      	movs	r3, #1
 80020c0:	e000      	b.n	80020c4 <HAL_GPIO_Init+0x1d8>
 80020c2:	2300      	movs	r3, #0
 80020c4:	697a      	ldr	r2, [r7, #20]
 80020c6:	2103      	movs	r1, #3
 80020c8:	400a      	ands	r2, r1
 80020ca:	0092      	lsls	r2, r2, #2
 80020cc:	4093      	lsls	r3, r2
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020d4:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_GPIO_Init+0x2c0>)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	3302      	adds	r3, #2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	43da      	mvns	r2, r3
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	025b      	lsls	r3, r3, #9
 80020fa:	4013      	ands	r3, r2
 80020fc:	d003      	beq.n	8002106 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002106:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	43da      	mvns	r2, r3
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	43da      	mvns	r2, r3
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4013      	ands	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	035b      	lsls	r3, r3, #13
 800214e:	4013      	ands	r3, r2
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800215a:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	43da      	mvns	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4013      	ands	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	039b      	lsls	r3, r3, #14
 8002178:	4013      	ands	r3, r2
 800217a:	d003      	beq.n	8002184 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_GPIO_Init+0x2cc>)
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	3301      	adds	r3, #1
 800218e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	40da      	lsrs	r2, r3
 8002198:	1e13      	subs	r3, r2, #0
 800219a:	d000      	beq.n	800219e <HAL_GPIO_Init+0x2b2>
 800219c:	e6ae      	b.n	8001efc <HAL_GPIO_Init+0x10>
  } 
}
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b006      	add	sp, #24
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	48000400 	.word	0x48000400
 80021b4:	48000800 	.word	0x48000800
 80021b8:	40010400 	.word	0x40010400

080021bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	0008      	movs	r0, r1
 80021c6:	0011      	movs	r1, r2
 80021c8:	1cbb      	adds	r3, r7, #2
 80021ca:	1c02      	adds	r2, r0, #0
 80021cc:	801a      	strh	r2, [r3, #0]
 80021ce:	1c7b      	adds	r3, r7, #1
 80021d0:	1c0a      	adds	r2, r1, #0
 80021d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021d4:	1c7b      	adds	r3, r7, #1
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021dc:	1cbb      	adds	r3, r7, #2
 80021de:	881a      	ldrh	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021e4:	e003      	b.n	80021ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021e6:	1cbb      	adds	r3, r7, #2
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b002      	add	sp, #8
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	000a      	movs	r2, r1
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800220a:	1cbb      	adds	r3, r7, #2
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	041a      	lsls	r2, r3, #16
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	1cb9      	adds	r1, r7, #2
 800221a:	8809      	ldrh	r1, [r1, #0]
 800221c:	400b      	ands	r3, r1
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	619a      	str	r2, [r3, #24]
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b004      	add	sp, #16
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d102      	bne.n	8002240 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	f000 fb76 	bl	800292c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2201      	movs	r2, #1
 8002246:	4013      	ands	r3, r2
 8002248:	d100      	bne.n	800224c <HAL_RCC_OscConfig+0x20>
 800224a:	e08e      	b.n	800236a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800224c:	4bc5      	ldr	r3, [pc, #788]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	220c      	movs	r2, #12
 8002252:	4013      	ands	r3, r2
 8002254:	2b04      	cmp	r3, #4
 8002256:	d00e      	beq.n	8002276 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002258:	4bc2      	ldr	r3, [pc, #776]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	220c      	movs	r2, #12
 800225e:	4013      	ands	r3, r2
 8002260:	2b08      	cmp	r3, #8
 8002262:	d117      	bne.n	8002294 <HAL_RCC_OscConfig+0x68>
 8002264:	4bbf      	ldr	r3, [pc, #764]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	23c0      	movs	r3, #192	; 0xc0
 800226a:	025b      	lsls	r3, r3, #9
 800226c:	401a      	ands	r2, r3
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	429a      	cmp	r2, r3
 8002274:	d10e      	bne.n	8002294 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002276:	4bbb      	ldr	r3, [pc, #748]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	029b      	lsls	r3, r3, #10
 800227e:	4013      	ands	r3, r2
 8002280:	d100      	bne.n	8002284 <HAL_RCC_OscConfig+0x58>
 8002282:	e071      	b.n	8002368 <HAL_RCC_OscConfig+0x13c>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d000      	beq.n	800228e <HAL_RCC_OscConfig+0x62>
 800228c:	e06c      	b.n	8002368 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	f000 fb4c 	bl	800292c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x80>
 800229c:	4bb1      	ldr	r3, [pc, #708]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4bb0      	ldr	r3, [pc, #704]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022a2:	2180      	movs	r1, #128	; 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e02f      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0xa2>
 80022b4:	4bab      	ldr	r3, [pc, #684]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4baa      	ldr	r3, [pc, #680]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022ba:	49ab      	ldr	r1, [pc, #684]	; (8002568 <HAL_RCC_OscConfig+0x33c>)
 80022bc:	400a      	ands	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	4ba8      	ldr	r3, [pc, #672]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4ba7      	ldr	r3, [pc, #668]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022c6:	49a9      	ldr	r1, [pc, #676]	; (800256c <HAL_RCC_OscConfig+0x340>)
 80022c8:	400a      	ands	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e01e      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10e      	bne.n	80022f4 <HAL_RCC_OscConfig+0xc8>
 80022d6:	4ba3      	ldr	r3, [pc, #652]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4ba2      	ldr	r3, [pc, #648]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	02c9      	lsls	r1, r1, #11
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	4b9f      	ldr	r3, [pc, #636]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b9e      	ldr	r3, [pc, #632]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0249      	lsls	r1, r1, #9
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xe0>
 80022f4:	4b9b      	ldr	r3, [pc, #620]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80022fa:	499b      	ldr	r1, [pc, #620]	; (8002568 <HAL_RCC_OscConfig+0x33c>)
 80022fc:	400a      	ands	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4b98      	ldr	r3, [pc, #608]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b97      	ldr	r3, [pc, #604]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002306:	4999      	ldr	r1, [pc, #612]	; (800256c <HAL_RCC_OscConfig+0x340>)
 8002308:	400a      	ands	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d014      	beq.n	800233e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7ff fa94 	bl	8001840 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800231e:	f7ff fa8f 	bl	8001840 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	; 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e2fd      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002330:	4b8c      	ldr	r3, [pc, #560]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0xf2>
 800233c:	e015      	b.n	800236a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff fa7f 	bl	8001840 <HAL_GetTick>
 8002342:	0003      	movs	r3, r0
 8002344:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fa7a 	bl	8001840 <HAL_GetTick>
 800234c:	0002      	movs	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	; 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2e8      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	4b82      	ldr	r3, [pc, #520]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	4013      	ands	r3, r2
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x11c>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	4013      	ands	r3, r2
 8002372:	d100      	bne.n	8002376 <HAL_RCC_OscConfig+0x14a>
 8002374:	e06c      	b.n	8002450 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002376:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	220c      	movs	r2, #12
 800237c:	4013      	ands	r3, r2
 800237e:	d00e      	beq.n	800239e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002380:	4b78      	ldr	r3, [pc, #480]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	220c      	movs	r2, #12
 8002386:	4013      	ands	r3, r2
 8002388:	2b08      	cmp	r3, #8
 800238a:	d11f      	bne.n	80023cc <HAL_RCC_OscConfig+0x1a0>
 800238c:	4b75      	ldr	r3, [pc, #468]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	23c0      	movs	r3, #192	; 0xc0
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	401a      	ands	r2, r3
 8002396:	2380      	movs	r3, #128	; 0x80
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	429a      	cmp	r2, r3
 800239c:	d116      	bne.n	80023cc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800239e:	4b71      	ldr	r3, [pc, #452]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x188>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e2bb      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22f8      	movs	r2, #248	; 0xf8
 80023ba:	4393      	bics	r3, r2
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00da      	lsls	r2, r3, #3
 80023c4:	4b67      	ldr	r3, [pc, #412]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ca:	e041      	b.n	8002450 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d024      	beq.n	800241e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d4:	4b63      	ldr	r3, [pc, #396]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4b62      	ldr	r3, [pc, #392]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80023da:	2101      	movs	r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa2e 	bl	8001840 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ea:	f7ff fa29 	bl	8001840 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e297      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023fc:	4b59      	ldr	r3, [pc, #356]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2202      	movs	r2, #2
 8002402:	4013      	ands	r3, r2
 8002404:	d0f1      	beq.n	80023ea <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002406:	4b57      	ldr	r3, [pc, #348]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22f8      	movs	r2, #248	; 0xf8
 800240c:	4393      	bics	r3, r2
 800240e:	0019      	movs	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	00da      	lsls	r2, r3, #3
 8002416:	4b53      	ldr	r3, [pc, #332]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e018      	b.n	8002450 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800241e:	4b51      	ldr	r3, [pc, #324]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b50      	ldr	r3, [pc, #320]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002424:	2101      	movs	r1, #1
 8002426:	438a      	bics	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff fa09 	bl	8001840 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff fa04 	bl	8001840 <HAL_GetTick>
 8002438:	0002      	movs	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e272      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b47      	ldr	r3, [pc, #284]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	4013      	ands	r3, r2
 800244e:	d1f1      	bne.n	8002434 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2208      	movs	r2, #8
 8002456:	4013      	ands	r3, r2
 8002458:	d036      	beq.n	80024c8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d019      	beq.n	8002496 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002462:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002466:	4b3f      	ldr	r3, [pc, #252]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002468:	2101      	movs	r1, #1
 800246a:	430a      	orrs	r2, r1
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246e:	f7ff f9e7 	bl	8001840 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7ff f9e2 	bl	8001840 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e250      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800248a:	4b36      	ldr	r3, [pc, #216]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d0f1      	beq.n	8002478 <HAL_RCC_OscConfig+0x24c>
 8002494:	e018      	b.n	80024c8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002496:	4b33      	ldr	r3, [pc, #204]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800249a:	4b32      	ldr	r3, [pc, #200]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800249c:	2101      	movs	r1, #1
 800249e:	438a      	bics	r2, r1
 80024a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7ff f9cd 	bl	8001840 <HAL_GetTick>
 80024a6:	0003      	movs	r3, r0
 80024a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff f9c8 	bl	8001840 <HAL_GetTick>
 80024b0:	0002      	movs	r2, r0
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e236      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024be:	4b29      	ldr	r3, [pc, #164]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2202      	movs	r2, #2
 80024c4:	4013      	ands	r3, r2
 80024c6:	d1f1      	bne.n	80024ac <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2204      	movs	r2, #4
 80024ce:	4013      	ands	r3, r2
 80024d0:	d100      	bne.n	80024d4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e0b5      	b.n	8002640 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024d4:	201f      	movs	r0, #31
 80024d6:	183b      	adds	r3, r7, r0
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	055b      	lsls	r3, r3, #21
 80024e4:	4013      	ands	r3, r2
 80024e6:	d110      	bne.n	800250a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024e8:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80024ea:	69da      	ldr	r2, [r3, #28]
 80024ec:	4b1d      	ldr	r3, [pc, #116]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0549      	lsls	r1, r1, #21
 80024f2:	430a      	orrs	r2, r1
 80024f4:	61da      	str	r2, [r3, #28]
 80024f6:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	055b      	lsls	r3, r3, #21
 80024fe:	4013      	ands	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002504:	183b      	adds	r3, r7, r0
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <HAL_RCC_OscConfig+0x344>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4013      	ands	r3, r2
 8002514:	d11a      	bne.n	800254c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_RCC_OscConfig+0x344>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b15      	ldr	r3, [pc, #84]	; (8002570 <HAL_RCC_OscConfig+0x344>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0049      	lsls	r1, r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002524:	f7ff f98c 	bl	8001840 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff f987 	bl	8001840 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1f5      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_OscConfig+0x344>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10f      	bne.n	8002574 <HAL_RCC_OscConfig+0x348>
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 8002556:	6a1a      	ldr	r2, [r3, #32]
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <HAL_RCC_OscConfig+0x338>)
 800255a:	2101      	movs	r1, #1
 800255c:	430a      	orrs	r2, r1
 800255e:	621a      	str	r2, [r3, #32]
 8002560:	e036      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a4>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	40021000 	.word	0x40021000
 8002568:	fffeffff 	.word	0xfffeffff
 800256c:	fffbffff 	.word	0xfffbffff
 8002570:	40007000 	.word	0x40007000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10c      	bne.n	8002596 <HAL_RCC_OscConfig+0x36a>
 800257c:	4bca      	ldr	r3, [pc, #808]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800257e:	6a1a      	ldr	r2, [r3, #32]
 8002580:	4bc9      	ldr	r3, [pc, #804]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002582:	2101      	movs	r1, #1
 8002584:	438a      	bics	r2, r1
 8002586:	621a      	str	r2, [r3, #32]
 8002588:	4bc7      	ldr	r3, [pc, #796]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800258a:	6a1a      	ldr	r2, [r3, #32]
 800258c:	4bc6      	ldr	r3, [pc, #792]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800258e:	2104      	movs	r1, #4
 8002590:	438a      	bics	r2, r1
 8002592:	621a      	str	r2, [r3, #32]
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a4>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x38c>
 800259e:	4bc2      	ldr	r3, [pc, #776]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	4bc1      	ldr	r3, [pc, #772]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025a4:	2104      	movs	r1, #4
 80025a6:	430a      	orrs	r2, r1
 80025a8:	621a      	str	r2, [r3, #32]
 80025aa:	4bbf      	ldr	r3, [pc, #764]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025ac:	6a1a      	ldr	r2, [r3, #32]
 80025ae:	4bbe      	ldr	r3, [pc, #760]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025b0:	2101      	movs	r1, #1
 80025b2:	430a      	orrs	r2, r1
 80025b4:	621a      	str	r2, [r3, #32]
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a4>
 80025b8:	4bbb      	ldr	r3, [pc, #748]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	4bba      	ldr	r3, [pc, #744]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025be:	2101      	movs	r1, #1
 80025c0:	438a      	bics	r2, r1
 80025c2:	621a      	str	r2, [r3, #32]
 80025c4:	4bb8      	ldr	r3, [pc, #736]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	4bb7      	ldr	r3, [pc, #732]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025ca:	2104      	movs	r1, #4
 80025cc:	438a      	bics	r2, r1
 80025ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d014      	beq.n	8002602 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d8:	f7ff f932 	bl	8001840 <HAL_GetTick>
 80025dc:	0003      	movs	r3, r0
 80025de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e0:	e009      	b.n	80025f6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e2:	f7ff f92d 	bl	8001840 <HAL_GetTick>
 80025e6:	0002      	movs	r2, r0
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	4aaf      	ldr	r2, [pc, #700]	; (80028ac <HAL_RCC_OscConfig+0x680>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e19a      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	4bac      	ldr	r3, [pc, #688]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x3b6>
 8002600:	e013      	b.n	800262a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002602:	f7ff f91d 	bl	8001840 <HAL_GetTick>
 8002606:	0003      	movs	r3, r0
 8002608:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	e009      	b.n	8002620 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7ff f918 	bl	8001840 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	4aa5      	ldr	r2, [pc, #660]	; (80028ac <HAL_RCC_OscConfig+0x680>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e185      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002620:	4ba1      	ldr	r3, [pc, #644]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	2202      	movs	r2, #2
 8002626:	4013      	ands	r3, r2
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800262a:	231f      	movs	r3, #31
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b9c      	ldr	r3, [pc, #624]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002636:	69da      	ldr	r2, [r3, #28]
 8002638:	4b9b      	ldr	r3, [pc, #620]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800263a:	499d      	ldr	r1, [pc, #628]	; (80028b0 <HAL_RCC_OscConfig+0x684>)
 800263c:	400a      	ands	r2, r1
 800263e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2210      	movs	r2, #16
 8002646:	4013      	ands	r3, r2
 8002648:	d063      	beq.n	8002712 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d12a      	bne.n	80026a8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002652:	4b95      	ldr	r3, [pc, #596]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002656:	4b94      	ldr	r3, [pc, #592]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002658:	2104      	movs	r1, #4
 800265a:	430a      	orrs	r2, r1
 800265c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800265e:	4b92      	ldr	r3, [pc, #584]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002662:	4b91      	ldr	r3, [pc, #580]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002664:	2101      	movs	r1, #1
 8002666:	430a      	orrs	r2, r1
 8002668:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800266a:	f7ff f8e9 	bl	8001840 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002674:	f7ff f8e4 	bl	8001840 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e152      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002686:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	2202      	movs	r2, #2
 800268c:	4013      	ands	r3, r2
 800268e:	d0f1      	beq.n	8002674 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002690:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002694:	22f8      	movs	r2, #248	; 0xf8
 8002696:	4393      	bics	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	00da      	lsls	r2, r3, #3
 80026a0:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026a2:	430a      	orrs	r2, r1
 80026a4:	635a      	str	r2, [r3, #52]	; 0x34
 80026a6:	e034      	b.n	8002712 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	3305      	adds	r3, #5
 80026ae:	d111      	bne.n	80026d4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80026b0:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b4:	4b7c      	ldr	r3, [pc, #496]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026b6:	2104      	movs	r1, #4
 80026b8:	438a      	bics	r2, r1
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80026bc:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	22f8      	movs	r2, #248	; 0xf8
 80026c2:	4393      	bics	r3, r2
 80026c4:	0019      	movs	r1, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	00da      	lsls	r2, r3, #3
 80026cc:	4b76      	ldr	r3, [pc, #472]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026ce:	430a      	orrs	r2, r1
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
 80026d2:	e01e      	b.n	8002712 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80026d4:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d8:	4b73      	ldr	r3, [pc, #460]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026da:	2104      	movs	r1, #4
 80026dc:	430a      	orrs	r2, r1
 80026de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026e4:	4b70      	ldr	r3, [pc, #448]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ec:	f7ff f8a8 	bl	8001840 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80026f6:	f7ff f8a3 	bl	8001840 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e111      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002708:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f1      	bne.n	80026f6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2220      	movs	r2, #32
 8002718:	4013      	ands	r3, r2
 800271a:	d05c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800271c:	4b62      	ldr	r3, [pc, #392]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	220c      	movs	r2, #12
 8002722:	4013      	ands	r3, r2
 8002724:	2b0c      	cmp	r3, #12
 8002726:	d00e      	beq.n	8002746 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002728:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	220c      	movs	r2, #12
 800272e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002730:	2b08      	cmp	r3, #8
 8002732:	d114      	bne.n	800275e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002734:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	23c0      	movs	r3, #192	; 0xc0
 800273a:	025b      	lsls	r3, r3, #9
 800273c:	401a      	ands	r2, r3
 800273e:	23c0      	movs	r3, #192	; 0xc0
 8002740:	025b      	lsls	r3, r3, #9
 8002742:	429a      	cmp	r2, r3
 8002744:	d10b      	bne.n	800275e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002746:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	025b      	lsls	r3, r3, #9
 800274e:	4013      	ands	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5a8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d03c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0e6      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d01b      	beq.n	800279e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002766:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276a:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0249      	lsls	r1, r1, #9
 8002770:	430a      	orrs	r2, r1
 8002772:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff f864 	bl	8001840 <HAL_GetTick>
 8002778:	0003      	movs	r3, r0
 800277a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277e:	f7ff f85f 	bl	8001840 <HAL_GetTick>
 8002782:	0002      	movs	r2, r0
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0cd      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002790:	4b45      	ldr	r3, [pc, #276]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	025b      	lsls	r3, r3, #9
 8002798:	4013      	ands	r3, r2
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x552>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800279e:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a2:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027a4:	4943      	ldr	r1, [pc, #268]	; (80028b4 <HAL_RCC_OscConfig+0x688>)
 80027a6:	400a      	ands	r2, r1
 80027a8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027aa:	f7ff f849 	bl	8001840 <HAL_GetTick>
 80027ae:	0003      	movs	r3, r0
 80027b0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b4:	f7ff f844 	bl	8001840 <HAL_GetTick>
 80027b8:	0002      	movs	r2, r0
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e0b2      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	025b      	lsls	r3, r3, #9
 80027ce:	4013      	ands	r3, r2
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x588>
 80027d2:	e000      	b.n	80027d6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80027d4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d100      	bne.n	80027e0 <HAL_RCC_OscConfig+0x5b4>
 80027de:	e0a4      	b.n	800292a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	220c      	movs	r2, #12
 80027e6:	4013      	ands	r3, r2
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d100      	bne.n	80027ee <HAL_RCC_OscConfig+0x5c2>
 80027ec:	e078      	b.n	80028e0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d14c      	bne.n	8002890 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	4b2c      	ldr	r3, [pc, #176]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	4b2b      	ldr	r3, [pc, #172]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 80027fc:	492e      	ldr	r1, [pc, #184]	; (80028b8 <HAL_RCC_OscConfig+0x68c>)
 80027fe:	400a      	ands	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff f81d 	bl	8001840 <HAL_GetTick>
 8002806:	0003      	movs	r3, r0
 8002808:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800280a:	e008      	b.n	800281e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7ff f818 	bl	8001840 <HAL_GetTick>
 8002810:	0002      	movs	r2, r0
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e086      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800281e:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	049b      	lsls	r3, r3, #18
 8002826:	4013      	ands	r3, r2
 8002828:	d1f0      	bne.n	800280c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800282a:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	220f      	movs	r2, #15
 8002830:	4393      	bics	r3, r2
 8002832:	0019      	movs	r1, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800283a:	430a      	orrs	r2, r1
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c
 800283e:	4b1a      	ldr	r3, [pc, #104]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a1e      	ldr	r2, [pc, #120]	; (80028bc <HAL_RCC_OscConfig+0x690>)
 8002844:	4013      	ands	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002850:	431a      	orrs	r2, r3
 8002852:	4b15      	ldr	r3, [pc, #84]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002854:	430a      	orrs	r2, r1
 8002856:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b12      	ldr	r3, [pc, #72]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0449      	lsls	r1, r1, #17
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe ffeb 	bl	8001840 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800286e:	e008      	b.n	8002882 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002870:	f7fe ffe6 	bl	8001840 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e054      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	049b      	lsls	r3, r3, #18
 800288a:	4013      	ands	r3, r2
 800288c:	d0f0      	beq.n	8002870 <HAL_RCC_OscConfig+0x644>
 800288e:	e04c      	b.n	800292a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002890:	4b05      	ldr	r3, [pc, #20]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <HAL_RCC_OscConfig+0x67c>)
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <HAL_RCC_OscConfig+0x68c>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289c:	f7fe ffd0 	bl	8001840 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a4:	e015      	b.n	80028d2 <HAL_RCC_OscConfig+0x6a6>
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	40021000 	.word	0x40021000
 80028ac:	00001388 	.word	0x00001388
 80028b0:	efffffff 	.word	0xefffffff
 80028b4:	fffeffff 	.word	0xfffeffff
 80028b8:	feffffff 	.word	0xfeffffff
 80028bc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe ffbe 	bl	8001840 <HAL_GetTick>
 80028c4:	0002      	movs	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e02c      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d2:	4b18      	ldr	r3, [pc, #96]	; (8002934 <HAL_RCC_OscConfig+0x708>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	049b      	lsls	r3, r3, #18
 80028da:	4013      	ands	r3, r2
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x694>
 80028de:	e024      	b.n	800292a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e01f      	b.n	800292c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80028ec:	4b11      	ldr	r3, [pc, #68]	; (8002934 <HAL_RCC_OscConfig+0x708>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_OscConfig+0x708>)
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	23c0      	movs	r3, #192	; 0xc0
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	401a      	ands	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	429a      	cmp	r2, r3
 8002906:	d10e      	bne.n	8002926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	220f      	movs	r2, #15
 800290c:	401a      	ands	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	429a      	cmp	r2, r3
 8002914:	d107      	bne.n	8002926 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	23f0      	movs	r3, #240	; 0xf0
 800291a:	039b      	lsls	r3, r3, #14
 800291c:	401a      	ands	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002922:	429a      	cmp	r2, r3
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b008      	add	sp, #32
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0bf      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b61      	ldr	r3, [pc, #388]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	4013      	ands	r3, r2
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d911      	bls.n	800297e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b5e      	ldr	r3, [pc, #376]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2201      	movs	r2, #1
 8002960:	4393      	bics	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	430a      	orrs	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296c:	4b59      	ldr	r3, [pc, #356]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0a6      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2202      	movs	r2, #2
 8002984:	4013      	ands	r3, r2
 8002986:	d015      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2204      	movs	r2, #4
 800298e:	4013      	ands	r3, r2
 8002990:	d006      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	4b50      	ldr	r3, [pc, #320]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002998:	21e0      	movs	r1, #224	; 0xe0
 800299a:	00c9      	lsls	r1, r1, #3
 800299c:	430a      	orrs	r2, r1
 800299e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	22f0      	movs	r2, #240	; 0xf0
 80029a6:	4393      	bics	r3, r2
 80029a8:	0019      	movs	r1, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2201      	movs	r2, #1
 80029ba:	4013      	ands	r3, r2
 80029bc:	d04c      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	4013      	ands	r3, r2
 80029d0:	d120      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07a      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d107      	bne.n	80029ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	049b      	lsls	r3, r3, #18
 80029e6:	4013      	ands	r3, r2
 80029e8:	d114      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06e      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 80029f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	025b      	lsls	r3, r3, #9
 80029fe:	4013      	ands	r3, r2
 8002a00:	d108      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e062      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e05b      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	4393      	bics	r3, r2
 8002a1c:	0019      	movs	r1, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4b2d      	ldr	r3, [pc, #180]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a28:	f7fe ff0a 	bl	8001840 <HAL_GetTick>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f7fe ff05 	bl	8001840 <HAL_GetTick>
 8002a36:	0002      	movs	r2, r0
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	4a27      	ldr	r2, [pc, #156]	; (8002adc <HAL_RCC_ClockConfig+0x1a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e042      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	220c      	movs	r2, #12
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d1ec      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a58:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d211      	bcs.n	8002a8a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	0019      	movs	r1, r3
 8002a70:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_RCC_ClockConfig+0x19c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	4013      	ands	r3, r2
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e020      	b.n	8002acc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2204      	movs	r2, #4
 8002a90:	4013      	ands	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002a94:	4b10      	ldr	r3, [pc, #64]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_RCC_ClockConfig+0x1a8>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002aa8:	f000 f820 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002aac:	0001      	movs	r1, r0
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <HAL_RCC_ClockConfig+0x1ac>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	000a      	movs	r2, r1
 8002abe:	40da      	lsrs	r2, r3
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002ac2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fe fe75 	bl	80017b4 <HAL_InitTick>
  
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b004      	add	sp, #16
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40022000 	.word	0x40022000
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	00001388 	.word	0x00001388
 8002ae0:	fffff8ff 	.word	0xfffff8ff
 8002ae4:	08003688 	.word	0x08003688
 8002ae8:	20000000 	.word	0x20000000

08002aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b08f      	sub	sp, #60	; 0x3c
 8002af0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002af2:	2314      	movs	r3, #20
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	4a38      	ldr	r2, [pc, #224]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0xec>)
 8002af8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002afa:	c313      	stmia	r3!, {r0, r1, r4}
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	4a36      	ldr	r2, [pc, #216]	; (8002bdc <HAL_RCC_GetSysClockFreq+0xf0>)
 8002b04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b06:	c313      	stmia	r3!, {r0, r1, r4}
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b10:	2300      	movs	r3, #0
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b14:	2300      	movs	r3, #0
 8002b16:	637b      	str	r3, [r7, #52]	; 0x34
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002b20:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	220c      	movs	r2, #12
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d047      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0xd4>
 8002b30:	d849      	bhi.n	8002bc6 <HAL_RCC_GetSysClockFreq+0xda>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x50>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d003      	beq.n	8002b42 <HAL_RCC_GetSysClockFreq+0x56>
 8002b3a:	e044      	b.n	8002bc6 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b3c:	4b29      	ldr	r3, [pc, #164]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b3e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b40:	e044      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b44:	0c9b      	lsrs	r3, r3, #18
 8002b46:	220f      	movs	r2, #15
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2214      	movs	r2, #20
 8002b4c:	18ba      	adds	r2, r7, r2
 8002b4e:	5cd3      	ldrb	r3, [r2, r3]
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b56:	220f      	movs	r2, #15
 8002b58:	4013      	ands	r3, r2
 8002b5a:	1d3a      	adds	r2, r7, #4
 8002b5c:	5cd3      	ldrb	r3, [r2, r3]
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002b60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b62:	23c0      	movs	r3, #192	; 0xc0
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	401a      	ands	r2, r3
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	025b      	lsls	r3, r3, #9
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b72:	481c      	ldr	r0, [pc, #112]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b74:	f7fd fac8 	bl	8000108 <__udivsi3>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	4353      	muls	r3, r2
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
 8002b82:	e01a      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b86:	23c0      	movs	r3, #192	; 0xc0
 8002b88:	025b      	lsls	r3, r3, #9
 8002b8a:	401a      	ands	r2, r3
 8002b8c:	23c0      	movs	r3, #192	; 0xc0
 8002b8e:	025b      	lsls	r3, r3, #9
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b96:	4814      	ldr	r0, [pc, #80]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002b98:	f7fd fab6 	bl	8000108 <__udivsi3>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	001a      	movs	r2, r3
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	4353      	muls	r3, r2
 8002ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002baa:	480e      	ldr	r0, [pc, #56]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bac:	f7fd faac 	bl	8000108 <__udivsi3>
 8002bb0:	0003      	movs	r3, r0
 8002bb2:	001a      	movs	r2, r3
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	4353      	muls	r3, r2
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bbe:	e005      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002bc0:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bc4:	e002      	b.n	8002bcc <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002bca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b00f      	add	sp, #60	; 0x3c
 8002bd4:	bd90      	pop	{r4, r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	080035e8 	.word	0x080035e8
 8002bdc:	080035f8 	.word	0x080035f8
 8002be0:	40021000 	.word	0x40021000
 8002be4:	007a1200 	.word	0x007a1200
 8002be8:	02dc6c00 	.word	0x02dc6c00

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e042      	b.n	8002c84 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	223d      	movs	r2, #61	; 0x3d
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223c      	movs	r2, #60	; 0x3c
 8002c0e:	2100      	movs	r1, #0
 8002c10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7fe fcb1 	bl	800157c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	223d      	movs	r2, #61	; 0x3d
 8002c1e:	2102      	movs	r1, #2
 8002c20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	0019      	movs	r1, r3
 8002c2c:	0010      	movs	r0, r2
 8002c2e:	f000 fb21 	bl	8003274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2246      	movs	r2, #70	; 0x46
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	223e      	movs	r2, #62	; 0x3e
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	223f      	movs	r2, #63	; 0x3f
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2240      	movs	r2, #64	; 0x40
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2241      	movs	r2, #65	; 0x41
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2242      	movs	r2, #66	; 0x42
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2243      	movs	r2, #67	; 0x43
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2244      	movs	r2, #68	; 0x44
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2245      	movs	r2, #69	; 0x45
 8002c76:	2101      	movs	r1, #1
 8002c78:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	223d      	movs	r2, #61	; 0x3d
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	0018      	movs	r0, r3
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	223d      	movs	r2, #61	; 0x3d
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d001      	beq.n	8002ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e036      	b.n	8002d12 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	223d      	movs	r2, #61	; 0x3d
 8002ca8:	2102      	movs	r1, #2
 8002caa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a16      	ldr	r2, [pc, #88]	; (8002d1c <HAL_TIM_Base_Start_IT+0x90>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00a      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x50>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	05db      	lsls	r3, r3, #23
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIM_Base_Start_IT+0x50>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_TIM_Base_Start_IT+0x94>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d111      	bne.n	8002d00 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2207      	movs	r2, #7
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d010      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	e007      	b.n	8002d10 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400

08002d24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e090      	b.n	8002e5a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	223d      	movs	r2, #61	; 0x3d
 8002d3c:	5c9b      	ldrb	r3, [r3, r2]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d107      	bne.n	8002d54 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223c      	movs	r2, #60	; 0x3c
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7fe fc52 	bl	80015f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	223d      	movs	r2, #61	; 0x3d
 8002d58:	2102      	movs	r1, #2
 8002d5a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	493f      	ldr	r1, [pc, #252]	; (8002e64 <HAL_TIM_Encoder_Init+0x140>)
 8002d68:	400a      	ands	r2, r1
 8002d6a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3304      	adds	r3, #4
 8002d74:	0019      	movs	r1, r3
 8002d76:	0010      	movs	r0, r2
 8002d78:	f000 fa7c 	bl	8003274 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4a31      	ldr	r2, [pc, #196]	; (8002e68 <HAL_TIM_Encoder_Init+0x144>)
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	4313      	orrs	r3, r2
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4a2c      	ldr	r2, [pc, #176]	; (8002e6c <HAL_TIM_Encoder_Init+0x148>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <HAL_TIM_Encoder_Init+0x14c>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	011a      	lsls	r2, r3, #4
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	031b      	lsls	r3, r3, #12
 8002de6:	4313      	orrs	r3, r2
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2222      	movs	r2, #34	; 0x22
 8002df2:	4393      	bics	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2288      	movs	r2, #136	; 0x88
 8002dfa:	4393      	bics	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2246      	movs	r2, #70	; 0x46
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	223e      	movs	r2, #62	; 0x3e
 8002e34:	2101      	movs	r1, #1
 8002e36:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	223f      	movs	r2, #63	; 0x3f
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2242      	movs	r2, #66	; 0x42
 8002e44:	2101      	movs	r1, #1
 8002e46:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2243      	movs	r2, #67	; 0x43
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	223d      	movs	r2, #61	; 0x3d
 8002e54:	2101      	movs	r1, #1
 8002e56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b006      	add	sp, #24
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	ffffbff8 	.word	0xffffbff8
 8002e68:	fffffcfc 	.word	0xfffffcfc
 8002e6c:	fffff3f3 	.word	0xfffff3f3
 8002e70:	ffff0f0f 	.word	0xffff0f0f

08002e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d124      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2202      	movs	r2, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d11d      	bne.n	8002ed4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	4252      	negs	r2, r2
 8002ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	2203      	movs	r2, #3
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	f000 f9c4 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e007      	b.n	8002ece <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f000 f9b7 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f000 f9c3 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2204      	movs	r2, #4
 8002edc:	4013      	ands	r3, r2
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d125      	bne.n	8002f2e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d11e      	bne.n	8002f2e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2205      	movs	r2, #5
 8002ef6:	4252      	negs	r2, r2
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699a      	ldr	r2, [r3, #24]
 8002f06:	23c0      	movs	r3, #192	; 0xc0
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 f997 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002f16:	e007      	b.n	8002f28 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f98a 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f996 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2208      	movs	r2, #8
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d124      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2208      	movs	r2, #8
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d11d      	bne.n	8002f86 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2209      	movs	r2, #9
 8002f50:	4252      	negs	r2, r2
 8002f52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2204      	movs	r2, #4
 8002f58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	2203      	movs	r2, #3
 8002f62:	4013      	ands	r3, r2
 8002f64:	d004      	beq.n	8002f70 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f000 f96b 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002f6e:	e007      	b.n	8002f80 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f95e 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 f96a 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d125      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2210      	movs	r2, #16
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d11e      	bne.n	8002fe0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2211      	movs	r2, #17
 8002fa8:	4252      	negs	r2, r2
 8002faa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2208      	movs	r2, #8
 8002fb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	69da      	ldr	r2, [r3, #28]
 8002fb8:	23c0      	movs	r3, #192	; 0xc0
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f000 f93e 	bl	8003244 <HAL_TIM_IC_CaptureCallback>
 8002fc8:	e007      	b.n	8002fda <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f931 	bl	8003234 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f000 f93d 	bl	8003254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	4013      	ands	r3, r2
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10f      	bne.n	800300e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d108      	bne.n	800300e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2202      	movs	r2, #2
 8003002:	4252      	negs	r2, r2
 8003004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f7fe fa2f 	bl	800146c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2280      	movs	r2, #128	; 0x80
 8003016:	4013      	ands	r3, r2
 8003018:	2b80      	cmp	r3, #128	; 0x80
 800301a:	d10f      	bne.n	800303c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	4013      	ands	r3, r2
 8003026:	2b80      	cmp	r3, #128	; 0x80
 8003028:	d108      	bne.n	800303c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2281      	movs	r2, #129	; 0x81
 8003030:	4252      	negs	r2, r2
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fa8c 	bl	8003554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	4013      	ands	r3, r2
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d10f      	bne.n	800306a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2240      	movs	r2, #64	; 0x40
 8003052:	4013      	ands	r3, r2
 8003054:	2b40      	cmp	r3, #64	; 0x40
 8003056:	d108      	bne.n	800306a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2241      	movs	r2, #65	; 0x41
 800305e:	4252      	negs	r2, r2
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f8fd 	bl	8003264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2220      	movs	r2, #32
 8003072:	4013      	ands	r3, r2
 8003074:	2b20      	cmp	r3, #32
 8003076:	d10f      	bne.n	8003098 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	4013      	ands	r3, r2
 8003082:	2b20      	cmp	r3, #32
 8003084:	d108      	bne.n	8003098 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2221      	movs	r2, #33	; 0x21
 800308c:	4252      	negs	r2, r2
 800308e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 fa56 	bl	8003544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	46bd      	mov	sp, r7
 800309c:	b002      	add	sp, #8
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	223c      	movs	r2, #60	; 0x3c
 80030ae:	5c9b      	ldrb	r3, [r3, r2]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_ConfigClockSource+0x18>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e0b7      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x188>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	223c      	movs	r2, #60	; 0x3c
 80030bc:	2101      	movs	r1, #1
 80030be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	223d      	movs	r2, #61	; 0x3d
 80030c4:	2102      	movs	r1, #2
 80030c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2277      	movs	r2, #119	; 0x77
 80030d4:	4393      	bics	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a55      	ldr	r2, [pc, #340]	; (8003230 <HAL_TIM_ConfigClockSource+0x190>)
 80030dc:	4013      	ands	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2280      	movs	r2, #128	; 0x80
 80030ee:	0192      	lsls	r2, r2, #6
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d040      	beq.n	8003176 <HAL_TIM_ConfigClockSource+0xd6>
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0192      	lsls	r2, r2, #6
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d900      	bls.n	80030fe <HAL_TIM_ConfigClockSource+0x5e>
 80030fc:	e088      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	0152      	lsls	r2, r2, #5
 8003102:	4293      	cmp	r3, r2
 8003104:	d100      	bne.n	8003108 <HAL_TIM_ConfigClockSource+0x68>
 8003106:	e085      	b.n	8003214 <HAL_TIM_ConfigClockSource+0x174>
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	0152      	lsls	r2, r2, #5
 800310c:	4293      	cmp	r3, r2
 800310e:	d900      	bls.n	8003112 <HAL_TIM_ConfigClockSource+0x72>
 8003110:	e07e      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 8003112:	2b70      	cmp	r3, #112	; 0x70
 8003114:	d018      	beq.n	8003148 <HAL_TIM_ConfigClockSource+0xa8>
 8003116:	d900      	bls.n	800311a <HAL_TIM_ConfigClockSource+0x7a>
 8003118:	e07a      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 800311a:	2b60      	cmp	r3, #96	; 0x60
 800311c:	d04f      	beq.n	80031be <HAL_TIM_ConfigClockSource+0x11e>
 800311e:	d900      	bls.n	8003122 <HAL_TIM_ConfigClockSource+0x82>
 8003120:	e076      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 8003122:	2b50      	cmp	r3, #80	; 0x50
 8003124:	d03b      	beq.n	800319e <HAL_TIM_ConfigClockSource+0xfe>
 8003126:	d900      	bls.n	800312a <HAL_TIM_ConfigClockSource+0x8a>
 8003128:	e072      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 800312a:	2b40      	cmp	r3, #64	; 0x40
 800312c:	d057      	beq.n	80031de <HAL_TIM_ConfigClockSource+0x13e>
 800312e:	d900      	bls.n	8003132 <HAL_TIM_ConfigClockSource+0x92>
 8003130:	e06e      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 8003132:	2b30      	cmp	r3, #48	; 0x30
 8003134:	d063      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15e>
 8003136:	d86b      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d060      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15e>
 800313c:	d868      	bhi.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d05d      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15e>
 8003142:	2b10      	cmp	r3, #16
 8003144:	d05b      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003146:	e063      	b.n	8003210 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f000 f97c 	bl	8003454 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2277      	movs	r2, #119	; 0x77
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
      break;
 8003174:	e04f      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6899      	ldr	r1, [r3, #8]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f000 f965 	bl	8003454 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2180      	movs	r1, #128	; 0x80
 8003196:	01c9      	lsls	r1, r1, #7
 8003198:	430a      	orrs	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
      break;
 800319c:	e03b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	001a      	movs	r2, r3
 80031ac:	f000 f8d8 	bl	8003360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2150      	movs	r1, #80	; 0x50
 80031b6:	0018      	movs	r0, r3
 80031b8:	f000 f932 	bl	8003420 <TIM_ITRx_SetConfig>
      break;
 80031bc:	e02b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6859      	ldr	r1, [r3, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	001a      	movs	r2, r3
 80031cc:	f000 f8f6 	bl	80033bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2160      	movs	r1, #96	; 0x60
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f922 	bl	8003420 <TIM_ITRx_SetConfig>
      break;
 80031dc:	e01b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6859      	ldr	r1, [r3, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	001a      	movs	r2, r3
 80031ec:	f000 f8b8 	bl	8003360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2140      	movs	r1, #64	; 0x40
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f912 	bl	8003420 <TIM_ITRx_SetConfig>
      break;
 80031fc:	e00b      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0019      	movs	r1, r3
 8003208:	0010      	movs	r0, r2
 800320a:	f000 f909 	bl	8003420 <TIM_ITRx_SetConfig>
        break;
 800320e:	e002      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	e000      	b.n	8003216 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003214:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	223d      	movs	r2, #61	; 0x3d
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	223c      	movs	r2, #60	; 0x3c
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b004      	add	sp, #16
 800322e:	bd80      	pop	{r7, pc}
 8003230:	ffff00ff 	.word	0xffff00ff

08003234 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b002      	add	sp, #8
 8003272:	bd80      	pop	{r7, pc}

08003274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d008      	beq.n	800329e <TIM_Base_SetConfig+0x2a>
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	05db      	lsls	r3, r3, #23
 8003292:	429a      	cmp	r2, r3
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0x2a>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2c      	ldr	r2, [pc, #176]	; (800334c <TIM_Base_SetConfig+0xd8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d108      	bne.n	80032b0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2270      	movs	r2, #112	; 0x70
 80032a2:	4393      	bics	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d014      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	05db      	lsls	r3, r3, #23
 80032be:	429a      	cmp	r2, r3
 80032c0:	d00f      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a21      	ldr	r2, [pc, #132]	; (800334c <TIM_Base_SetConfig+0xd8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00b      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a20      	ldr	r2, [pc, #128]	; (8003350 <TIM_Base_SetConfig+0xdc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d007      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a1f      	ldr	r2, [pc, #124]	; (8003354 <TIM_Base_SetConfig+0xe0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d003      	beq.n	80032e2 <TIM_Base_SetConfig+0x6e>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <TIM_Base_SetConfig+0xe4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d108      	bne.n	80032f4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	; (800335c <TIM_Base_SetConfig+0xe8>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	4393      	bics	r3, r2
 80032fa:	001a      	movs	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <TIM_Base_SetConfig+0xd4>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0xbe>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <TIM_Base_SetConfig+0xe0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0xbe>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <TIM_Base_SetConfig+0xe4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d103      	bne.n	800333a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	615a      	str	r2, [r3, #20]
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b004      	add	sp, #16
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40000400 	.word	0x40000400
 8003350:	40002000 	.word	0x40002000
 8003354:	40014400 	.word	0x40014400
 8003358:	40014800 	.word	0x40014800
 800335c:	fffffcff 	.word	0xfffffcff

08003360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	2201      	movs	r2, #1
 8003378:	4393      	bics	r3, r2
 800337a:	001a      	movs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	22f0      	movs	r2, #240	; 0xf0
 800338a:	4393      	bics	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	220a      	movs	r2, #10
 800339c:	4393      	bics	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b006      	add	sp, #24
 80033ba:	bd80      	pop	{r7, pc}

080033bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	2210      	movs	r2, #16
 80033ce:	4393      	bics	r3, r2
 80033d0:	001a      	movs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <TIM_TI2_ConfigInputStage+0x60>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	031b      	lsls	r3, r3, #12
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	22a0      	movs	r2, #160	; 0xa0
 80033f8:	4393      	bics	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b006      	add	sp, #24
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	ffff0fff 	.word	0xffff0fff

08003420 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2270      	movs	r2, #112	; 0x70
 8003434:	4393      	bics	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	2207      	movs	r2, #7
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	609a      	str	r2, [r3, #8]
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46bd      	mov	sp, r7
 800344e:	b004      	add	sp, #16
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
 8003460:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <TIM_ETR_SetConfig+0x3c>)
 800346c:	4013      	ands	r3, r2
 800346e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	021a      	lsls	r2, r3, #8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	431a      	orrs	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	609a      	str	r2, [r3, #8]
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	46bd      	mov	sp, r7
 800348c:	b006      	add	sp, #24
 800348e:	bd80      	pop	{r7, pc}
 8003490:	ffff00ff 	.word	0xffff00ff

08003494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	223c      	movs	r2, #60	; 0x3c
 80034a2:	5c9b      	ldrb	r3, [r3, r2]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034a8:	2302      	movs	r3, #2
 80034aa:	e042      	b.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	223c      	movs	r2, #60	; 0x3c
 80034b0:	2101      	movs	r1, #1
 80034b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	223d      	movs	r2, #61	; 0x3d
 80034b8:	2102      	movs	r1, #2
 80034ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2270      	movs	r2, #112	; 0x70
 80034d0:	4393      	bics	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a14      	ldr	r2, [pc, #80]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d00a      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	05db      	lsls	r3, r3, #23
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d004      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0f      	ldr	r2, [pc, #60]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10c      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	4393      	bics	r3, r2
 800350c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	223d      	movs	r2, #61	; 0x3d
 8003524:	2101      	movs	r1, #1
 8003526:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223c      	movs	r2, #60	; 0x3c
 800352c:	2100      	movs	r1, #0
 800352e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	0018      	movs	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	b004      	add	sp, #16
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400

08003544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800355c:	46c0      	nop			; (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b002      	add	sp, #8
 8003562:	bd80      	pop	{r7, pc}

08003564 <__libc_init_array>:
 8003564:	b570      	push	{r4, r5, r6, lr}
 8003566:	2600      	movs	r6, #0
 8003568:	4d0c      	ldr	r5, [pc, #48]	; (800359c <__libc_init_array+0x38>)
 800356a:	4c0d      	ldr	r4, [pc, #52]	; (80035a0 <__libc_init_array+0x3c>)
 800356c:	1b64      	subs	r4, r4, r5
 800356e:	10a4      	asrs	r4, r4, #2
 8003570:	42a6      	cmp	r6, r4
 8003572:	d109      	bne.n	8003588 <__libc_init_array+0x24>
 8003574:	2600      	movs	r6, #0
 8003576:	f000 f82b 	bl	80035d0 <_init>
 800357a:	4d0a      	ldr	r5, [pc, #40]	; (80035a4 <__libc_init_array+0x40>)
 800357c:	4c0a      	ldr	r4, [pc, #40]	; (80035a8 <__libc_init_array+0x44>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	42a6      	cmp	r6, r4
 8003584:	d105      	bne.n	8003592 <__libc_init_array+0x2e>
 8003586:	bd70      	pop	{r4, r5, r6, pc}
 8003588:	00b3      	lsls	r3, r6, #2
 800358a:	58eb      	ldr	r3, [r5, r3]
 800358c:	4798      	blx	r3
 800358e:	3601      	adds	r6, #1
 8003590:	e7ee      	b.n	8003570 <__libc_init_array+0xc>
 8003592:	00b3      	lsls	r3, r6, #2
 8003594:	58eb      	ldr	r3, [r5, r3]
 8003596:	4798      	blx	r3
 8003598:	3601      	adds	r6, #1
 800359a:	e7f2      	b.n	8003582 <__libc_init_array+0x1e>
 800359c:	08003698 	.word	0x08003698
 80035a0:	08003698 	.word	0x08003698
 80035a4:	08003698 	.word	0x08003698
 80035a8:	0800369c 	.word	0x0800369c

080035ac <memcpy>:
 80035ac:	2300      	movs	r3, #0
 80035ae:	b510      	push	{r4, lr}
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d100      	bne.n	80035b6 <memcpy+0xa>
 80035b4:	bd10      	pop	{r4, pc}
 80035b6:	5ccc      	ldrb	r4, [r1, r3]
 80035b8:	54c4      	strb	r4, [r0, r3]
 80035ba:	3301      	adds	r3, #1
 80035bc:	e7f8      	b.n	80035b0 <memcpy+0x4>

080035be <memset>:
 80035be:	0003      	movs	r3, r0
 80035c0:	1882      	adds	r2, r0, r2
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d100      	bne.n	80035c8 <memset+0xa>
 80035c6:	4770      	bx	lr
 80035c8:	7019      	strb	r1, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	e7f9      	b.n	80035c2 <memset+0x4>
	...

080035d0 <_init>:
 80035d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d6:	bc08      	pop	{r3}
 80035d8:	469e      	mov	lr, r3
 80035da:	4770      	bx	lr

080035dc <_fini>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr
