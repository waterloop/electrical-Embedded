
Yamper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000243c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  080024fc  080024fc  000124fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025ec  080025ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025ec  080025ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025ec  080025ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  2000000c  08002600  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002600  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000905f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000168d  00000000  00000000  00029093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a39  00000000  00000000  0002ba68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aaeb  00000000  00000000  000434a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af67  00000000  00000000  0004df8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d8ef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024a8  00000000  00000000  000d8f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024e4 	.word	0x080024e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080024e4 	.word	0x080024e4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4646      	mov	r6, r8
 8000224:	46d6      	mov	lr, sl
 8000226:	464f      	mov	r7, r9
 8000228:	024d      	lsls	r5, r1, #9
 800022a:	0242      	lsls	r2, r0, #9
 800022c:	b5c0      	push	{r6, r7, lr}
 800022e:	0a52      	lsrs	r2, r2, #9
 8000230:	0a6e      	lsrs	r6, r5, #9
 8000232:	0047      	lsls	r7, r0, #1
 8000234:	46b0      	mov	r8, r6
 8000236:	0e3f      	lsrs	r7, r7, #24
 8000238:	004e      	lsls	r6, r1, #1
 800023a:	0fc4      	lsrs	r4, r0, #31
 800023c:	00d0      	lsls	r0, r2, #3
 800023e:	4694      	mov	ip, r2
 8000240:	003b      	movs	r3, r7
 8000242:	4682      	mov	sl, r0
 8000244:	0e36      	lsrs	r6, r6, #24
 8000246:	0fc9      	lsrs	r1, r1, #31
 8000248:	09ad      	lsrs	r5, r5, #6
 800024a:	428c      	cmp	r4, r1
 800024c:	d06d      	beq.n	800032a <__aeabi_fadd+0x10a>
 800024e:	1bb8      	subs	r0, r7, r6
 8000250:	4681      	mov	r9, r0
 8000252:	2800      	cmp	r0, #0
 8000254:	dd4d      	ble.n	80002f2 <__aeabi_fadd+0xd2>
 8000256:	2e00      	cmp	r6, #0
 8000258:	d100      	bne.n	800025c <__aeabi_fadd+0x3c>
 800025a:	e088      	b.n	800036e <__aeabi_fadd+0x14e>
 800025c:	2fff      	cmp	r7, #255	; 0xff
 800025e:	d05a      	beq.n	8000316 <__aeabi_fadd+0xf6>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	04db      	lsls	r3, r3, #19
 8000264:	431d      	orrs	r5, r3
 8000266:	464b      	mov	r3, r9
 8000268:	2201      	movs	r2, #1
 800026a:	2b1b      	cmp	r3, #27
 800026c:	dc0a      	bgt.n	8000284 <__aeabi_fadd+0x64>
 800026e:	002b      	movs	r3, r5
 8000270:	464a      	mov	r2, r9
 8000272:	4649      	mov	r1, r9
 8000274:	40d3      	lsrs	r3, r2
 8000276:	2220      	movs	r2, #32
 8000278:	1a52      	subs	r2, r2, r1
 800027a:	4095      	lsls	r5, r2
 800027c:	002a      	movs	r2, r5
 800027e:	1e55      	subs	r5, r2, #1
 8000280:	41aa      	sbcs	r2, r5
 8000282:	431a      	orrs	r2, r3
 8000284:	4653      	mov	r3, sl
 8000286:	1a9a      	subs	r2, r3, r2
 8000288:	0153      	lsls	r3, r2, #5
 800028a:	d400      	bmi.n	800028e <__aeabi_fadd+0x6e>
 800028c:	e0b9      	b.n	8000402 <__aeabi_fadd+0x1e2>
 800028e:	0192      	lsls	r2, r2, #6
 8000290:	0996      	lsrs	r6, r2, #6
 8000292:	0030      	movs	r0, r6
 8000294:	f000 fbcc 	bl	8000a30 <__clzsi2>
 8000298:	3805      	subs	r0, #5
 800029a:	4086      	lsls	r6, r0
 800029c:	4287      	cmp	r7, r0
 800029e:	dd00      	ble.n	80002a2 <__aeabi_fadd+0x82>
 80002a0:	e0d4      	b.n	800044c <__aeabi_fadd+0x22c>
 80002a2:	0033      	movs	r3, r6
 80002a4:	1bc7      	subs	r7, r0, r7
 80002a6:	2020      	movs	r0, #32
 80002a8:	3701      	adds	r7, #1
 80002aa:	40fb      	lsrs	r3, r7
 80002ac:	1bc7      	subs	r7, r0, r7
 80002ae:	40be      	lsls	r6, r7
 80002b0:	0032      	movs	r2, r6
 80002b2:	1e56      	subs	r6, r2, #1
 80002b4:	41b2      	sbcs	r2, r6
 80002b6:	2700      	movs	r7, #0
 80002b8:	431a      	orrs	r2, r3
 80002ba:	0753      	lsls	r3, r2, #29
 80002bc:	d004      	beq.n	80002c8 <__aeabi_fadd+0xa8>
 80002be:	230f      	movs	r3, #15
 80002c0:	4013      	ands	r3, r2
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d000      	beq.n	80002c8 <__aeabi_fadd+0xa8>
 80002c6:	3204      	adds	r2, #4
 80002c8:	0153      	lsls	r3, r2, #5
 80002ca:	d400      	bmi.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e09c      	b.n	8000408 <__aeabi_fadd+0x1e8>
 80002ce:	1c7b      	adds	r3, r7, #1
 80002d0:	2ffe      	cmp	r7, #254	; 0xfe
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e09a      	b.n	800040c <__aeabi_fadd+0x1ec>
 80002d6:	0192      	lsls	r2, r2, #6
 80002d8:	0a52      	lsrs	r2, r2, #9
 80002da:	4694      	mov	ip, r2
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	05d8      	lsls	r0, r3, #23
 80002e0:	4663      	mov	r3, ip
 80002e2:	07e4      	lsls	r4, r4, #31
 80002e4:	4318      	orrs	r0, r3
 80002e6:	4320      	orrs	r0, r4
 80002e8:	bce0      	pop	{r5, r6, r7}
 80002ea:	46ba      	mov	sl, r7
 80002ec:	46b1      	mov	r9, r6
 80002ee:	46a8      	mov	r8, r5
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d049      	beq.n	800038a <__aeabi_fadd+0x16a>
 80002f6:	1bf3      	subs	r3, r6, r7
 80002f8:	2f00      	cmp	r7, #0
 80002fa:	d000      	beq.n	80002fe <__aeabi_fadd+0xde>
 80002fc:	e0b6      	b.n	800046c <__aeabi_fadd+0x24c>
 80002fe:	4652      	mov	r2, sl
 8000300:	2a00      	cmp	r2, #0
 8000302:	d060      	beq.n	80003c6 <__aeabi_fadd+0x1a6>
 8000304:	3b01      	subs	r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0xec>
 800030a:	e0fc      	b.n	8000506 <__aeabi_fadd+0x2e6>
 800030c:	2eff      	cmp	r6, #255	; 0xff
 800030e:	d000      	beq.n	8000312 <__aeabi_fadd+0xf2>
 8000310:	e0b4      	b.n	800047c <__aeabi_fadd+0x25c>
 8000312:	000c      	movs	r4, r1
 8000314:	4642      	mov	r2, r8
 8000316:	2a00      	cmp	r2, #0
 8000318:	d078      	beq.n	800040c <__aeabi_fadd+0x1ec>
 800031a:	2080      	movs	r0, #128	; 0x80
 800031c:	03c0      	lsls	r0, r0, #15
 800031e:	4310      	orrs	r0, r2
 8000320:	0242      	lsls	r2, r0, #9
 8000322:	0a53      	lsrs	r3, r2, #9
 8000324:	469c      	mov	ip, r3
 8000326:	23ff      	movs	r3, #255	; 0xff
 8000328:	e7d9      	b.n	80002de <__aeabi_fadd+0xbe>
 800032a:	1bb9      	subs	r1, r7, r6
 800032c:	2900      	cmp	r1, #0
 800032e:	dd71      	ble.n	8000414 <__aeabi_fadd+0x1f4>
 8000330:	2e00      	cmp	r6, #0
 8000332:	d03f      	beq.n	80003b4 <__aeabi_fadd+0x194>
 8000334:	2fff      	cmp	r7, #255	; 0xff
 8000336:	d0ee      	beq.n	8000316 <__aeabi_fadd+0xf6>
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	04db      	lsls	r3, r3, #19
 800033c:	431d      	orrs	r5, r3
 800033e:	2201      	movs	r2, #1
 8000340:	291b      	cmp	r1, #27
 8000342:	dc07      	bgt.n	8000354 <__aeabi_fadd+0x134>
 8000344:	002a      	movs	r2, r5
 8000346:	2320      	movs	r3, #32
 8000348:	40ca      	lsrs	r2, r1
 800034a:	1a59      	subs	r1, r3, r1
 800034c:	408d      	lsls	r5, r1
 800034e:	1e6b      	subs	r3, r5, #1
 8000350:	419d      	sbcs	r5, r3
 8000352:	432a      	orrs	r2, r5
 8000354:	4452      	add	r2, sl
 8000356:	0153      	lsls	r3, r2, #5
 8000358:	d553      	bpl.n	8000402 <__aeabi_fadd+0x1e2>
 800035a:	3701      	adds	r7, #1
 800035c:	2fff      	cmp	r7, #255	; 0xff
 800035e:	d055      	beq.n	800040c <__aeabi_fadd+0x1ec>
 8000360:	2301      	movs	r3, #1
 8000362:	497b      	ldr	r1, [pc, #492]	; (8000550 <__aeabi_fadd+0x330>)
 8000364:	4013      	ands	r3, r2
 8000366:	0852      	lsrs	r2, r2, #1
 8000368:	400a      	ands	r2, r1
 800036a:	431a      	orrs	r2, r3
 800036c:	e7a5      	b.n	80002ba <__aeabi_fadd+0x9a>
 800036e:	2d00      	cmp	r5, #0
 8000370:	d02c      	beq.n	80003cc <__aeabi_fadd+0x1ac>
 8000372:	2301      	movs	r3, #1
 8000374:	425b      	negs	r3, r3
 8000376:	469c      	mov	ip, r3
 8000378:	44e1      	add	r9, ip
 800037a:	464b      	mov	r3, r9
 800037c:	2b00      	cmp	r3, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x162>
 8000380:	e0ad      	b.n	80004de <__aeabi_fadd+0x2be>
 8000382:	2fff      	cmp	r7, #255	; 0xff
 8000384:	d000      	beq.n	8000388 <__aeabi_fadd+0x168>
 8000386:	e76e      	b.n	8000266 <__aeabi_fadd+0x46>
 8000388:	e7c5      	b.n	8000316 <__aeabi_fadd+0xf6>
 800038a:	20fe      	movs	r0, #254	; 0xfe
 800038c:	1c7e      	adds	r6, r7, #1
 800038e:	4230      	tst	r0, r6
 8000390:	d160      	bne.n	8000454 <__aeabi_fadd+0x234>
 8000392:	2f00      	cmp	r7, #0
 8000394:	d000      	beq.n	8000398 <__aeabi_fadd+0x178>
 8000396:	e093      	b.n	80004c0 <__aeabi_fadd+0x2a0>
 8000398:	4652      	mov	r2, sl
 800039a:	2a00      	cmp	r2, #0
 800039c:	d100      	bne.n	80003a0 <__aeabi_fadd+0x180>
 800039e:	e0b6      	b.n	800050e <__aeabi_fadd+0x2ee>
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d09c      	beq.n	80002de <__aeabi_fadd+0xbe>
 80003a4:	1b52      	subs	r2, r2, r5
 80003a6:	0150      	lsls	r0, r2, #5
 80003a8:	d400      	bmi.n	80003ac <__aeabi_fadd+0x18c>
 80003aa:	e0c3      	b.n	8000534 <__aeabi_fadd+0x314>
 80003ac:	4653      	mov	r3, sl
 80003ae:	000c      	movs	r4, r1
 80003b0:	1aea      	subs	r2, r5, r3
 80003b2:	e782      	b.n	80002ba <__aeabi_fadd+0x9a>
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d009      	beq.n	80003cc <__aeabi_fadd+0x1ac>
 80003b8:	3901      	subs	r1, #1
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d100      	bne.n	80003c0 <__aeabi_fadd+0x1a0>
 80003be:	e08b      	b.n	80004d8 <__aeabi_fadd+0x2b8>
 80003c0:	2fff      	cmp	r7, #255	; 0xff
 80003c2:	d1bc      	bne.n	800033e <__aeabi_fadd+0x11e>
 80003c4:	e7a7      	b.n	8000316 <__aeabi_fadd+0xf6>
 80003c6:	000c      	movs	r4, r1
 80003c8:	4642      	mov	r2, r8
 80003ca:	0037      	movs	r7, r6
 80003cc:	2fff      	cmp	r7, #255	; 0xff
 80003ce:	d0a2      	beq.n	8000316 <__aeabi_fadd+0xf6>
 80003d0:	0252      	lsls	r2, r2, #9
 80003d2:	0a53      	lsrs	r3, r2, #9
 80003d4:	469c      	mov	ip, r3
 80003d6:	b2fb      	uxtb	r3, r7
 80003d8:	e781      	b.n	80002de <__aeabi_fadd+0xbe>
 80003da:	21fe      	movs	r1, #254	; 0xfe
 80003dc:	3701      	adds	r7, #1
 80003de:	4239      	tst	r1, r7
 80003e0:	d165      	bne.n	80004ae <__aeabi_fadd+0x28e>
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d17e      	bne.n	80004e4 <__aeabi_fadd+0x2c4>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_fadd+0x1cc>
 80003ea:	e0aa      	b.n	8000542 <__aeabi_fadd+0x322>
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_fadd+0x1d2>
 80003f0:	e775      	b.n	80002de <__aeabi_fadd+0xbe>
 80003f2:	002a      	movs	r2, r5
 80003f4:	4452      	add	r2, sl
 80003f6:	2700      	movs	r7, #0
 80003f8:	0153      	lsls	r3, r2, #5
 80003fa:	d502      	bpl.n	8000402 <__aeabi_fadd+0x1e2>
 80003fc:	4b55      	ldr	r3, [pc, #340]	; (8000554 <__aeabi_fadd+0x334>)
 80003fe:	3701      	adds	r7, #1
 8000400:	401a      	ands	r2, r3
 8000402:	0753      	lsls	r3, r2, #29
 8000404:	d000      	beq.n	8000408 <__aeabi_fadd+0x1e8>
 8000406:	e75a      	b.n	80002be <__aeabi_fadd+0x9e>
 8000408:	08d2      	lsrs	r2, r2, #3
 800040a:	e7df      	b.n	80003cc <__aeabi_fadd+0x1ac>
 800040c:	2200      	movs	r2, #0
 800040e:	23ff      	movs	r3, #255	; 0xff
 8000410:	4694      	mov	ip, r2
 8000412:	e764      	b.n	80002de <__aeabi_fadd+0xbe>
 8000414:	2900      	cmp	r1, #0
 8000416:	d0e0      	beq.n	80003da <__aeabi_fadd+0x1ba>
 8000418:	1bf3      	subs	r3, r6, r7
 800041a:	2f00      	cmp	r7, #0
 800041c:	d03e      	beq.n	800049c <__aeabi_fadd+0x27c>
 800041e:	2eff      	cmp	r6, #255	; 0xff
 8000420:	d100      	bne.n	8000424 <__aeabi_fadd+0x204>
 8000422:	e777      	b.n	8000314 <__aeabi_fadd+0xf4>
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0001      	movs	r1, r0
 8000428:	04d2      	lsls	r2, r2, #19
 800042a:	4311      	orrs	r1, r2
 800042c:	468a      	mov	sl, r1
 800042e:	2201      	movs	r2, #1
 8000430:	2b1b      	cmp	r3, #27
 8000432:	dc08      	bgt.n	8000446 <__aeabi_fadd+0x226>
 8000434:	4652      	mov	r2, sl
 8000436:	2120      	movs	r1, #32
 8000438:	4650      	mov	r0, sl
 800043a:	40da      	lsrs	r2, r3
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	4098      	lsls	r0, r3
 8000440:	1e43      	subs	r3, r0, #1
 8000442:	4198      	sbcs	r0, r3
 8000444:	4302      	orrs	r2, r0
 8000446:	0037      	movs	r7, r6
 8000448:	1952      	adds	r2, r2, r5
 800044a:	e784      	b.n	8000356 <__aeabi_fadd+0x136>
 800044c:	4a41      	ldr	r2, [pc, #260]	; (8000554 <__aeabi_fadd+0x334>)
 800044e:	1a3f      	subs	r7, r7, r0
 8000450:	4032      	ands	r2, r6
 8000452:	e732      	b.n	80002ba <__aeabi_fadd+0x9a>
 8000454:	4653      	mov	r3, sl
 8000456:	1b5e      	subs	r6, r3, r5
 8000458:	0173      	lsls	r3, r6, #5
 800045a:	d42d      	bmi.n	80004b8 <__aeabi_fadd+0x298>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x242>
 8000460:	e717      	b.n	8000292 <__aeabi_fadd+0x72>
 8000462:	2200      	movs	r2, #0
 8000464:	2400      	movs	r4, #0
 8000466:	2300      	movs	r3, #0
 8000468:	4694      	mov	ip, r2
 800046a:	e738      	b.n	80002de <__aeabi_fadd+0xbe>
 800046c:	2eff      	cmp	r6, #255	; 0xff
 800046e:	d100      	bne.n	8000472 <__aeabi_fadd+0x252>
 8000470:	e74f      	b.n	8000312 <__aeabi_fadd+0xf2>
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	4650      	mov	r0, sl
 8000476:	04d2      	lsls	r2, r2, #19
 8000478:	4310      	orrs	r0, r2
 800047a:	4682      	mov	sl, r0
 800047c:	2201      	movs	r2, #1
 800047e:	2b1b      	cmp	r3, #27
 8000480:	dc08      	bgt.n	8000494 <__aeabi_fadd+0x274>
 8000482:	4652      	mov	r2, sl
 8000484:	2420      	movs	r4, #32
 8000486:	4650      	mov	r0, sl
 8000488:	40da      	lsrs	r2, r3
 800048a:	1ae3      	subs	r3, r4, r3
 800048c:	4098      	lsls	r0, r3
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4302      	orrs	r2, r0
 8000494:	000c      	movs	r4, r1
 8000496:	0037      	movs	r7, r6
 8000498:	1aaa      	subs	r2, r5, r2
 800049a:	e6f5      	b.n	8000288 <__aeabi_fadd+0x68>
 800049c:	2800      	cmp	r0, #0
 800049e:	d093      	beq.n	80003c8 <__aeabi_fadd+0x1a8>
 80004a0:	3b01      	subs	r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d04f      	beq.n	8000546 <__aeabi_fadd+0x326>
 80004a6:	2eff      	cmp	r6, #255	; 0xff
 80004a8:	d1c1      	bne.n	800042e <__aeabi_fadd+0x20e>
 80004aa:	4642      	mov	r2, r8
 80004ac:	e733      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004ae:	2fff      	cmp	r7, #255	; 0xff
 80004b0:	d0ac      	beq.n	800040c <__aeabi_fadd+0x1ec>
 80004b2:	4455      	add	r5, sl
 80004b4:	086a      	lsrs	r2, r5, #1
 80004b6:	e7a4      	b.n	8000402 <__aeabi_fadd+0x1e2>
 80004b8:	4653      	mov	r3, sl
 80004ba:	000c      	movs	r4, r1
 80004bc:	1aee      	subs	r6, r5, r3
 80004be:	e6e8      	b.n	8000292 <__aeabi_fadd+0x72>
 80004c0:	4653      	mov	r3, sl
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d128      	bne.n	8000518 <__aeabi_fadd+0x2f8>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x2ac>
 80004ca:	e722      	b.n	8000312 <__aeabi_fadd+0xf2>
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	03db      	lsls	r3, r3, #15
 80004d0:	469c      	mov	ip, r3
 80004d2:	2400      	movs	r4, #0
 80004d4:	23ff      	movs	r3, #255	; 0xff
 80004d6:	e702      	b.n	80002de <__aeabi_fadd+0xbe>
 80004d8:	002a      	movs	r2, r5
 80004da:	4452      	add	r2, sl
 80004dc:	e73b      	b.n	8000356 <__aeabi_fadd+0x136>
 80004de:	4653      	mov	r3, sl
 80004e0:	1b5a      	subs	r2, r3, r5
 80004e2:	e6d1      	b.n	8000288 <__aeabi_fadd+0x68>
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x2ca>
 80004e8:	e714      	b.n	8000314 <__aeabi_fadd+0xf4>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x2d0>
 80004ee:	e712      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	03db      	lsls	r3, r3, #15
 80004f4:	421a      	tst	r2, r3
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x2da>
 80004f8:	e70d      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004fa:	4641      	mov	r1, r8
 80004fc:	4219      	tst	r1, r3
 80004fe:	d000      	beq.n	8000502 <__aeabi_fadd+0x2e2>
 8000500:	e709      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000502:	4642      	mov	r2, r8
 8000504:	e707      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000506:	000c      	movs	r4, r1
 8000508:	0037      	movs	r7, r6
 800050a:	1aaa      	subs	r2, r5, r2
 800050c:	e6bc      	b.n	8000288 <__aeabi_fadd+0x68>
 800050e:	2d00      	cmp	r5, #0
 8000510:	d013      	beq.n	800053a <__aeabi_fadd+0x31a>
 8000512:	000c      	movs	r4, r1
 8000514:	46c4      	mov	ip, r8
 8000516:	e6e2      	b.n	80002de <__aeabi_fadd+0xbe>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x2fe>
 800051c:	e6fb      	b.n	8000316 <__aeabi_fadd+0xf6>
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	03db      	lsls	r3, r3, #15
 8000522:	421a      	tst	r2, r3
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x308>
 8000526:	e6f6      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000528:	4640      	mov	r0, r8
 800052a:	4218      	tst	r0, r3
 800052c:	d000      	beq.n	8000530 <__aeabi_fadd+0x310>
 800052e:	e6f2      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000530:	000c      	movs	r4, r1
 8000532:	e6ef      	b.n	8000314 <__aeabi_fadd+0xf4>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0x31a>
 8000538:	e763      	b.n	8000402 <__aeabi_fadd+0x1e2>
 800053a:	2200      	movs	r2, #0
 800053c:	2400      	movs	r4, #0
 800053e:	4694      	mov	ip, r2
 8000540:	e6cd      	b.n	80002de <__aeabi_fadd+0xbe>
 8000542:	46c4      	mov	ip, r8
 8000544:	e6cb      	b.n	80002de <__aeabi_fadd+0xbe>
 8000546:	002a      	movs	r2, r5
 8000548:	0037      	movs	r7, r6
 800054a:	4452      	add	r2, sl
 800054c:	e703      	b.n	8000356 <__aeabi_fadd+0x136>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	7dffffff 	.word	0x7dffffff
 8000554:	fbffffff 	.word	0xfbffffff

08000558 <__aeabi_fdiv>:
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	464f      	mov	r7, r9
 800055c:	4646      	mov	r6, r8
 800055e:	46d6      	mov	lr, sl
 8000560:	0245      	lsls	r5, r0, #9
 8000562:	b5c0      	push	{r6, r7, lr}
 8000564:	0047      	lsls	r7, r0, #1
 8000566:	1c0c      	adds	r4, r1, #0
 8000568:	0a6d      	lsrs	r5, r5, #9
 800056a:	0e3f      	lsrs	r7, r7, #24
 800056c:	0fc6      	lsrs	r6, r0, #31
 800056e:	2f00      	cmp	r7, #0
 8000570:	d066      	beq.n	8000640 <__aeabi_fdiv+0xe8>
 8000572:	2fff      	cmp	r7, #255	; 0xff
 8000574:	d06c      	beq.n	8000650 <__aeabi_fdiv+0xf8>
 8000576:	2300      	movs	r3, #0
 8000578:	00ea      	lsls	r2, r5, #3
 800057a:	2580      	movs	r5, #128	; 0x80
 800057c:	4699      	mov	r9, r3
 800057e:	469a      	mov	sl, r3
 8000580:	04ed      	lsls	r5, r5, #19
 8000582:	4315      	orrs	r5, r2
 8000584:	3f7f      	subs	r7, #127	; 0x7f
 8000586:	0260      	lsls	r0, r4, #9
 8000588:	0061      	lsls	r1, r4, #1
 800058a:	0a43      	lsrs	r3, r0, #9
 800058c:	4698      	mov	r8, r3
 800058e:	0e09      	lsrs	r1, r1, #24
 8000590:	0fe4      	lsrs	r4, r4, #31
 8000592:	2900      	cmp	r1, #0
 8000594:	d048      	beq.n	8000628 <__aeabi_fdiv+0xd0>
 8000596:	29ff      	cmp	r1, #255	; 0xff
 8000598:	d010      	beq.n	80005bc <__aeabi_fdiv+0x64>
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	00d8      	lsls	r0, r3, #3
 800059e:	04d2      	lsls	r2, r2, #19
 80005a0:	4302      	orrs	r2, r0
 80005a2:	4690      	mov	r8, r2
 80005a4:	2000      	movs	r0, #0
 80005a6:	397f      	subs	r1, #127	; 0x7f
 80005a8:	464a      	mov	r2, r9
 80005aa:	0033      	movs	r3, r6
 80005ac:	1a7f      	subs	r7, r7, r1
 80005ae:	4302      	orrs	r2, r0
 80005b0:	496c      	ldr	r1, [pc, #432]	; (8000764 <__aeabi_fdiv+0x20c>)
 80005b2:	0092      	lsls	r2, r2, #2
 80005b4:	588a      	ldr	r2, [r1, r2]
 80005b6:	4063      	eors	r3, r4
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4697      	mov	pc, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d16d      	bne.n	800069c <__aeabi_fdiv+0x144>
 80005c0:	2002      	movs	r0, #2
 80005c2:	3fff      	subs	r7, #255	; 0xff
 80005c4:	e033      	b.n	800062e <__aeabi_fdiv+0xd6>
 80005c6:	2300      	movs	r3, #0
 80005c8:	4698      	mov	r8, r3
 80005ca:	0026      	movs	r6, r4
 80005cc:	4645      	mov	r5, r8
 80005ce:	4682      	mov	sl, r0
 80005d0:	4653      	mov	r3, sl
 80005d2:	2b02      	cmp	r3, #2
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fdiv+0x80>
 80005d6:	e07f      	b.n	80006d8 <__aeabi_fdiv+0x180>
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d100      	bne.n	80005de <__aeabi_fdiv+0x86>
 80005dc:	e094      	b.n	8000708 <__aeabi_fdiv+0x1b0>
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d017      	beq.n	8000612 <__aeabi_fdiv+0xba>
 80005e2:	0038      	movs	r0, r7
 80005e4:	307f      	adds	r0, #127	; 0x7f
 80005e6:	2800      	cmp	r0, #0
 80005e8:	dd5f      	ble.n	80006aa <__aeabi_fdiv+0x152>
 80005ea:	076b      	lsls	r3, r5, #29
 80005ec:	d004      	beq.n	80005f8 <__aeabi_fdiv+0xa0>
 80005ee:	230f      	movs	r3, #15
 80005f0:	402b      	ands	r3, r5
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d000      	beq.n	80005f8 <__aeabi_fdiv+0xa0>
 80005f6:	3504      	adds	r5, #4
 80005f8:	012b      	lsls	r3, r5, #4
 80005fa:	d503      	bpl.n	8000604 <__aeabi_fdiv+0xac>
 80005fc:	0038      	movs	r0, r7
 80005fe:	4b5a      	ldr	r3, [pc, #360]	; (8000768 <__aeabi_fdiv+0x210>)
 8000600:	3080      	adds	r0, #128	; 0x80
 8000602:	401d      	ands	r5, r3
 8000604:	28fe      	cmp	r0, #254	; 0xfe
 8000606:	dc67      	bgt.n	80006d8 <__aeabi_fdiv+0x180>
 8000608:	01ad      	lsls	r5, r5, #6
 800060a:	0a6d      	lsrs	r5, r5, #9
 800060c:	b2c0      	uxtb	r0, r0
 800060e:	e002      	b.n	8000616 <__aeabi_fdiv+0xbe>
 8000610:	001e      	movs	r6, r3
 8000612:	2000      	movs	r0, #0
 8000614:	2500      	movs	r5, #0
 8000616:	05c0      	lsls	r0, r0, #23
 8000618:	4328      	orrs	r0, r5
 800061a:	07f6      	lsls	r6, r6, #31
 800061c:	4330      	orrs	r0, r6
 800061e:	bce0      	pop	{r5, r6, r7}
 8000620:	46ba      	mov	sl, r7
 8000622:	46b1      	mov	r9, r6
 8000624:	46a8      	mov	r8, r5
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	2b00      	cmp	r3, #0
 800062a:	d12b      	bne.n	8000684 <__aeabi_fdiv+0x12c>
 800062c:	2001      	movs	r0, #1
 800062e:	464a      	mov	r2, r9
 8000630:	0033      	movs	r3, r6
 8000632:	494e      	ldr	r1, [pc, #312]	; (800076c <__aeabi_fdiv+0x214>)
 8000634:	4302      	orrs	r2, r0
 8000636:	0092      	lsls	r2, r2, #2
 8000638:	588a      	ldr	r2, [r1, r2]
 800063a:	4063      	eors	r3, r4
 800063c:	b2db      	uxtb	r3, r3
 800063e:	4697      	mov	pc, r2
 8000640:	2d00      	cmp	r5, #0
 8000642:	d113      	bne.n	800066c <__aeabi_fdiv+0x114>
 8000644:	2304      	movs	r3, #4
 8000646:	4699      	mov	r9, r3
 8000648:	3b03      	subs	r3, #3
 800064a:	2700      	movs	r7, #0
 800064c:	469a      	mov	sl, r3
 800064e:	e79a      	b.n	8000586 <__aeabi_fdiv+0x2e>
 8000650:	2d00      	cmp	r5, #0
 8000652:	d105      	bne.n	8000660 <__aeabi_fdiv+0x108>
 8000654:	2308      	movs	r3, #8
 8000656:	4699      	mov	r9, r3
 8000658:	3b06      	subs	r3, #6
 800065a:	27ff      	movs	r7, #255	; 0xff
 800065c:	469a      	mov	sl, r3
 800065e:	e792      	b.n	8000586 <__aeabi_fdiv+0x2e>
 8000660:	230c      	movs	r3, #12
 8000662:	4699      	mov	r9, r3
 8000664:	3b09      	subs	r3, #9
 8000666:	27ff      	movs	r7, #255	; 0xff
 8000668:	469a      	mov	sl, r3
 800066a:	e78c      	b.n	8000586 <__aeabi_fdiv+0x2e>
 800066c:	0028      	movs	r0, r5
 800066e:	f000 f9df 	bl	8000a30 <__clzsi2>
 8000672:	2776      	movs	r7, #118	; 0x76
 8000674:	1f43      	subs	r3, r0, #5
 8000676:	409d      	lsls	r5, r3
 8000678:	2300      	movs	r3, #0
 800067a:	427f      	negs	r7, r7
 800067c:	4699      	mov	r9, r3
 800067e:	469a      	mov	sl, r3
 8000680:	1a3f      	subs	r7, r7, r0
 8000682:	e780      	b.n	8000586 <__aeabi_fdiv+0x2e>
 8000684:	0018      	movs	r0, r3
 8000686:	f000 f9d3 	bl	8000a30 <__clzsi2>
 800068a:	4642      	mov	r2, r8
 800068c:	1f43      	subs	r3, r0, #5
 800068e:	2176      	movs	r1, #118	; 0x76
 8000690:	409a      	lsls	r2, r3
 8000692:	4249      	negs	r1, r1
 8000694:	1a09      	subs	r1, r1, r0
 8000696:	4690      	mov	r8, r2
 8000698:	2000      	movs	r0, #0
 800069a:	e785      	b.n	80005a8 <__aeabi_fdiv+0x50>
 800069c:	21ff      	movs	r1, #255	; 0xff
 800069e:	2003      	movs	r0, #3
 80006a0:	e782      	b.n	80005a8 <__aeabi_fdiv+0x50>
 80006a2:	001e      	movs	r6, r3
 80006a4:	20ff      	movs	r0, #255	; 0xff
 80006a6:	2500      	movs	r5, #0
 80006a8:	e7b5      	b.n	8000616 <__aeabi_fdiv+0xbe>
 80006aa:	2301      	movs	r3, #1
 80006ac:	1a1b      	subs	r3, r3, r0
 80006ae:	2b1b      	cmp	r3, #27
 80006b0:	dcaf      	bgt.n	8000612 <__aeabi_fdiv+0xba>
 80006b2:	379e      	adds	r7, #158	; 0x9e
 80006b4:	0029      	movs	r1, r5
 80006b6:	40bd      	lsls	r5, r7
 80006b8:	40d9      	lsrs	r1, r3
 80006ba:	1e6a      	subs	r2, r5, #1
 80006bc:	4195      	sbcs	r5, r2
 80006be:	430d      	orrs	r5, r1
 80006c0:	076b      	lsls	r3, r5, #29
 80006c2:	d004      	beq.n	80006ce <__aeabi_fdiv+0x176>
 80006c4:	230f      	movs	r3, #15
 80006c6:	402b      	ands	r3, r5
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d000      	beq.n	80006ce <__aeabi_fdiv+0x176>
 80006cc:	3504      	adds	r5, #4
 80006ce:	016b      	lsls	r3, r5, #5
 80006d0:	d544      	bpl.n	800075c <__aeabi_fdiv+0x204>
 80006d2:	2001      	movs	r0, #1
 80006d4:	2500      	movs	r5, #0
 80006d6:	e79e      	b.n	8000616 <__aeabi_fdiv+0xbe>
 80006d8:	20ff      	movs	r0, #255	; 0xff
 80006da:	2500      	movs	r5, #0
 80006dc:	e79b      	b.n	8000616 <__aeabi_fdiv+0xbe>
 80006de:	2580      	movs	r5, #128	; 0x80
 80006e0:	2600      	movs	r6, #0
 80006e2:	20ff      	movs	r0, #255	; 0xff
 80006e4:	03ed      	lsls	r5, r5, #15
 80006e6:	e796      	b.n	8000616 <__aeabi_fdiv+0xbe>
 80006e8:	2300      	movs	r3, #0
 80006ea:	4698      	mov	r8, r3
 80006ec:	2080      	movs	r0, #128	; 0x80
 80006ee:	03c0      	lsls	r0, r0, #15
 80006f0:	4205      	tst	r5, r0
 80006f2:	d009      	beq.n	8000708 <__aeabi_fdiv+0x1b0>
 80006f4:	4643      	mov	r3, r8
 80006f6:	4203      	tst	r3, r0
 80006f8:	d106      	bne.n	8000708 <__aeabi_fdiv+0x1b0>
 80006fa:	4645      	mov	r5, r8
 80006fc:	4305      	orrs	r5, r0
 80006fe:	026d      	lsls	r5, r5, #9
 8000700:	0026      	movs	r6, r4
 8000702:	20ff      	movs	r0, #255	; 0xff
 8000704:	0a6d      	lsrs	r5, r5, #9
 8000706:	e786      	b.n	8000616 <__aeabi_fdiv+0xbe>
 8000708:	2080      	movs	r0, #128	; 0x80
 800070a:	03c0      	lsls	r0, r0, #15
 800070c:	4305      	orrs	r5, r0
 800070e:	026d      	lsls	r5, r5, #9
 8000710:	20ff      	movs	r0, #255	; 0xff
 8000712:	0a6d      	lsrs	r5, r5, #9
 8000714:	e77f      	b.n	8000616 <__aeabi_fdiv+0xbe>
 8000716:	4641      	mov	r1, r8
 8000718:	016a      	lsls	r2, r5, #5
 800071a:	0148      	lsls	r0, r1, #5
 800071c:	4282      	cmp	r2, r0
 800071e:	d219      	bcs.n	8000754 <__aeabi_fdiv+0x1fc>
 8000720:	211b      	movs	r1, #27
 8000722:	2500      	movs	r5, #0
 8000724:	3f01      	subs	r7, #1
 8000726:	2601      	movs	r6, #1
 8000728:	0014      	movs	r4, r2
 800072a:	006d      	lsls	r5, r5, #1
 800072c:	0052      	lsls	r2, r2, #1
 800072e:	2c00      	cmp	r4, #0
 8000730:	db01      	blt.n	8000736 <__aeabi_fdiv+0x1de>
 8000732:	4290      	cmp	r0, r2
 8000734:	d801      	bhi.n	800073a <__aeabi_fdiv+0x1e2>
 8000736:	1a12      	subs	r2, r2, r0
 8000738:	4335      	orrs	r5, r6
 800073a:	3901      	subs	r1, #1
 800073c:	2900      	cmp	r1, #0
 800073e:	d1f3      	bne.n	8000728 <__aeabi_fdiv+0x1d0>
 8000740:	1e50      	subs	r0, r2, #1
 8000742:	4182      	sbcs	r2, r0
 8000744:	0038      	movs	r0, r7
 8000746:	307f      	adds	r0, #127	; 0x7f
 8000748:	001e      	movs	r6, r3
 800074a:	4315      	orrs	r5, r2
 800074c:	2800      	cmp	r0, #0
 800074e:	dd00      	ble.n	8000752 <__aeabi_fdiv+0x1fa>
 8000750:	e74b      	b.n	80005ea <__aeabi_fdiv+0x92>
 8000752:	e7aa      	b.n	80006aa <__aeabi_fdiv+0x152>
 8000754:	211a      	movs	r1, #26
 8000756:	2501      	movs	r5, #1
 8000758:	1a12      	subs	r2, r2, r0
 800075a:	e7e4      	b.n	8000726 <__aeabi_fdiv+0x1ce>
 800075c:	01ad      	lsls	r5, r5, #6
 800075e:	2000      	movs	r0, #0
 8000760:	0a6d      	lsrs	r5, r5, #9
 8000762:	e758      	b.n	8000616 <__aeabi_fdiv+0xbe>
 8000764:	0800251c 	.word	0x0800251c
 8000768:	f7ffffff 	.word	0xf7ffffff
 800076c:	0800255c 	.word	0x0800255c

08000770 <__aeabi_fmul>:
 8000770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000772:	4657      	mov	r7, sl
 8000774:	464e      	mov	r6, r9
 8000776:	4645      	mov	r5, r8
 8000778:	46de      	mov	lr, fp
 800077a:	0244      	lsls	r4, r0, #9
 800077c:	b5e0      	push	{r5, r6, r7, lr}
 800077e:	0045      	lsls	r5, r0, #1
 8000780:	1c0f      	adds	r7, r1, #0
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	0e2d      	lsrs	r5, r5, #24
 8000786:	0fc6      	lsrs	r6, r0, #31
 8000788:	2d00      	cmp	r5, #0
 800078a:	d047      	beq.n	800081c <__aeabi_fmul+0xac>
 800078c:	2dff      	cmp	r5, #255	; 0xff
 800078e:	d04d      	beq.n	800082c <__aeabi_fmul+0xbc>
 8000790:	2300      	movs	r3, #0
 8000792:	2080      	movs	r0, #128	; 0x80
 8000794:	469a      	mov	sl, r3
 8000796:	469b      	mov	fp, r3
 8000798:	00e4      	lsls	r4, r4, #3
 800079a:	04c0      	lsls	r0, r0, #19
 800079c:	4304      	orrs	r4, r0
 800079e:	3d7f      	subs	r5, #127	; 0x7f
 80007a0:	0278      	lsls	r0, r7, #9
 80007a2:	0a43      	lsrs	r3, r0, #9
 80007a4:	4699      	mov	r9, r3
 80007a6:	007a      	lsls	r2, r7, #1
 80007a8:	0ffb      	lsrs	r3, r7, #31
 80007aa:	4698      	mov	r8, r3
 80007ac:	0e12      	lsrs	r2, r2, #24
 80007ae:	464b      	mov	r3, r9
 80007b0:	d044      	beq.n	800083c <__aeabi_fmul+0xcc>
 80007b2:	2aff      	cmp	r2, #255	; 0xff
 80007b4:	d011      	beq.n	80007da <__aeabi_fmul+0x6a>
 80007b6:	00d8      	lsls	r0, r3, #3
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	04db      	lsls	r3, r3, #19
 80007bc:	4303      	orrs	r3, r0
 80007be:	4699      	mov	r9, r3
 80007c0:	2000      	movs	r0, #0
 80007c2:	3a7f      	subs	r2, #127	; 0x7f
 80007c4:	18ad      	adds	r5, r5, r2
 80007c6:	4647      	mov	r7, r8
 80007c8:	4653      	mov	r3, sl
 80007ca:	4077      	eors	r7, r6
 80007cc:	1c69      	adds	r1, r5, #1
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	d83f      	bhi.n	8000852 <__aeabi_fmul+0xe2>
 80007d2:	4a72      	ldr	r2, [pc, #456]	; (800099c <__aeabi_fmul+0x22c>)
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	58d3      	ldr	r3, [r2, r3]
 80007d8:	469f      	mov	pc, r3
 80007da:	35ff      	adds	r5, #255	; 0xff
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d000      	beq.n	80007e2 <__aeabi_fmul+0x72>
 80007e0:	e079      	b.n	80008d6 <__aeabi_fmul+0x166>
 80007e2:	4652      	mov	r2, sl
 80007e4:	2302      	movs	r3, #2
 80007e6:	431a      	orrs	r2, r3
 80007e8:	4692      	mov	sl, r2
 80007ea:	2002      	movs	r0, #2
 80007ec:	e7eb      	b.n	80007c6 <__aeabi_fmul+0x56>
 80007ee:	4647      	mov	r7, r8
 80007f0:	464c      	mov	r4, r9
 80007f2:	4683      	mov	fp, r0
 80007f4:	465b      	mov	r3, fp
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d028      	beq.n	800084c <__aeabi_fmul+0xdc>
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d100      	bne.n	8000800 <__aeabi_fmul+0x90>
 80007fe:	e0c6      	b.n	800098e <__aeabi_fmul+0x21e>
 8000800:	2b01      	cmp	r3, #1
 8000802:	d14f      	bne.n	80008a4 <__aeabi_fmul+0x134>
 8000804:	2000      	movs	r0, #0
 8000806:	2400      	movs	r4, #0
 8000808:	05c0      	lsls	r0, r0, #23
 800080a:	07ff      	lsls	r7, r7, #31
 800080c:	4320      	orrs	r0, r4
 800080e:	4338      	orrs	r0, r7
 8000810:	bcf0      	pop	{r4, r5, r6, r7}
 8000812:	46bb      	mov	fp, r7
 8000814:	46b2      	mov	sl, r6
 8000816:	46a9      	mov	r9, r5
 8000818:	46a0      	mov	r8, r4
 800081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081c:	2c00      	cmp	r4, #0
 800081e:	d171      	bne.n	8000904 <__aeabi_fmul+0x194>
 8000820:	2304      	movs	r3, #4
 8000822:	469a      	mov	sl, r3
 8000824:	3b03      	subs	r3, #3
 8000826:	2500      	movs	r5, #0
 8000828:	469b      	mov	fp, r3
 800082a:	e7b9      	b.n	80007a0 <__aeabi_fmul+0x30>
 800082c:	2c00      	cmp	r4, #0
 800082e:	d163      	bne.n	80008f8 <__aeabi_fmul+0x188>
 8000830:	2308      	movs	r3, #8
 8000832:	469a      	mov	sl, r3
 8000834:	3b06      	subs	r3, #6
 8000836:	25ff      	movs	r5, #255	; 0xff
 8000838:	469b      	mov	fp, r3
 800083a:	e7b1      	b.n	80007a0 <__aeabi_fmul+0x30>
 800083c:	2b00      	cmp	r3, #0
 800083e:	d150      	bne.n	80008e2 <__aeabi_fmul+0x172>
 8000840:	4652      	mov	r2, sl
 8000842:	3301      	adds	r3, #1
 8000844:	431a      	orrs	r2, r3
 8000846:	4692      	mov	sl, r2
 8000848:	2001      	movs	r0, #1
 800084a:	e7bc      	b.n	80007c6 <__aeabi_fmul+0x56>
 800084c:	20ff      	movs	r0, #255	; 0xff
 800084e:	2400      	movs	r4, #0
 8000850:	e7da      	b.n	8000808 <__aeabi_fmul+0x98>
 8000852:	4648      	mov	r0, r9
 8000854:	0c26      	lsrs	r6, r4, #16
 8000856:	0424      	lsls	r4, r4, #16
 8000858:	0c22      	lsrs	r2, r4, #16
 800085a:	0404      	lsls	r4, r0, #16
 800085c:	0c24      	lsrs	r4, r4, #16
 800085e:	464b      	mov	r3, r9
 8000860:	0020      	movs	r0, r4
 8000862:	0c1b      	lsrs	r3, r3, #16
 8000864:	4350      	muls	r0, r2
 8000866:	4374      	muls	r4, r6
 8000868:	435a      	muls	r2, r3
 800086a:	435e      	muls	r6, r3
 800086c:	1912      	adds	r2, r2, r4
 800086e:	0c03      	lsrs	r3, r0, #16
 8000870:	189b      	adds	r3, r3, r2
 8000872:	429c      	cmp	r4, r3
 8000874:	d903      	bls.n	800087e <__aeabi_fmul+0x10e>
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	0252      	lsls	r2, r2, #9
 800087a:	4694      	mov	ip, r2
 800087c:	4466      	add	r6, ip
 800087e:	0400      	lsls	r0, r0, #16
 8000880:	041a      	lsls	r2, r3, #16
 8000882:	0c00      	lsrs	r0, r0, #16
 8000884:	1812      	adds	r2, r2, r0
 8000886:	0194      	lsls	r4, r2, #6
 8000888:	1e60      	subs	r0, r4, #1
 800088a:	4184      	sbcs	r4, r0
 800088c:	0c1b      	lsrs	r3, r3, #16
 800088e:	0e92      	lsrs	r2, r2, #26
 8000890:	199b      	adds	r3, r3, r6
 8000892:	4314      	orrs	r4, r2
 8000894:	019b      	lsls	r3, r3, #6
 8000896:	431c      	orrs	r4, r3
 8000898:	011b      	lsls	r3, r3, #4
 800089a:	d572      	bpl.n	8000982 <__aeabi_fmul+0x212>
 800089c:	2001      	movs	r0, #1
 800089e:	0863      	lsrs	r3, r4, #1
 80008a0:	4004      	ands	r4, r0
 80008a2:	431c      	orrs	r4, r3
 80008a4:	0008      	movs	r0, r1
 80008a6:	307f      	adds	r0, #127	; 0x7f
 80008a8:	2800      	cmp	r0, #0
 80008aa:	dd3c      	ble.n	8000926 <__aeabi_fmul+0x1b6>
 80008ac:	0763      	lsls	r3, r4, #29
 80008ae:	d004      	beq.n	80008ba <__aeabi_fmul+0x14a>
 80008b0:	230f      	movs	r3, #15
 80008b2:	4023      	ands	r3, r4
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d000      	beq.n	80008ba <__aeabi_fmul+0x14a>
 80008b8:	3404      	adds	r4, #4
 80008ba:	0123      	lsls	r3, r4, #4
 80008bc:	d503      	bpl.n	80008c6 <__aeabi_fmul+0x156>
 80008be:	3180      	adds	r1, #128	; 0x80
 80008c0:	0008      	movs	r0, r1
 80008c2:	4b37      	ldr	r3, [pc, #220]	; (80009a0 <__aeabi_fmul+0x230>)
 80008c4:	401c      	ands	r4, r3
 80008c6:	28fe      	cmp	r0, #254	; 0xfe
 80008c8:	dcc0      	bgt.n	800084c <__aeabi_fmul+0xdc>
 80008ca:	01a4      	lsls	r4, r4, #6
 80008cc:	0a64      	lsrs	r4, r4, #9
 80008ce:	b2c0      	uxtb	r0, r0
 80008d0:	e79a      	b.n	8000808 <__aeabi_fmul+0x98>
 80008d2:	0037      	movs	r7, r6
 80008d4:	e78e      	b.n	80007f4 <__aeabi_fmul+0x84>
 80008d6:	4652      	mov	r2, sl
 80008d8:	2303      	movs	r3, #3
 80008da:	431a      	orrs	r2, r3
 80008dc:	4692      	mov	sl, r2
 80008de:	2003      	movs	r0, #3
 80008e0:	e771      	b.n	80007c6 <__aeabi_fmul+0x56>
 80008e2:	4648      	mov	r0, r9
 80008e4:	f000 f8a4 	bl	8000a30 <__clzsi2>
 80008e8:	464a      	mov	r2, r9
 80008ea:	1f43      	subs	r3, r0, #5
 80008ec:	409a      	lsls	r2, r3
 80008ee:	1a2d      	subs	r5, r5, r0
 80008f0:	4691      	mov	r9, r2
 80008f2:	2000      	movs	r0, #0
 80008f4:	3d76      	subs	r5, #118	; 0x76
 80008f6:	e766      	b.n	80007c6 <__aeabi_fmul+0x56>
 80008f8:	230c      	movs	r3, #12
 80008fa:	469a      	mov	sl, r3
 80008fc:	3b09      	subs	r3, #9
 80008fe:	25ff      	movs	r5, #255	; 0xff
 8000900:	469b      	mov	fp, r3
 8000902:	e74d      	b.n	80007a0 <__aeabi_fmul+0x30>
 8000904:	0020      	movs	r0, r4
 8000906:	f000 f893 	bl	8000a30 <__clzsi2>
 800090a:	2576      	movs	r5, #118	; 0x76
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	409c      	lsls	r4, r3
 8000910:	2300      	movs	r3, #0
 8000912:	426d      	negs	r5, r5
 8000914:	469a      	mov	sl, r3
 8000916:	469b      	mov	fp, r3
 8000918:	1a2d      	subs	r5, r5, r0
 800091a:	e741      	b.n	80007a0 <__aeabi_fmul+0x30>
 800091c:	2480      	movs	r4, #128	; 0x80
 800091e:	2700      	movs	r7, #0
 8000920:	20ff      	movs	r0, #255	; 0xff
 8000922:	03e4      	lsls	r4, r4, #15
 8000924:	e770      	b.n	8000808 <__aeabi_fmul+0x98>
 8000926:	2301      	movs	r3, #1
 8000928:	1a1b      	subs	r3, r3, r0
 800092a:	2b1b      	cmp	r3, #27
 800092c:	dd00      	ble.n	8000930 <__aeabi_fmul+0x1c0>
 800092e:	e769      	b.n	8000804 <__aeabi_fmul+0x94>
 8000930:	319e      	adds	r1, #158	; 0x9e
 8000932:	0020      	movs	r0, r4
 8000934:	408c      	lsls	r4, r1
 8000936:	40d8      	lsrs	r0, r3
 8000938:	1e63      	subs	r3, r4, #1
 800093a:	419c      	sbcs	r4, r3
 800093c:	4304      	orrs	r4, r0
 800093e:	0763      	lsls	r3, r4, #29
 8000940:	d004      	beq.n	800094c <__aeabi_fmul+0x1dc>
 8000942:	230f      	movs	r3, #15
 8000944:	4023      	ands	r3, r4
 8000946:	2b04      	cmp	r3, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fmul+0x1dc>
 800094a:	3404      	adds	r4, #4
 800094c:	0163      	lsls	r3, r4, #5
 800094e:	d51a      	bpl.n	8000986 <__aeabi_fmul+0x216>
 8000950:	2001      	movs	r0, #1
 8000952:	2400      	movs	r4, #0
 8000954:	e758      	b.n	8000808 <__aeabi_fmul+0x98>
 8000956:	2080      	movs	r0, #128	; 0x80
 8000958:	03c0      	lsls	r0, r0, #15
 800095a:	4204      	tst	r4, r0
 800095c:	d009      	beq.n	8000972 <__aeabi_fmul+0x202>
 800095e:	464b      	mov	r3, r9
 8000960:	4203      	tst	r3, r0
 8000962:	d106      	bne.n	8000972 <__aeabi_fmul+0x202>
 8000964:	464c      	mov	r4, r9
 8000966:	4304      	orrs	r4, r0
 8000968:	0264      	lsls	r4, r4, #9
 800096a:	4647      	mov	r7, r8
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	0a64      	lsrs	r4, r4, #9
 8000970:	e74a      	b.n	8000808 <__aeabi_fmul+0x98>
 8000972:	2080      	movs	r0, #128	; 0x80
 8000974:	03c0      	lsls	r0, r0, #15
 8000976:	4304      	orrs	r4, r0
 8000978:	0264      	lsls	r4, r4, #9
 800097a:	0037      	movs	r7, r6
 800097c:	20ff      	movs	r0, #255	; 0xff
 800097e:	0a64      	lsrs	r4, r4, #9
 8000980:	e742      	b.n	8000808 <__aeabi_fmul+0x98>
 8000982:	0029      	movs	r1, r5
 8000984:	e78e      	b.n	80008a4 <__aeabi_fmul+0x134>
 8000986:	01a4      	lsls	r4, r4, #6
 8000988:	2000      	movs	r0, #0
 800098a:	0a64      	lsrs	r4, r4, #9
 800098c:	e73c      	b.n	8000808 <__aeabi_fmul+0x98>
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	03c0      	lsls	r0, r0, #15
 8000992:	4304      	orrs	r4, r0
 8000994:	0264      	lsls	r4, r4, #9
 8000996:	20ff      	movs	r0, #255	; 0xff
 8000998:	0a64      	lsrs	r4, r4, #9
 800099a:	e735      	b.n	8000808 <__aeabi_fmul+0x98>
 800099c:	0800259c 	.word	0x0800259c
 80009a0:	f7ffffff 	.word	0xf7ffffff

080009a4 <__aeabi_i2f>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d013      	beq.n	80009d2 <__aeabi_i2f+0x2e>
 80009aa:	17c3      	asrs	r3, r0, #31
 80009ac:	18c5      	adds	r5, r0, r3
 80009ae:	405d      	eors	r5, r3
 80009b0:	0fc4      	lsrs	r4, r0, #31
 80009b2:	0028      	movs	r0, r5
 80009b4:	f000 f83c 	bl	8000a30 <__clzsi2>
 80009b8:	239e      	movs	r3, #158	; 0x9e
 80009ba:	0001      	movs	r1, r0
 80009bc:	1a1b      	subs	r3, r3, r0
 80009be:	2b96      	cmp	r3, #150	; 0x96
 80009c0:	dc0f      	bgt.n	80009e2 <__aeabi_i2f+0x3e>
 80009c2:	2808      	cmp	r0, #8
 80009c4:	dd01      	ble.n	80009ca <__aeabi_i2f+0x26>
 80009c6:	3908      	subs	r1, #8
 80009c8:	408d      	lsls	r5, r1
 80009ca:	026d      	lsls	r5, r5, #9
 80009cc:	0a6d      	lsrs	r5, r5, #9
 80009ce:	b2d8      	uxtb	r0, r3
 80009d0:	e002      	b.n	80009d8 <__aeabi_i2f+0x34>
 80009d2:	2400      	movs	r4, #0
 80009d4:	2000      	movs	r0, #0
 80009d6:	2500      	movs	r5, #0
 80009d8:	05c0      	lsls	r0, r0, #23
 80009da:	4328      	orrs	r0, r5
 80009dc:	07e4      	lsls	r4, r4, #31
 80009de:	4320      	orrs	r0, r4
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	2b99      	cmp	r3, #153	; 0x99
 80009e4:	dd0b      	ble.n	80009fe <__aeabi_i2f+0x5a>
 80009e6:	2205      	movs	r2, #5
 80009e8:	002e      	movs	r6, r5
 80009ea:	1a12      	subs	r2, r2, r0
 80009ec:	40d6      	lsrs	r6, r2
 80009ee:	0002      	movs	r2, r0
 80009f0:	321b      	adds	r2, #27
 80009f2:	4095      	lsls	r5, r2
 80009f4:	0028      	movs	r0, r5
 80009f6:	1e45      	subs	r5, r0, #1
 80009f8:	41a8      	sbcs	r0, r5
 80009fa:	0035      	movs	r5, r6
 80009fc:	4305      	orrs	r5, r0
 80009fe:	2905      	cmp	r1, #5
 8000a00:	dd01      	ble.n	8000a06 <__aeabi_i2f+0x62>
 8000a02:	1f4a      	subs	r2, r1, #5
 8000a04:	4095      	lsls	r5, r2
 8000a06:	002a      	movs	r2, r5
 8000a08:	4e08      	ldr	r6, [pc, #32]	; (8000a2c <__aeabi_i2f+0x88>)
 8000a0a:	4032      	ands	r2, r6
 8000a0c:	0768      	lsls	r0, r5, #29
 8000a0e:	d009      	beq.n	8000a24 <__aeabi_i2f+0x80>
 8000a10:	200f      	movs	r0, #15
 8000a12:	4028      	ands	r0, r5
 8000a14:	2804      	cmp	r0, #4
 8000a16:	d005      	beq.n	8000a24 <__aeabi_i2f+0x80>
 8000a18:	3204      	adds	r2, #4
 8000a1a:	0150      	lsls	r0, r2, #5
 8000a1c:	d502      	bpl.n	8000a24 <__aeabi_i2f+0x80>
 8000a1e:	239f      	movs	r3, #159	; 0x9f
 8000a20:	4032      	ands	r2, r6
 8000a22:	1a5b      	subs	r3, r3, r1
 8000a24:	0192      	lsls	r2, r2, #6
 8000a26:	0a55      	lsrs	r5, r2, #9
 8000a28:	b2d8      	uxtb	r0, r3
 8000a2a:	e7d5      	b.n	80009d8 <__aeabi_i2f+0x34>
 8000a2c:	fbffffff 	.word	0xfbffffff

08000a30 <__clzsi2>:
 8000a30:	211c      	movs	r1, #28
 8000a32:	2301      	movs	r3, #1
 8000a34:	041b      	lsls	r3, r3, #16
 8000a36:	4298      	cmp	r0, r3
 8000a38:	d301      	bcc.n	8000a3e <__clzsi2+0xe>
 8000a3a:	0c00      	lsrs	r0, r0, #16
 8000a3c:	3910      	subs	r1, #16
 8000a3e:	0a1b      	lsrs	r3, r3, #8
 8000a40:	4298      	cmp	r0, r3
 8000a42:	d301      	bcc.n	8000a48 <__clzsi2+0x18>
 8000a44:	0a00      	lsrs	r0, r0, #8
 8000a46:	3908      	subs	r1, #8
 8000a48:	091b      	lsrs	r3, r3, #4
 8000a4a:	4298      	cmp	r0, r3
 8000a4c:	d301      	bcc.n	8000a52 <__clzsi2+0x22>
 8000a4e:	0900      	lsrs	r0, r0, #4
 8000a50:	3904      	subs	r1, #4
 8000a52:	a202      	add	r2, pc, #8	; (adr r2, 8000a5c <__clzsi2+0x2c>)
 8000a54:	5c10      	ldrb	r0, [r2, r0]
 8000a56:	1840      	adds	r0, r0, r1
 8000a58:	4770      	bx	lr
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	02020304 	.word	0x02020304
 8000a60:	01010101 	.word	0x01010101
	...

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
//	init_debug();
	init_timer();
 8000a70:	f000 f824 	bl	8000abc <init_timer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a74:	f000 fada 	bl	800102c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a78:	f000 f888 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7c:	f000 f960 	bl	8000d40 <MX_GPIO_Init>
  MX_CAN_Init();
 8000a80:	f000 f8c4 	bl	8000c0c <MX_CAN_Init>
  MX_TIM3_Init();
 8000a84:	f000 f8f8 	bl	8000c78 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <main+0x44>)
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f000 fe8c 	bl	80017aa <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f000 fb2e 	bl	80010f4 <HAL_Delay>
	  velocity = compute_rpm(TIM3->CNT);
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <main+0x48>)
 8000a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 f83b 	bl	8000b18 <compute_rpm>
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <main+0x4c>)
 8000aa6:	601a      	str	r2, [r3, #0]
	  TIM3->CNT=0;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <main+0x48>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	625a      	str	r2, [r3, #36]	; 0x24
	  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000aae:	e7eb      	b.n	8000a88 <main+0x1c>
 8000ab0:	48000400 	.word	0x48000400
 8000ab4:	40000400 	.word	0x40000400
 8000ab8:	20000098 	.word	0x20000098

08000abc <init_timer>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void init_timer(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
//	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <init_timer+0x50>)
 8000ac2:	69da      	ldr	r2, [r3, #28]
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <init_timer+0x50>)
 8000ac6:	2102      	movs	r1, #2
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	61da      	str	r2, [r3, #28]

	TIM3->ARR = 0xFFFF;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <init_timer+0x54>)
 8000ace:	4a11      	ldr	r2, [pc, #68]	; (8000b14 <init_timer+0x58>)
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <init_timer+0x54>)
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <init_timer+0x54>)
 8000ad8:	2102      	movs	r1, #2
 8000ada:	31ff      	adds	r1, #255	; 0xff
 8000adc:	430a      	orrs	r2, r1
 8000ade:	619a      	str	r2, [r3, #24]
	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <init_timer+0x54>)
 8000ae2:	6a1a      	ldr	r2, [r3, #32]
 8000ae4:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <init_timer+0x54>)
 8000ae6:	2122      	movs	r1, #34	; 0x22
 8000ae8:	438a      	bics	r2, r1
 8000aea:	621a      	str	r2, [r3, #32]
	TIM3->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <init_timer+0x54>)
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <init_timer+0x54>)
 8000af2:	2103      	movs	r1, #3
 8000af4:	430a      	orrs	r2, r1
 8000af6:	609a      	str	r2, [r3, #8]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <init_timer+0x54>)
 8000afa:	681a      	ldr	r2, [r3, #0]
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <init_timer+0x54>)
 8000afe:	2101      	movs	r1, #1
 8000b00:	430a      	orrs	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40000400 	.word	0x40000400
 8000b14:	0000ffff 	.word	0x0000ffff

08000b18 <compute_rpm>:

float compute_rpm(int n) {
 8000b18:	b590      	push	{r4, r7, lr}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	int N = 12;
 8000b20:	230c      	movs	r3, #12
 8000b22:	617b      	str	r3, [r7, #20]
	float r = 0.057;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <compute_rpm+0x68>)
 8000b26:	613b      	str	r3, [r7, #16]
	float pi = 3.14;
 8000b28:	4b16      	ldr	r3, [pc, #88]	; (8000b84 <compute_rpm+0x6c>)
 8000b2a:	60fb      	str	r3, [r7, #12]
	float sampling_period_s = 0.1;
 8000b2c:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <compute_rpm+0x70>)
 8000b2e:	60bb      	str	r3, [r7, #8]

	return (2*pi*r*n)/(N*sampling_period_s);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	1c19      	adds	r1, r3, #0
 8000b34:	1c18      	adds	r0, r3, #0
 8000b36:	f7ff fb73 	bl	8000220 <__aeabi_fadd>
 8000b3a:	1c03      	adds	r3, r0, #0
 8000b3c:	6939      	ldr	r1, [r7, #16]
 8000b3e:	1c18      	adds	r0, r3, #0
 8000b40:	f7ff fe16 	bl	8000770 <__aeabi_fmul>
 8000b44:	1c03      	adds	r3, r0, #0
 8000b46:	1c1c      	adds	r4, r3, #0
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff2b 	bl	80009a4 <__aeabi_i2f>
 8000b4e:	1c03      	adds	r3, r0, #0
 8000b50:	1c19      	adds	r1, r3, #0
 8000b52:	1c20      	adds	r0, r4, #0
 8000b54:	f7ff fe0c 	bl	8000770 <__aeabi_fmul>
 8000b58:	1c03      	adds	r3, r0, #0
 8000b5a:	1c1c      	adds	r4, r3, #0
 8000b5c:	6978      	ldr	r0, [r7, #20]
 8000b5e:	f7ff ff21 	bl	80009a4 <__aeabi_i2f>
 8000b62:	1c03      	adds	r3, r0, #0
 8000b64:	68b9      	ldr	r1, [r7, #8]
 8000b66:	1c18      	adds	r0, r3, #0
 8000b68:	f7ff fe02 	bl	8000770 <__aeabi_fmul>
 8000b6c:	1c03      	adds	r3, r0, #0
 8000b6e:	1c19      	adds	r1, r3, #0
 8000b70:	1c20      	adds	r0, r4, #0
 8000b72:	f7ff fcf1 	bl	8000558 <__aeabi_fdiv>
 8000b76:	1c03      	adds	r3, r0, #0
}
 8000b78:	1c18      	adds	r0, r3, #0
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b007      	add	sp, #28
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	3d6978d5 	.word	0x3d6978d5
 8000b84:	4048f5c3 	.word	0x4048f5c3
 8000b88:	3dcccccd 	.word	0x3dcccccd

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b093      	sub	sp, #76	; 0x4c
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	2414      	movs	r4, #20
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	0018      	movs	r0, r3
 8000b98:	2334      	movs	r3, #52	; 0x34
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f001 fc99 	bl	80024d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f001 fc92 	bl	80024d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2201      	movs	r2, #1
 8000bbc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2210      	movs	r2, #16
 8000bc2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f000 fe07 	bl	80017e0 <HAL_RCC_OscConfig>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000bd6:	f000 f909 	bl	8000dec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2207      	movs	r2, #7
 8000bde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 f978 	bl	8001eec <HAL_RCC_ClockConfig>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c00:	f000 f8f4 	bl	8000dec <Error_Handler>
  }
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b013      	add	sp, #76	; 0x4c
 8000c0a:	bd90      	pop	{r4, r7, pc}

08000c0c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000c10:	4b17      	ldr	r3, [pc, #92]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <MX_CAN_Init+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000c16:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c18:	2210      	movs	r2, #16
 8000c1a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c22:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <MX_CAN_Init+0x64>)
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f000 fa6e 	bl	800113c <HAL_CAN_Init>
 8000c60:	1e03      	subs	r3, r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000c64:	f000 f8c2 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	20000028 	.word	0x20000028
 8000c74:	40006400 	.word	0x40006400

08000c78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c78:	b590      	push	{r4, r7, lr}
 8000c7a:	b08d      	sub	sp, #52	; 0x34
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	240c      	movs	r4, #12
 8000c80:	193b      	adds	r3, r7, r4
 8000c82:	0018      	movs	r0, r3
 8000c84:	2324      	movs	r3, #36	; 0x24
 8000c86:	001a      	movs	r2, r3
 8000c88:	2100      	movs	r1, #0
 8000c8a:	f001 fc23 	bl	80024d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2308      	movs	r3, #8
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f001 fc1c 	bl	80024d4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9c:	4b25      	ldr	r3, [pc, #148]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000c9e:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <MX_TIM3_Init+0xc0>)
 8000ca0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cae:	4b21      	ldr	r3, [pc, #132]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000cb0:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <MX_TIM3_Init+0xc4>)
 8000cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	187b      	adds	r3, r7, r1
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cce:	187b      	adds	r3, r7, r1
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2201      	movs	r2, #1
 8000cea:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2200      	movs	r2, #0
 8000cf0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cf8:	187a      	adds	r2, r7, r1
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000cfc:	0011      	movs	r1, r2
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 fa4e 	bl	80021a0 <HAL_TIM_Encoder_Init>
 8000d04:	1e03      	subs	r3, r0, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d08:	f000 f870 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d18:	1d3a      	adds	r2, r7, #4
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <MX_TIM3_Init+0xbc>)
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f001 fb5c 	bl	80023dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d28:	f000 f860 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d2c:	46c0      	nop			; (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	b00d      	add	sp, #52	; 0x34
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	20000050 	.word	0x20000050
 8000d38:	40000400 	.word	0x40000400
 8000d3c:	0000ffff 	.word	0x0000ffff

08000d40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d46:	240c      	movs	r4, #12
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	2314      	movs	r3, #20
 8000d4e:	001a      	movs	r2, r3
 8000d50:	2100      	movs	r1, #0
 8000d52:	f001 fbbf 	bl	80024d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d56:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d58:	695a      	ldr	r2, [r3, #20]
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	03c9      	lsls	r1, r1, #15
 8000d60:	430a      	orrs	r2, r1
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d66:	695a      	ldr	r2, [r3, #20]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	03db      	lsls	r3, r3, #15
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d74:	695a      	ldr	r2, [r3, #20]
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	0289      	lsls	r1, r1, #10
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	615a      	str	r2, [r3, #20]
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d82:	695a      	ldr	r2, [r3, #20]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	029b      	lsls	r3, r3, #10
 8000d88:	4013      	ands	r3, r2
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	02c9      	lsls	r1, r1, #11
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	615a      	str	r2, [r3, #20]
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_GPIO_Init+0xa4>)
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	02db      	lsls	r3, r3, #11
 8000da4:	4013      	ands	r3, r2
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_GPIO_Port, DEBUG_Pin, GPIO_PIN_RESET);
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_GPIO_Init+0xa8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fcdd 	bl	8001770 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 8000db6:	0021      	movs	r1, r4
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <MX_GPIO_Init+0xa8>)
 8000dd4:	0019      	movs	r1, r3
 8000dd6:	0010      	movs	r0, r2
 8000dd8:	f000 fb62 	bl	80014a0 <HAL_GPIO_Init>

}
 8000ddc:	46c0      	nop			; (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b009      	add	sp, #36	; 0x24
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	619a      	str	r2, [r3, #24]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0549      	lsls	r1, r1, #21
 8000e20:	430a      	orrs	r2, r1
 8000e22:	61da      	str	r2, [r3, #28]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_MspInit+0x44>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	055b      	lsls	r3, r3, #21
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08b      	sub	sp, #44	; 0x2c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	2414      	movs	r4, #20
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f001 fb3e 	bl	80024d4 <memset>
  if(hcan->Instance==CAN)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_CAN_MspInit+0x94>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d133      	bne.n	8000eca <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_CAN_MspInit+0x98>)
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_CAN_MspInit+0x98>)
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	0489      	lsls	r1, r1, #18
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	61da      	str	r2, [r3, #28]
 8000e70:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <HAL_CAN_MspInit+0x98>)
 8000e72:	69da      	ldr	r2, [r3, #28]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	049b      	lsls	r3, r3, #18
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_CAN_MspInit+0x98>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_CAN_MspInit+0x98>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0289      	lsls	r1, r1, #10
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_CAN_MspInit+0x98>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	22c0      	movs	r2, #192	; 0xc0
 8000e9e:	0152      	lsls	r2, r2, #5
 8000ea0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	0021      	movs	r1, r4
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000eb6:	187b      	adds	r3, r7, r1
 8000eb8:	2204      	movs	r2, #4
 8000eba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	187a      	adds	r2, r7, r1
 8000ebe:	2390      	movs	r3, #144	; 0x90
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f000 faeb 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b00b      	add	sp, #44	; 0x2c
 8000ed0:	bd90      	pop	{r4, r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40006400 	.word	0x40006400
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	2414      	movs	r4, #20
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	2314      	movs	r3, #20
 8000eec:	001a      	movs	r2, r3
 8000eee:	2100      	movs	r1, #0
 8000ef0:	f001 faf0 	bl	80024d4 <memset>
  if(htim_encoder->Instance==TIM3)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a1b      	ldr	r2, [pc, #108]	; (8000f68 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d130      	bne.n	8000f60 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f00:	69da      	ldr	r2, [r3, #28]
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f04:	2102      	movs	r1, #2
 8000f06:	430a      	orrs	r2, r1
 8000f08:	61da      	str	r2, [r3, #28]
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0289      	lsls	r1, r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_TIM_Encoder_MspInit+0x90>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f32:	0021      	movs	r1, r4
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	22c0      	movs	r2, #192	; 0xc0
 8000f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2201      	movs	r2, #1
 8000f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	187a      	adds	r2, r7, r1
 8000f54:	2390      	movs	r3, #144	; 0x90
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	0011      	movs	r1, r2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 faa0 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b00b      	add	sp, #44	; 0x2c
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	40000400 	.word	0x40000400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f892 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000fac:	4813      	ldr	r0, [pc, #76]	; (8000ffc <LoopForever+0x6>)
    LDR R1, [R0]
 8000fae:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000fb0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000fb2:	4a13      	ldr	r2, [pc, #76]	; (8001000 <LoopForever+0xa>)
    CMP R1, R2
 8000fb4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000fb6:	d105      	bne.n	8000fc4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000fb8:	4812      	ldr	r0, [pc, #72]	; (8001004 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000fba:	4913      	ldr	r1, [pc, #76]	; (8001008 <LoopForever+0x12>)
    STR R1, [R0]
 8000fbc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000fbe:	4813      	ldr	r0, [pc, #76]	; (800100c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000fc0:	4913      	ldr	r1, [pc, #76]	; (8001010 <LoopForever+0x1a>)
    STR R1, [R0]
 8000fc2:	6001      	str	r1, [r0, #0]

08000fc4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	4813      	ldr	r0, [pc, #76]	; (8001014 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000fc6:	4914      	ldr	r1, [pc, #80]	; (8001018 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000fc8:	4a14      	ldr	r2, [pc, #80]	; (800101c <LoopForever+0x26>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000fdc:	4c11      	ldr	r4, [pc, #68]	; (8001024 <LoopForever+0x2e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fea:	f7ff ffd8 	bl	8000f9e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fee:	f001 fa4d 	bl	800248c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ff2:	f7ff fd3b 	bl	8000a6c <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   r0, =_estack
 8000ff8:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000ffc:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001000:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001004:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001008:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800100c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001010:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800101c:	080025f4 	.word	0x080025f4
  ldr r2, =_sbss
 8001020:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001024:	200000a0 	.word	0x200000a0

08001028 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_IRQHandler>
	...

0800102c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_Init+0x24>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_Init+0x24>)
 8001036:	2110      	movs	r1, #16
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800103c:	2000      	movs	r0, #0
 800103e:	f000 f809 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001042:	f7ff fed9 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_InitTick+0x5c>)
 800105e:	681c      	ldr	r4, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <HAL_InitTick+0x60>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	0019      	movs	r1, r3
 8001066:	23fa      	movs	r3, #250	; 0xfa
 8001068:	0098      	lsls	r0, r3, #2
 800106a:	f7ff f84d 	bl	8000108 <__udivsi3>
 800106e:	0003      	movs	r3, r0
 8001070:	0019      	movs	r1, r3
 8001072:	0020      	movs	r0, r4
 8001074:	f7ff f848 	bl	8000108 <__udivsi3>
 8001078:	0003      	movs	r3, r0
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fa03 	bl	8001486 <HAL_SYSTICK_Config>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e00f      	b.n	80010a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d80b      	bhi.n	80010a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
 8001094:	2200      	movs	r2, #0
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f9e0 	bl	800145c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_InitTick+0x64>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b003      	add	sp, #12
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	20000000 	.word	0x20000000
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000004 	.word	0x20000004

080010bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	001a      	movs	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	18d2      	adds	r2, r2, r3
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <HAL_IncTick+0x20>)
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	46c0      	nop			; (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	20000008 	.word	0x20000008
 80010dc:	2000009c 	.word	0x2000009c

080010e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	; (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	2000009c 	.word	0x2000009c

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fff0 	bl	80010e0 <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	001a      	movs	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	189b      	adds	r3, r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	f7ff ffe0 	bl	80010e0 <HAL_GetTick>
 8001120:	0002      	movs	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000008 	.word	0x20000008

0800113c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e0f0      	b.n	8001330 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2220      	movs	r2, #32
 8001152:	5c9b      	ldrb	r3, [r3, r2]
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff fe6f 	bl	8000e40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2102      	movs	r1, #2
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001172:	f7ff ffb5 	bl	80010e0 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800117a:	e013      	b.n	80011a4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800117c:	f7ff ffb0 	bl	80010e0 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b0a      	cmp	r3, #10
 8001188:	d90c      	bls.n	80011a4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	2280      	movs	r2, #128	; 0x80
 8001190:	0292      	lsls	r2, r2, #10
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2220      	movs	r2, #32
 800119c:	2105      	movs	r1, #5
 800119e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e0c5      	b.n	8001330 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	4013      	ands	r3, r2
 80011ae:	d1e5      	bne.n	800117c <HAL_CAN_Init+0x40>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff ff8e 	bl	80010e0 <HAL_GetTick>
 80011c4:	0003      	movs	r3, r0
 80011c6:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011c8:	e013      	b.n	80011f2 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011ca:	f7ff ff89 	bl	80010e0 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b0a      	cmp	r3, #10
 80011d6:	d90c      	bls.n	80011f2 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	0292      	lsls	r2, r2, #10
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2220      	movs	r2, #32
 80011ea:	2105      	movs	r1, #5
 80011ec:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e09e      	b.n	8001330 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0e5      	beq.n	80011ca <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7e1b      	ldrb	r3, [r3, #24]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2180      	movs	r1, #128	; 0x80
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	438a      	bics	r2, r1
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7e5b      	ldrb	r3, [r3, #25]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d108      	bne.n	8001242 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2140      	movs	r1, #64	; 0x40
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e007      	b.n	8001252 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	438a      	bics	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7e9b      	ldrb	r3, [r3, #26]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d108      	bne.n	800126c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2120      	movs	r1, #32
 8001266:	430a      	orrs	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	e007      	b.n	800127c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2120      	movs	r1, #32
 8001278:	438a      	bics	r2, r1
 800127a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	7edb      	ldrb	r3, [r3, #27]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d108      	bne.n	8001296 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2110      	movs	r1, #16
 8001290:	438a      	bics	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e007      	b.n	80012a6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2110      	movs	r1, #16
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7f1b      	ldrb	r3, [r3, #28]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d108      	bne.n	80012c0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2108      	movs	r1, #8
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	e007      	b.n	80012d0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2108      	movs	r1, #8
 80012cc:	438a      	bics	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7f5b      	ldrb	r3, [r3, #29]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d108      	bne.n	80012ea <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2104      	movs	r1, #4
 80012e4:	430a      	orrs	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	e007      	b.n	80012fa <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2104      	movs	r1, #4
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	431a      	orrs	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	431a      	orrs	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	431a      	orrs	r2, r3
 8001310:	0011      	movs	r1, r2
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	1e5a      	subs	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	2101      	movs	r1, #1
 800132c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	0002      	movs	r2, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b7f      	cmp	r3, #127	; 0x7f
 800134c:	d828      	bhi.n	80013a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800134e:	4a2f      	ldr	r2, [pc, #188]	; (800140c <__NVIC_SetPriority+0xd4>)
 8001350:	1dfb      	adds	r3, r7, #7
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	b25b      	sxtb	r3, r3
 8001356:	089b      	lsrs	r3, r3, #2
 8001358:	33c0      	adds	r3, #192	; 0xc0
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	589b      	ldr	r3, [r3, r2]
 800135e:	1dfa      	adds	r2, r7, #7
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	0011      	movs	r1, r2
 8001364:	2203      	movs	r2, #3
 8001366:	400a      	ands	r2, r1
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	21ff      	movs	r1, #255	; 0xff
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	43d2      	mvns	r2, r2
 8001372:	401a      	ands	r2, r3
 8001374:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	019b      	lsls	r3, r3, #6
 800137a:	22ff      	movs	r2, #255	; 0xff
 800137c:	401a      	ands	r2, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	0018      	movs	r0, r3
 8001384:	2303      	movs	r3, #3
 8001386:	4003      	ands	r3, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138c:	481f      	ldr	r0, [pc, #124]	; (800140c <__NVIC_SetPriority+0xd4>)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b25b      	sxtb	r3, r3
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	430a      	orrs	r2, r1
 8001398:	33c0      	adds	r3, #192	; 0xc0
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800139e:	e031      	b.n	8001404 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	4a1b      	ldr	r2, [pc, #108]	; (8001410 <__NVIC_SetPriority+0xd8>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0019      	movs	r1, r3
 80013a8:	230f      	movs	r3, #15
 80013aa:	400b      	ands	r3, r1
 80013ac:	3b08      	subs	r3, #8
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3306      	adds	r3, #6
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	18d3      	adds	r3, r2, r3
 80013b6:	3304      	adds	r3, #4
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	1dfa      	adds	r2, r7, #7
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	0011      	movs	r1, r2
 80013c0:	2203      	movs	r2, #3
 80013c2:	400a      	ands	r2, r1
 80013c4:	00d2      	lsls	r2, r2, #3
 80013c6:	21ff      	movs	r1, #255	; 0xff
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	43d2      	mvns	r2, r2
 80013ce:	401a      	ands	r2, r3
 80013d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	019b      	lsls	r3, r3, #6
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	401a      	ands	r2, r3
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	0018      	movs	r0, r3
 80013e0:	2303      	movs	r3, #3
 80013e2:	4003      	ands	r3, r0
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4809      	ldr	r0, [pc, #36]	; (8001410 <__NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	001c      	movs	r4, r3
 80013f0:	230f      	movs	r3, #15
 80013f2:	4023      	ands	r3, r4
 80013f4:	3b08      	subs	r3, #8
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	430a      	orrs	r2, r1
 80013fa:	3306      	adds	r3, #6
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	18c3      	adds	r3, r0, r3
 8001400:	3304      	adds	r3, #4
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b003      	add	sp, #12
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	e000e100 	.word	0xe000e100
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	045b      	lsls	r3, r3, #17
 8001424:	429a      	cmp	r2, r3
 8001426:	d301      	bcc.n	800142c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001428:	2301      	movs	r3, #1
 800142a:	e010      	b.n	800144e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142c:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <SysTick_Config+0x44>)
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	3a01      	subs	r2, #1
 8001432:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001434:	2301      	movs	r3, #1
 8001436:	425b      	negs	r3, r3
 8001438:	2103      	movs	r1, #3
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff ff7c 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x44>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x44>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	0018      	movs	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
 8001466:	210f      	movs	r1, #15
 8001468:	187b      	adds	r3, r7, r1
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	187b      	adds	r3, r7, r1
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b25b      	sxtb	r3, r3
 8001476:	0011      	movs	r1, r2
 8001478:	0018      	movs	r0, r3
 800147a:	f7ff ff5d 	bl	8001338 <__NVIC_SetPriority>
}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	46bd      	mov	sp, r7
 8001482:	b004      	add	sp, #16
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0018      	movs	r0, r3
 8001492:	f7ff ffbf 	bl	8001414 <SysTick_Config>
 8001496:	0003      	movs	r3, r0
}
 8001498:	0018      	movs	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	b002      	add	sp, #8
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e149      	b.n	8001744 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4091      	lsls	r1, r2
 80014ba:	000a      	movs	r2, r1
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d100      	bne.n	80014c8 <HAL_GPIO_Init+0x28>
 80014c6:	e13a      	b.n	800173e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d00b      	beq.n	80014e8 <HAL_GPIO_Init+0x48>
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d007      	beq.n	80014e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014dc:	2b11      	cmp	r3, #17
 80014de:	d003      	beq.n	80014e8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b12      	cmp	r3, #18
 80014e6:	d130      	bne.n	800154a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	2203      	movs	r2, #3
 80014f4:	409a      	lsls	r2, r3
 80014f6:	0013      	movs	r3, r2
 80014f8:	43da      	mvns	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	68da      	ldr	r2, [r3, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	409a      	lsls	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800151e:	2201      	movs	r2, #1
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	091b      	lsrs	r3, r3, #4
 8001534:	2201      	movs	r2, #1
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	2203      	movs	r2, #3
 8001556:	409a      	lsls	r2, r3
 8001558:	0013      	movs	r3, r2
 800155a:	43da      	mvns	r2, r3
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0xea>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b12      	cmp	r3, #18
 8001588:	d123      	bne.n	80015d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	58d3      	ldr	r3, [r2, r3]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2207      	movs	r2, #7
 800159c:	4013      	ands	r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2107      	movs	r1, #7
 80015b6:	400b      	ands	r3, r1
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	0092      	lsls	r2, r2, #2
 80015ce:	6939      	ldr	r1, [r7, #16]
 80015d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	43da      	mvns	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	401a      	ands	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	055b      	lsls	r3, r3, #21
 800160e:	4013      	ands	r3, r2
 8001610:	d100      	bne.n	8001614 <HAL_GPIO_Init+0x174>
 8001612:	e094      	b.n	800173e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_GPIO_Init+0x2bc>)
 8001616:	699a      	ldr	r2, [r3, #24]
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_GPIO_Init+0x2bc>)
 800161a:	2101      	movs	r1, #1
 800161c:	430a      	orrs	r2, r1
 800161e:	619a      	str	r2, [r3, #24]
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <HAL_GPIO_Init+0x2bc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2201      	movs	r2, #1
 8001626:	4013      	ands	r3, r2
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800162c:	4a4c      	ldr	r2, [pc, #304]	; (8001760 <HAL_GPIO_Init+0x2c0>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	589b      	ldr	r3, [r3, r2]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	2203      	movs	r2, #3
 800163e:	4013      	ands	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	409a      	lsls	r2, r3
 8001646:	0013      	movs	r3, r2
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	2390      	movs	r3, #144	; 0x90
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	429a      	cmp	r2, r3
 8001658:	d00d      	beq.n	8001676 <HAL_GPIO_Init+0x1d6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a41      	ldr	r2, [pc, #260]	; (8001764 <HAL_GPIO_Init+0x2c4>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d007      	beq.n	8001672 <HAL_GPIO_Init+0x1d2>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a40      	ldr	r2, [pc, #256]	; (8001768 <HAL_GPIO_Init+0x2c8>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d101      	bne.n	800166e <HAL_GPIO_Init+0x1ce>
 800166a:	2302      	movs	r3, #2
 800166c:	e004      	b.n	8001678 <HAL_GPIO_Init+0x1d8>
 800166e:	2305      	movs	r3, #5
 8001670:	e002      	b.n	8001678 <HAL_GPIO_Init+0x1d8>
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <HAL_GPIO_Init+0x1d8>
 8001676:	2300      	movs	r3, #0
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	2103      	movs	r1, #3
 800167c:	400a      	ands	r2, r1
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4093      	lsls	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001688:	4935      	ldr	r1, [pc, #212]	; (8001760 <HAL_GPIO_Init+0x2c0>)
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	089b      	lsrs	r3, r3, #2
 800168e:	3302      	adds	r3, #2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <HAL_GPIO_Init+0x2cc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	025b      	lsls	r3, r3, #9
 80016ae:	4013      	ands	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016ba:	4b2c      	ldr	r3, [pc, #176]	; (800176c <HAL_GPIO_Init+0x2cc>)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_GPIO_Init+0x2cc>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4013      	ands	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016e4:	4b21      	ldr	r3, [pc, #132]	; (800176c <HAL_GPIO_Init+0x2cc>)
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_GPIO_Init+0x2cc>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	035b      	lsls	r3, r3, #13
 8001702:	4013      	ands	r3, r2
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_GPIO_Init+0x2cc>)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_GPIO_Init+0x2cc>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	43da      	mvns	r2, r3
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	039b      	lsls	r3, r3, #14
 800172c:	4013      	ands	r3, r2
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_GPIO_Init+0x2cc>)
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	40da      	lsrs	r2, r3
 800174c:	1e13      	subs	r3, r2, #0
 800174e:	d000      	beq.n	8001752 <HAL_GPIO_Init+0x2b2>
 8001750:	e6ae      	b.n	80014b0 <HAL_GPIO_Init+0x10>
  } 
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b006      	add	sp, #24
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	40010000 	.word	0x40010000
 8001764:	48000400 	.word	0x48000400
 8001768:	48000800 	.word	0x48000800
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	0008      	movs	r0, r1
 800177a:	0011      	movs	r1, r2
 800177c:	1cbb      	adds	r3, r7, #2
 800177e:	1c02      	adds	r2, r0, #0
 8001780:	801a      	strh	r2, [r3, #0]
 8001782:	1c7b      	adds	r3, r7, #1
 8001784:	1c0a      	adds	r2, r1, #0
 8001786:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001788:	1c7b      	adds	r3, r7, #1
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001790:	1cbb      	adds	r3, r7, #2
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001798:	e003      	b.n	80017a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800179a:	1cbb      	adds	r3, r7, #2
 800179c:	881a      	ldrh	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	000a      	movs	r2, r1
 80017b4:	1cbb      	adds	r3, r7, #2
 80017b6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017be:	1cbb      	adds	r3, r7, #2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4013      	ands	r3, r2
 80017c6:	041a      	lsls	r2, r3, #16
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43db      	mvns	r3, r3
 80017cc:	1cb9      	adds	r1, r7, #2
 80017ce:	8809      	ldrh	r1, [r1, #0]
 80017d0:	400b      	ands	r3, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
}
 80017d8:	46c0      	nop			; (mov r8, r8)
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	f000 fb76 	bl	8001ee0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	d100      	bne.n	8001800 <HAL_RCC_OscConfig+0x20>
 80017fe:	e08e      	b.n	800191e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001800:	4bc5      	ldr	r3, [pc, #788]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	220c      	movs	r2, #12
 8001806:	4013      	ands	r3, r2
 8001808:	2b04      	cmp	r3, #4
 800180a:	d00e      	beq.n	800182a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800180c:	4bc2      	ldr	r3, [pc, #776]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	220c      	movs	r2, #12
 8001812:	4013      	ands	r3, r2
 8001814:	2b08      	cmp	r3, #8
 8001816:	d117      	bne.n	8001848 <HAL_RCC_OscConfig+0x68>
 8001818:	4bbf      	ldr	r3, [pc, #764]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	23c0      	movs	r3, #192	; 0xc0
 800181e:	025b      	lsls	r3, r3, #9
 8001820:	401a      	ands	r2, r3
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	429a      	cmp	r2, r3
 8001828:	d10e      	bne.n	8001848 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	4bbb      	ldr	r3, [pc, #748]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	029b      	lsls	r3, r3, #10
 8001832:	4013      	ands	r3, r2
 8001834:	d100      	bne.n	8001838 <HAL_RCC_OscConfig+0x58>
 8001836:	e071      	b.n	800191c <HAL_RCC_OscConfig+0x13c>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d000      	beq.n	8001842 <HAL_RCC_OscConfig+0x62>
 8001840:	e06c      	b.n	800191c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	f000 fb4c 	bl	8001ee0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d107      	bne.n	8001860 <HAL_RCC_OscConfig+0x80>
 8001850:	4bb1      	ldr	r3, [pc, #708]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4bb0      	ldr	r3, [pc, #704]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0249      	lsls	r1, r1, #9
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e02f      	b.n	80018c0 <HAL_RCC_OscConfig+0xe0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10c      	bne.n	8001882 <HAL_RCC_OscConfig+0xa2>
 8001868:	4bab      	ldr	r3, [pc, #684]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4baa      	ldr	r3, [pc, #680]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800186e:	49ab      	ldr	r1, [pc, #684]	; (8001b1c <HAL_RCC_OscConfig+0x33c>)
 8001870:	400a      	ands	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	4ba8      	ldr	r3, [pc, #672]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4ba7      	ldr	r3, [pc, #668]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800187a:	49a9      	ldr	r1, [pc, #676]	; (8001b20 <HAL_RCC_OscConfig+0x340>)
 800187c:	400a      	ands	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e01e      	b.n	80018c0 <HAL_RCC_OscConfig+0xe0>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	2b05      	cmp	r3, #5
 8001888:	d10e      	bne.n	80018a8 <HAL_RCC_OscConfig+0xc8>
 800188a:	4ba3      	ldr	r3, [pc, #652]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4ba2      	ldr	r3, [pc, #648]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	02c9      	lsls	r1, r1, #11
 8001894:	430a      	orrs	r2, r1
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	4b9f      	ldr	r3, [pc, #636]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b9e      	ldr	r3, [pc, #632]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0249      	lsls	r1, r1, #9
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xe0>
 80018a8:	4b9b      	ldr	r3, [pc, #620]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b9a      	ldr	r3, [pc, #616]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018ae:	499b      	ldr	r1, [pc, #620]	; (8001b1c <HAL_RCC_OscConfig+0x33c>)
 80018b0:	400a      	ands	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	4b98      	ldr	r3, [pc, #608]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b97      	ldr	r3, [pc, #604]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018ba:	4999      	ldr	r1, [pc, #612]	; (8001b20 <HAL_RCC_OscConfig+0x340>)
 80018bc:	400a      	ands	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d014      	beq.n	80018f2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc0a 	bl	80010e0 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff fc05 	bl	80010e0 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e2fd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e4:	4b8c      	ldr	r3, [pc, #560]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0xf2>
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fbf5 	bl	80010e0 <HAL_GetTick>
 80018f6:	0003      	movs	r3, r0
 80018f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fbf0 	bl	80010e0 <HAL_GetTick>
 8001900:	0002      	movs	r2, r0
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e2e8      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b82      	ldr	r3, [pc, #520]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	2380      	movs	r3, #128	; 0x80
 8001914:	029b      	lsls	r3, r3, #10
 8001916:	4013      	ands	r3, r2
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x11c>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d100      	bne.n	800192a <HAL_RCC_OscConfig+0x14a>
 8001928:	e06c      	b.n	8001a04 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800192a:	4b7b      	ldr	r3, [pc, #492]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	220c      	movs	r2, #12
 8001930:	4013      	ands	r3, r2
 8001932:	d00e      	beq.n	8001952 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001934:	4b78      	ldr	r3, [pc, #480]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	220c      	movs	r2, #12
 800193a:	4013      	ands	r3, r2
 800193c:	2b08      	cmp	r3, #8
 800193e:	d11f      	bne.n	8001980 <HAL_RCC_OscConfig+0x1a0>
 8001940:	4b75      	ldr	r3, [pc, #468]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	23c0      	movs	r3, #192	; 0xc0
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	401a      	ands	r2, r3
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	021b      	lsls	r3, r3, #8
 800194e:	429a      	cmp	r2, r3
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b71      	ldr	r3, [pc, #452]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x188>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d001      	beq.n	8001968 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e2bb      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b6b      	ldr	r3, [pc, #428]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	22f8      	movs	r2, #248	; 0xf8
 800196e:	4393      	bics	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00da      	lsls	r2, r3, #3
 8001978:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e041      	b.n	8001a04 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d024      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b62      	ldr	r3, [pc, #392]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 800198e:	2101      	movs	r1, #1
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fba4 	bl	80010e0 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff fb9f 	bl	80010e0 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e297      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b59      	ldr	r3, [pc, #356]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2202      	movs	r2, #2
 80019b6:	4013      	ands	r3, r2
 80019b8:	d0f1      	beq.n	800199e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ba:	4b57      	ldr	r3, [pc, #348]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	22f8      	movs	r2, #248	; 0xf8
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	00da      	lsls	r2, r3, #3
 80019ca:	4b53      	ldr	r3, [pc, #332]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e018      	b.n	8001a04 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b51      	ldr	r3, [pc, #324]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019d8:	2101      	movs	r1, #1
 80019da:	438a      	bics	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fb7f 	bl	80010e0 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb7a 	bl	80010e0 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e272      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d1f1      	bne.n	80019e8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2208      	movs	r2, #8
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d036      	beq.n	8001a7c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d019      	beq.n	8001a4a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a16:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1a:	4b3f      	ldr	r3, [pc, #252]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a22:	f7ff fb5d 	bl	80010e0 <HAL_GetTick>
 8001a26:	0003      	movs	r3, r0
 8001a28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fb58 	bl	80010e0 <HAL_GetTick>
 8001a30:	0002      	movs	r2, r0
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e250      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	2202      	movs	r2, #2
 8001a44:	4013      	ands	r3, r2
 8001a46:	d0f1      	beq.n	8001a2c <HAL_RCC_OscConfig+0x24c>
 8001a48:	e018      	b.n	8001a7c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a4e:	4b32      	ldr	r3, [pc, #200]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	438a      	bics	r2, r1
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7ff fb43 	bl	80010e0 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a60:	f7ff fb3e 	bl	80010e0 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e236      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a72:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d1f1      	bne.n	8001a60 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2204      	movs	r2, #4
 8001a82:	4013      	ands	r3, r2
 8001a84:	d100      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2a8>
 8001a86:	e0b5      	b.n	8001bf4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a88:	201f      	movs	r0, #31
 8001a8a:	183b      	adds	r3, r7, r0
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	055b      	lsls	r3, r3, #21
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d110      	bne.n	8001abe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0549      	lsls	r1, r1, #21
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	61da      	str	r2, [r3, #28]
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ab8:	183b      	adds	r3, r7, r0
 8001aba:	2201      	movs	r2, #1
 8001abc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_OscConfig+0x344>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d11a      	bne.n	8001b00 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aca:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <HAL_RCC_OscConfig+0x344>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_RCC_OscConfig+0x344>)
 8001ad0:	2180      	movs	r1, #128	; 0x80
 8001ad2:	0049      	lsls	r1, r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fb02 	bl	80010e0 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff fafd 	bl	80010e0 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	; 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1f5      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_OscConfig+0x344>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4013      	ands	r3, r2
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10f      	bne.n	8001b28 <HAL_RCC_OscConfig+0x348>
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001b0a:	6a1a      	ldr	r2, [r3, #32]
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <HAL_RCC_OscConfig+0x338>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	430a      	orrs	r2, r1
 8001b12:	621a      	str	r2, [r3, #32]
 8001b14:	e036      	b.n	8001b84 <HAL_RCC_OscConfig+0x3a4>
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	fffeffff 	.word	0xfffeffff
 8001b20:	fffbffff 	.word	0xfffbffff
 8001b24:	40007000 	.word	0x40007000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x36a>
 8001b30:	4bca      	ldr	r3, [pc, #808]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b32:	6a1a      	ldr	r2, [r3, #32]
 8001b34:	4bc9      	ldr	r3, [pc, #804]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	438a      	bics	r2, r1
 8001b3a:	621a      	str	r2, [r3, #32]
 8001b3c:	4bc7      	ldr	r3, [pc, #796]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	6a1a      	ldr	r2, [r3, #32]
 8001b40:	4bc6      	ldr	r3, [pc, #792]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b42:	2104      	movs	r1, #4
 8001b44:	438a      	bics	r2, r1
 8001b46:	621a      	str	r2, [r3, #32]
 8001b48:	e01c      	b.n	8001b84 <HAL_RCC_OscConfig+0x3a4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d10c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x38c>
 8001b52:	4bc2      	ldr	r3, [pc, #776]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	4bc1      	ldr	r3, [pc, #772]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b58:	2104      	movs	r1, #4
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	621a      	str	r2, [r3, #32]
 8001b5e:	4bbf      	ldr	r3, [pc, #764]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b60:	6a1a      	ldr	r2, [r3, #32]
 8001b62:	4bbe      	ldr	r3, [pc, #760]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	621a      	str	r2, [r3, #32]
 8001b6a:	e00b      	b.n	8001b84 <HAL_RCC_OscConfig+0x3a4>
 8001b6c:	4bbb      	ldr	r3, [pc, #748]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b6e:	6a1a      	ldr	r2, [r3, #32]
 8001b70:	4bba      	ldr	r3, [pc, #744]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	621a      	str	r2, [r3, #32]
 8001b78:	4bb8      	ldr	r3, [pc, #736]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	6a1a      	ldr	r2, [r3, #32]
 8001b7c:	4bb7      	ldr	r3, [pc, #732]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001b7e:	2104      	movs	r1, #4
 8001b80:	438a      	bics	r2, r1
 8001b82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d014      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8c:	f7ff faa8 	bl	80010e0 <HAL_GetTick>
 8001b90:	0003      	movs	r3, r0
 8001b92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff faa3 	bl	80010e0 <HAL_GetTick>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	4aaf      	ldr	r2, [pc, #700]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e19a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	4bac      	ldr	r3, [pc, #688]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2202      	movs	r2, #2
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3b6>
 8001bb4:	e013      	b.n	8001bde <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fa93 	bl	80010e0 <HAL_GetTick>
 8001bba:	0003      	movs	r3, r0
 8001bbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bbe:	e009      	b.n	8001bd4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bc0:	f7ff fa8e 	bl	80010e0 <HAL_GetTick>
 8001bc4:	0002      	movs	r2, r0
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	4aa5      	ldr	r2, [pc, #660]	; (8001e60 <HAL_RCC_OscConfig+0x680>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e185      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	4ba1      	ldr	r3, [pc, #644]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d1f0      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bde:	231f      	movs	r3, #31
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be8:	4b9c      	ldr	r3, [pc, #624]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001bea:	69da      	ldr	r2, [r3, #28]
 8001bec:	4b9b      	ldr	r3, [pc, #620]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001bee:	499d      	ldr	r1, [pc, #628]	; (8001e64 <HAL_RCC_OscConfig+0x684>)
 8001bf0:	400a      	ands	r2, r1
 8001bf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d063      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d12a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c06:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c0a:	4b94      	ldr	r3, [pc, #592]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001c12:	4b92      	ldr	r3, [pc, #584]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c16:	4b91      	ldr	r3, [pc, #580]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff fa5f 	bl	80010e0 <HAL_GetTick>
 8001c22:	0003      	movs	r3, r0
 8001c24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c28:	f7ff fa5a 	bl	80010e0 <HAL_GetTick>
 8001c2c:	0002      	movs	r2, r0
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e152      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3e:	2202      	movs	r2, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	d0f1      	beq.n	8001c28 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c44:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c48:	22f8      	movs	r2, #248	; 0xf8
 8001c4a:	4393      	bics	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	00da      	lsls	r2, r3, #3
 8001c54:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
 8001c5a:	e034      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	3305      	adds	r3, #5
 8001c62:	d111      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c64:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c70:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	22f8      	movs	r2, #248	; 0xf8
 8001c76:	4393      	bics	r3, r2
 8001c78:	0019      	movs	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	00da      	lsls	r2, r3, #3
 8001c80:	4b76      	ldr	r3, [pc, #472]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
 8001c86:	e01e      	b.n	8001cc6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c88:	4b74      	ldr	r3, [pc, #464]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c8e:	2104      	movs	r1, #4
 8001c90:	430a      	orrs	r2, r1
 8001c92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c94:	4b71      	ldr	r3, [pc, #452]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c98:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca0:	f7ff fa1e 	bl	80010e0 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001caa:	f7ff fa19 	bl	80010e0 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e111      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001cbc:	4b67      	ldr	r3, [pc, #412]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f1      	bne.n	8001caa <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d05c      	beq.n	8001d8a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001cd0:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	d00e      	beq.n	8001cfa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001cdc:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d114      	bne.n	8001d12 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ce8:	4b5c      	ldr	r3, [pc, #368]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001cea:	685a      	ldr	r2, [r3, #4]
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	401a      	ands	r2, r3
 8001cf2:	23c0      	movs	r3, #192	; 0xc0
 8001cf4:	025b      	lsls	r3, r3, #9
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d10b      	bne.n	8001d12 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001cfa:	4b58      	ldr	r3, [pc, #352]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	4013      	ands	r3, r2
 8001d04:	d040      	beq.n	8001d88 <HAL_RCC_OscConfig+0x5a8>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d03c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e0e6      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01b      	beq.n	8001d52 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d1a:	4b50      	ldr	r3, [pc, #320]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1e:	4b4f      	ldr	r3, [pc, #316]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d20:	2180      	movs	r1, #128	; 0x80
 8001d22:	0249      	lsls	r1, r1, #9
 8001d24:	430a      	orrs	r2, r1
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff f9da 	bl	80010e0 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d32:	f7ff f9d5 	bl	80010e0 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0cd      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001d44:	4b45      	ldr	r3, [pc, #276]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x552>
 8001d50:	e01b      	b.n	8001d8a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d58:	4943      	ldr	r1, [pc, #268]	; (8001e68 <HAL_RCC_OscConfig+0x688>)
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5e:	f7ff f9bf 	bl	80010e0 <HAL_GetTick>
 8001d62:	0003      	movs	r3, r0
 8001d64:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d68:	f7ff f9ba 	bl	80010e0 <HAL_GetTick>
 8001d6c:	0002      	movs	r2, r0
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e0b2      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001d7a:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	025b      	lsls	r3, r3, #9
 8001d82:	4013      	ands	r3, r2
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x588>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001d88:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <HAL_RCC_OscConfig+0x5b4>
 8001d92:	e0a4      	b.n	8001ede <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b31      	ldr	r3, [pc, #196]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d100      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5c2>
 8001da0:	e078      	b.n	8001e94 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d14c      	bne.n	8001e44 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	4b2c      	ldr	r3, [pc, #176]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001db0:	492e      	ldr	r1, [pc, #184]	; (8001e6c <HAL_RCC_OscConfig+0x68c>)
 8001db2:	400a      	ands	r2, r1
 8001db4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff f993 	bl	80010e0 <HAL_GetTick>
 8001dba:	0003      	movs	r3, r0
 8001dbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f98e 	bl	80010e0 <HAL_GetTick>
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e086      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	049b      	lsls	r3, r3, #18
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dde:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de2:	220f      	movs	r2, #15
 8001de4:	4393      	bics	r3, r2
 8001de6:	0019      	movs	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dec:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001dee:	430a      	orrs	r2, r1
 8001df0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001df2:	4b1a      	ldr	r3, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	4a1e      	ldr	r2, [pc, #120]	; (8001e70 <HAL_RCC_OscConfig+0x690>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	431a      	orrs	r2, r3
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0449      	lsls	r1, r1, #17
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f961 	bl	80010e0 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e24:	f7ff f95c 	bl	80010e0 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e054      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e36:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	049b      	lsls	r3, r3, #18
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x644>
 8001e42:	e04c      	b.n	8001ede <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_OscConfig+0x67c>)
 8001e4a:	4908      	ldr	r1, [pc, #32]	; (8001e6c <HAL_RCC_OscConfig+0x68c>)
 8001e4c:	400a      	ands	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff f946 	bl	80010e0 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x6a6>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	00001388 	.word	0x00001388
 8001e64:	efffffff 	.word	0xefffffff
 8001e68:	fffeffff 	.word	0xfffeffff
 8001e6c:	feffffff 	.word	0xfeffffff
 8001e70:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f934 	bl	80010e0 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e02c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_RCC_OscConfig+0x708>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x694>
 8001e92:	e024      	b.n	8001ede <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e01f      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_RCC_OscConfig+0x708>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_RCC_OscConfig+0x708>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10e      	bne.n	8001eda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	220f      	movs	r2, #15
 8001ec0:	401a      	ands	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d107      	bne.n	8001eda <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	23f0      	movs	r3, #240	; 0xf0
 8001ece:	039b      	lsls	r3, r3, #14
 8001ed0:	401a      	ands	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b008      	add	sp, #32
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0bf      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2201      	movs	r2, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d911      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	4393      	bics	r3, r2
 8001f16:	0019      	movs	r1, r3
 8001f18:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f20:	4b59      	ldr	r3, [pc, #356]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	4013      	ands	r3, r2
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e0a6      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d015      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2204      	movs	r2, #4
 8001f42:	4013      	ands	r3, r2
 8001f44:	d006      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f46:	4b51      	ldr	r3, [pc, #324]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001f4c:	21e0      	movs	r1, #224	; 0xe0
 8001f4e:	00c9      	lsls	r1, r1, #3
 8001f50:	430a      	orrs	r2, r1
 8001f52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	22f0      	movs	r2, #240	; 0xf0
 8001f5a:	4393      	bics	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d04c      	beq.n	800200c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d107      	bne.n	8001f8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b44      	ldr	r3, [pc, #272]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	029b      	lsls	r3, r3, #10
 8001f82:	4013      	ands	r3, r2
 8001f84:	d120      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e07a      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d107      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d114      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06e      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d107      	bne.n	8001fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	025b      	lsls	r3, r3, #9
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d108      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e062      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e05b      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2203      	movs	r2, #3
 8001fce:	4393      	bics	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f880 	bl	80010e0 <HAL_GetTick>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe4:	e009      	b.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe6:	f7ff f87b 	bl	80010e0 <HAL_GetTick>
 8001fea:	0002      	movs	r2, r0
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_RCC_ClockConfig+0x1a4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e042      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffa:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	220c      	movs	r2, #12
 8002000:	401a      	ands	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d1ec      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d211      	bcs.n	800203e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201a:	4b1b      	ldr	r3, [pc, #108]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2201      	movs	r2, #1
 8002020:	4393      	bics	r3, r2
 8002022:	0019      	movs	r1, r3
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <HAL_RCC_ClockConfig+0x19c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d001      	beq.n	800203e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e020      	b.n	8002080 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2204      	movs	r2, #4
 8002044:	4013      	ands	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_RCC_ClockConfig+0x1a8>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8002058:	430a      	orrs	r2, r1
 800205a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800205c:	f000 f820 	bl	80020a0 <HAL_RCC_GetSysClockFreq>
 8002060:	0001      	movs	r1, r0
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x1a0>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	220f      	movs	r2, #15
 800206a:	4013      	ands	r3, r2
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <HAL_RCC_ClockConfig+0x1ac>)
 800206e:	5cd3      	ldrb	r3, [r2, r3]
 8002070:	000a      	movs	r2, r1
 8002072:	40da      	lsrs	r2, r3
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <HAL_RCC_ClockConfig+0x1b0>)
 8002076:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe ffeb 	bl	8001054 <HAL_InitTick>
  
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	0018      	movs	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	b004      	add	sp, #16
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40022000 	.word	0x40022000
 800208c:	40021000 	.word	0x40021000
 8002090:	00001388 	.word	0x00001388
 8002094:	fffff8ff 	.word	0xfffff8ff
 8002098:	080025dc 	.word	0x080025dc
 800209c:	20000000 	.word	0x20000000

080020a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b08f      	sub	sp, #60	; 0x3c
 80020a4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020a6:	2314      	movs	r3, #20
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	4a38      	ldr	r2, [pc, #224]	; (800218c <HAL_RCC_GetSysClockFreq+0xec>)
 80020ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020ae:	c313      	stmia	r3!, {r0, r1, r4}
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	4a36      	ldr	r2, [pc, #216]	; (8002190 <HAL_RCC_GetSysClockFreq+0xf0>)
 80020b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020ba:	c313      	stmia	r3!, {r0, r1, r4}
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c8:	2300      	movs	r3, #0
 80020ca:	637b      	str	r3, [r7, #52]	; 0x34
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020d4:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <HAL_RCC_GetSysClockFreq+0xf4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020dc:	220c      	movs	r2, #12
 80020de:	4013      	ands	r3, r2
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d047      	beq.n	8002174 <HAL_RCC_GetSysClockFreq+0xd4>
 80020e4:	d849      	bhi.n	800217a <HAL_RCC_GetSysClockFreq+0xda>
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d002      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x50>
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d003      	beq.n	80020f6 <HAL_RCC_GetSysClockFreq+0x56>
 80020ee:	e044      	b.n	800217a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020f0:	4b29      	ldr	r3, [pc, #164]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020f4:	e044      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80020f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f8:	0c9b      	lsrs	r3, r3, #18
 80020fa:	220f      	movs	r2, #15
 80020fc:	4013      	ands	r3, r2
 80020fe:	2214      	movs	r2, #20
 8002100:	18ba      	adds	r2, r7, r2
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002106:	4b23      	ldr	r3, [pc, #140]	; (8002194 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	220f      	movs	r2, #15
 800210c:	4013      	ands	r3, r2
 800210e:	1d3a      	adds	r2, r7, #4
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002116:	23c0      	movs	r3, #192	; 0xc0
 8002118:	025b      	lsls	r3, r3, #9
 800211a:	401a      	ands	r2, r3
 800211c:	2380      	movs	r3, #128	; 0x80
 800211e:	025b      	lsls	r3, r3, #9
 8002120:	429a      	cmp	r2, r3
 8002122:	d109      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002126:	481c      	ldr	r0, [pc, #112]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002128:	f7fd ffee 	bl	8000108 <__udivsi3>
 800212c:	0003      	movs	r3, r0
 800212e:	001a      	movs	r2, r3
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	4353      	muls	r3, r2
 8002134:	637b      	str	r3, [r7, #52]	; 0x34
 8002136:	e01a      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800213a:	23c0      	movs	r3, #192	; 0xc0
 800213c:	025b      	lsls	r3, r3, #9
 800213e:	401a      	ands	r2, r3
 8002140:	23c0      	movs	r3, #192	; 0xc0
 8002142:	025b      	lsls	r3, r3, #9
 8002144:	429a      	cmp	r2, r3
 8002146:	d109      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002148:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800214a:	4814      	ldr	r0, [pc, #80]	; (800219c <HAL_RCC_GetSysClockFreq+0xfc>)
 800214c:	f7fd ffdc 	bl	8000108 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	001a      	movs	r2, r3
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	4353      	muls	r3, r2
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
 800215a:	e008      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800215c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800215e:	480e      	ldr	r0, [pc, #56]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002160:	f7fd ffd2 	bl	8000108 <__udivsi3>
 8002164:	0003      	movs	r3, r0
 8002166:	001a      	movs	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	4353      	muls	r3, r2
 800216c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800216e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002172:	e005      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002174:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002176:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002178:	e002      	b.n	8002180 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <HAL_RCC_GetSysClockFreq+0xf8>)
 800217c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800217e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b00f      	add	sp, #60	; 0x3c
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	080024fc 	.word	0x080024fc
 8002190:	0800250c 	.word	0x0800250c
 8002194:	40021000 	.word	0x40021000
 8002198:	007a1200 	.word	0x007a1200
 800219c:	02dc6c00 	.word	0x02dc6c00

080021a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e090      	b.n	80022d6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	223d      	movs	r2, #61	; 0x3d
 80021b8:	5c9b      	ldrb	r3, [r3, r2]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d107      	bne.n	80021d0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	223c      	movs	r2, #60	; 0x3c
 80021c4:	2100      	movs	r1, #0
 80021c6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	0018      	movs	r0, r3
 80021cc:	f7fe fe86 	bl	8000edc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	223d      	movs	r2, #61	; 0x3d
 80021d4:	2102      	movs	r1, #2
 80021d6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	493f      	ldr	r1, [pc, #252]	; (80022e0 <HAL_TIM_Encoder_Init+0x140>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	0019      	movs	r1, r3
 80021f2:	0010      	movs	r0, r2
 80021f4:	f000 f87c 	bl	80022f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <HAL_TIM_Encoder_Init+0x144>)
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	4313      	orrs	r3, r2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4a2c      	ldr	r2, [pc, #176]	; (80022e8 <HAL_TIM_Encoder_Init+0x148>)
 8002238:	4013      	ands	r3, r2
 800223a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4a2b      	ldr	r2, [pc, #172]	; (80022ec <HAL_TIM_Encoder_Init+0x14c>)
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	4313      	orrs	r3, r2
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	011a      	lsls	r2, r3, #4
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	031b      	lsls	r3, r3, #12
 8002262:	4313      	orrs	r3, r2
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2222      	movs	r2, #34	; 0x22
 800226e:	4393      	bics	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2288      	movs	r2, #136	; 0x88
 8002276:	4393      	bics	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4313      	orrs	r3, r2
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2246      	movs	r2, #70	; 0x46
 80022a8:	2101      	movs	r1, #1
 80022aa:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	223e      	movs	r2, #62	; 0x3e
 80022b0:	2101      	movs	r1, #1
 80022b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	223f      	movs	r2, #63	; 0x3f
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2242      	movs	r2, #66	; 0x42
 80022c0:	2101      	movs	r1, #1
 80022c2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2243      	movs	r2, #67	; 0x43
 80022c8:	2101      	movs	r1, #1
 80022ca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	223d      	movs	r2, #61	; 0x3d
 80022d0:	2101      	movs	r1, #1
 80022d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b006      	add	sp, #24
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	ffffbff8 	.word	0xffffbff8
 80022e4:	fffffcfc 	.word	0xfffffcfc
 80022e8:	fffff3f3 	.word	0xfffff3f3
 80022ec:	ffff0f0f 	.word	0xffff0f0f

080022f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <TIM_Base_SetConfig+0xd4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d008      	beq.n	800231a <TIM_Base_SetConfig+0x2a>
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	05db      	lsls	r3, r3, #23
 800230e:	429a      	cmp	r2, r3
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0x2a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a2c      	ldr	r2, [pc, #176]	; (80023c8 <TIM_Base_SetConfig+0xd8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2270      	movs	r2, #112	; 0x70
 800231e:	4393      	bics	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <TIM_Base_SetConfig+0xd4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d014      	beq.n	800235e <TIM_Base_SetConfig+0x6e>
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	429a      	cmp	r2, r3
 800233c:	d00f      	beq.n	800235e <TIM_Base_SetConfig+0x6e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <TIM_Base_SetConfig+0xd8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <TIM_Base_SetConfig+0x6e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a20      	ldr	r2, [pc, #128]	; (80023cc <TIM_Base_SetConfig+0xdc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d007      	beq.n	800235e <TIM_Base_SetConfig+0x6e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a1f      	ldr	r2, [pc, #124]	; (80023d0 <TIM_Base_SetConfig+0xe0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d003      	beq.n	800235e <TIM_Base_SetConfig+0x6e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a1e      	ldr	r2, [pc, #120]	; (80023d4 <TIM_Base_SetConfig+0xe4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d108      	bne.n	8002370 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <TIM_Base_SetConfig+0xe8>)
 8002362:	4013      	ands	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	4313      	orrs	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2280      	movs	r2, #128	; 0x80
 8002374:	4393      	bics	r3, r2
 8002376:	001a      	movs	r2, r3
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <TIM_Base_SetConfig+0xd4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0xbe>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <TIM_Base_SetConfig+0xe0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0xbe>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <TIM_Base_SetConfig+0xe4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d103      	bne.n	80023b6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	691a      	ldr	r2, [r3, #16]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	615a      	str	r2, [r3, #20]
}
 80023bc:	46c0      	nop			; (mov r8, r8)
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40012c00 	.word	0x40012c00
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40002000 	.word	0x40002000
 80023d0:	40014400 	.word	0x40014400
 80023d4:	40014800 	.word	0x40014800
 80023d8:	fffffcff 	.word	0xfffffcff

080023dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	223c      	movs	r2, #60	; 0x3c
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e042      	b.n	800247a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	223c      	movs	r2, #60	; 0x3c
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	223d      	movs	r2, #61	; 0x3d
 8002400:	2102      	movs	r1, #2
 8002402:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2270      	movs	r2, #112	; 0x70
 8002418:	4393      	bics	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	4313      	orrs	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68fa      	ldr	r2, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d00a      	beq.n	800244e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2380      	movs	r3, #128	; 0x80
 800243e:	05db      	lsls	r3, r3, #23
 8002440:	429a      	cmp	r2, r3
 8002442:	d004      	beq.n	800244e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10c      	bne.n	8002468 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2280      	movs	r2, #128	; 0x80
 8002452:	4393      	bics	r3, r2
 8002454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	4313      	orrs	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	223d      	movs	r2, #61	; 0x3d
 800246c:	2101      	movs	r1, #1
 800246e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	223c      	movs	r2, #60	; 0x3c
 8002474:	2100      	movs	r1, #0
 8002476:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400

0800248c <__libc_init_array>:
 800248c:	b570      	push	{r4, r5, r6, lr}
 800248e:	2600      	movs	r6, #0
 8002490:	4d0c      	ldr	r5, [pc, #48]	; (80024c4 <__libc_init_array+0x38>)
 8002492:	4c0d      	ldr	r4, [pc, #52]	; (80024c8 <__libc_init_array+0x3c>)
 8002494:	1b64      	subs	r4, r4, r5
 8002496:	10a4      	asrs	r4, r4, #2
 8002498:	42a6      	cmp	r6, r4
 800249a:	d109      	bne.n	80024b0 <__libc_init_array+0x24>
 800249c:	2600      	movs	r6, #0
 800249e:	f000 f821 	bl	80024e4 <_init>
 80024a2:	4d0a      	ldr	r5, [pc, #40]	; (80024cc <__libc_init_array+0x40>)
 80024a4:	4c0a      	ldr	r4, [pc, #40]	; (80024d0 <__libc_init_array+0x44>)
 80024a6:	1b64      	subs	r4, r4, r5
 80024a8:	10a4      	asrs	r4, r4, #2
 80024aa:	42a6      	cmp	r6, r4
 80024ac:	d105      	bne.n	80024ba <__libc_init_array+0x2e>
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
 80024b0:	00b3      	lsls	r3, r6, #2
 80024b2:	58eb      	ldr	r3, [r5, r3]
 80024b4:	4798      	blx	r3
 80024b6:	3601      	adds	r6, #1
 80024b8:	e7ee      	b.n	8002498 <__libc_init_array+0xc>
 80024ba:	00b3      	lsls	r3, r6, #2
 80024bc:	58eb      	ldr	r3, [r5, r3]
 80024be:	4798      	blx	r3
 80024c0:	3601      	adds	r6, #1
 80024c2:	e7f2      	b.n	80024aa <__libc_init_array+0x1e>
 80024c4:	080025ec 	.word	0x080025ec
 80024c8:	080025ec 	.word	0x080025ec
 80024cc:	080025ec 	.word	0x080025ec
 80024d0:	080025f0 	.word	0x080025f0

080024d4 <memset>:
 80024d4:	0003      	movs	r3, r0
 80024d6:	1882      	adds	r2, r0, r2
 80024d8:	4293      	cmp	r3, r2
 80024da:	d100      	bne.n	80024de <memset+0xa>
 80024dc:	4770      	bx	lr
 80024de:	7019      	strb	r1, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	e7f9      	b.n	80024d8 <memset+0x4>

080024e4 <_init>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr

080024f0 <_fini>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f6:	bc08      	pop	{r3}
 80024f8:	469e      	mov	lr, r3
 80024fa:	4770      	bx	lr
